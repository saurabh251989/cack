VE 3.0e CCOV CMCDC #i5 7.0.0.0
FC "AOM_A429_OUTPUT_MONITORING.C" "E:\\A350_SFCC_SW\\UNIT_TEST\\TMP_N3\\"
FD 1470815073
TC AP BS BT BI BL CO CC
CE 0 "AOM_CounterUpdate" "TxFailure" 233 233
CE 2 "AOM_CounterUpdate" "*TxFailureCtr < (255)" 236 236
BL 0 simple "AOM_CounterUpdate" /then/then 237 240
BL 1 implicit "AOM_CounterUpdate" /then/else 236 240
BL 2 simple "AOM_CounterUpdate" /then 234 241
BL 3 simple "AOM_CounterUpdate" /else 244 247
CE 4 "AOM_CounterUpdate" "DiscrFailure" 250 250
CE 6 "AOM_CounterUpdate" "*DiscrFailureCtr < (255)" 253 253
BL 4 simple "AOM_CounterUpdate" /then/then 254 257
BL 5 implicit "AOM_CounterUpdate" /then/else 253 257
BL 6 simple "AOM_CounterUpdate" /then 251 258
BL 7 simple "AOM_CounterUpdate" /else 261 264
BL 8 simple "AOM_CounterUpdate" / 231 265
AP 0 "AOM_Init_Monitoring" "DMA_Get" 382 382
AP 1 "AOM_Init_Monitoring" "DMA_Get" 383 383
CE 8 "AOM_Init_Monitoring" "ACA429Fail == 0" 386 386
AP 2 "AOM_Init_Monitoring" "DMA_Set" 388 388
AP 3 "AOM_Init_Monitoring" "DOR_Put_Output" 389 389
BL 9 simple "AOM_Init_Monitoring" /then 387 390
AP 4 "AOM_Init_Monitoring" "DMA_Set" 393 393
AP 5 "AOM_Init_Monitoring" "DOR_Put_Output" 394 394
BL 10 simple "AOM_Init_Monitoring" /else 392 395
CE 10 "AOM_Init_Monitoring" "AdiruA429Fail == 0" 396 396
AP 6 "AOM_Init_Monitoring" "DMA_Set" 398 398
AP 7 "AOM_Init_Monitoring" "DOR_Put_Output" 399 399
BL 11 simple "AOM_Init_Monitoring" /then 397 400
AP 8 "AOM_Init_Monitoring" "DMA_Set" 403 403
AP 9 "AOM_Init_Monitoring" "DOR_Put_Output" 404 404
BL 12 simple "AOM_Init_Monitoring" /else 402 405
BL 13 simple "AOM_Init_Monitoring" / 269 406
CE 12 "AOM_Determine_Thresholds" "OpMode == A350_1000" 413 413
BL 14 simple "AOM_Determine_Thresholds" /then 414 445
BL 15 simple "AOM_Determine_Thresholds" /else 447 478
BL 16 simple "AOM_Determine_Thresholds" / 412 479
CE 14 "AOM_Generate_ACout_DepEngData" "ChID == SLAT_TYPE" 494 494
AP 10 "AOM_Generate_ACout_DepEngData" "AGE_Get_AC_L01x_Surface_Bool" 503 503
AP 11 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set" 504 504
AP 12 "AOM_Generate_ACout_DepEngData" "BIT_Assign" 504 504
AP 13 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set" 505 505
AP 14 "AOM_Generate_ACout_DepEngData" "BIT_Assign" 505 505
AP 15 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set" 506 506
AP 16 "AOM_Generate_ACout_DepEngData" "BIT_Assign" 506 506
AP 17 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set" 507 507
AP 18 "AOM_Generate_ACout_DepEngData" "BIT_Assign" 507 507
AP 19 "AOM_Generate_ACout_DepEngData" "DMA_Set" 509 509
AP 20 "AOM_Generate_ACout_DepEngData" "DMA_Set" 514 514
AP 21 "AOM_Generate_ACout_DepEngData" "AGE_Get_AC_L01x_Surface_Num" 517 517
AP 22 "AOM_Generate_ACout_DepEngData" "BIT_Field_Normalised_Signed" 518 519
AP 23 "AOM_Generate_ACout_DepEngData" "DMA_Set" 521 521
BL 17 simple "AOM_Generate_ACout_DepEngData" /then 495 522
AP 24 "AOM_Generate_ACout_DepEngData" "DMA_Set" 547 547
AP 25 "AOM_Generate_ACout_DepEngData" "AGE_Get_AC_L01x_Surface_Bool" 550 550
AP 26 "AOM_Generate_ACout_DepEngData" "BIT_Field_Normalised" 551 552
AP 27 "AOM_Generate_ACout_DepEngData" "DMA_Set" 554 554
AP 28 "AOM_Generate_ACout_DepEngData" "AGE_Get_AC_L215_Flap_Status_Discr_2" 557 557
AP 29 "AOM_Generate_ACout_DepEngData" "BIT_Field_Normalised" 558 559
AP 30 "AOM_Generate_ACout_DepEngData" "DMA_Set" 561 561
AP 31 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set" 563 563
CE 16 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set (A429_OutMon_Ded_ ..." 563 563
AP 32 "AOM_Generate_ACout_DepEngData" "AGE_Get_AC_L01x_Surface_Num" 566 566
AP 33 "AOM_Generate_ACout_DepEngData" "BIT_Field_Normalised_Signed" 567 568
BL 18 simple "AOM_Generate_ACout_DepEngData" /else/then 564 569
AP 34 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set" 570 570
CE 18 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set (A429_OutMon_Ded_ ..." 570 570
AP 35 "AOM_Generate_ACout_DepEngData" "AGE_Get_AC_L015_Flap_LHOB_Surface_Num" 573 573
AP 36 "AOM_Generate_ACout_DepEngData" "BIT_Field_Normalised_Signed" 574 575
BL 19 simple "AOM_Generate_ACout_DepEngData" /else/else/then 571 576
AP 37 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set" 577 577
CE 20 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set (A429_OutMon_Ded_ ..." 577 577
AP 38 "AOM_Generate_ACout_DepEngData" "AGE_Get_AC_L017_Flap_RHOB_Surface_Num" 580 580
AP 39 "AOM_Generate_ACout_DepEngData" "BIT_Field_Normalised_Signed" 581 582
BL 20 simple "AOM_Generate_ACout_DepEngData" /else/else/else/then 578 583
AP 40 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set" 584 584
CE 22 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set (A429_OutMon_Ded_ ..." 584 584
AP 41 "AOM_Generate_ACout_DepEngData" "AGE_Get_AC_L021_Flap_Comm_Surface_Num" 587 587
AP 42 "AOM_Generate_ACout_DepEngData" "BIT_Field_Normalised_Signed" 588 589
BL 21 simple "AOM_Generate_ACout_DepEngData" /else/else/else/else/then 585 590
AP 43 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set" 591 591
CE 24 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set (A429_OutMon_Ded_ ..." 591 591
AP 44 "AOM_Generate_ACout_DepEngData" "AGE_Get_AC_L023_Flap_Comm_LHOB_Surface_Num" 594 594
AP 45 "AOM_Generate_ACout_DepEngData" "BIT_Field_Normalised_Signed" 595 596
BL 22 simple "AOM_Generate_ACout_DepEngData" /else/else/else/else/else/then 592 597
AP 46 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set" 598 598
CE 26 "AOM_Generate_ACout_DepEngData" "BIT_Is_Set (A429_OutMon_Ded_ ..." 598 598
AP 47 "AOM_Generate_ACout_DepEngData" "AGE_Get_AC_L025_Flap_Comm_RHOB_Surface_Num" 601 601
AP 48 "AOM_Generate_ACout_DepEngData" "BIT_Field_Normalised_Signed" 602 603
BL 23 simple "AOM_Generate_ACout_DepEngData" /else/else/else/else/else/else/then 599 604
BL 24 implicit "AOM_Generate_ACout_DepEngData" /else/else/else/else/else/else/else 598 604
BL 25 simple "AOM_Generate_ACout_DepEngData" /else/else/else/else/else/else 598 604
BL 26 simple "AOM_Generate_ACout_DepEngData" /else/else/else/else/else 591 604
BL 27 simple "AOM_Generate_ACout_DepEngData" /else/else/else/else 584 604
BL 28 simple "AOM_Generate_ACout_DepEngData" /else/else/else 577 604
BL 29 simple "AOM_Generate_ACout_DepEngData" /else/else 570 604
AP 49 "AOM_Generate_ACout_DepEngData" "DMA_Set" 605 605
AP 50 "AOM_Generate_ACout_DepEngData" "DMA_Set" 606 606
BL 30 simple "AOM_Generate_ACout_DepEngData" /else 524 607
BL 31 simple "AOM_Generate_ACout_DepEngData" / 486 608
CE 28 "AOM_CalculateSlatInternals" "FppuVal == 1" 619 619
CE 30 "AOM_CalculateSlatInternals" "FppuDiscFail == 0" 620 620
CC 32 2 28 30 3 TTTFFX 1
CE 35 "AOM_CalculateSlatInternals" "AppuLhDfppuLhVal == 1" 621 621
CE 37 "AOM_CalculateSlatInternals" "AppuRhDfppuRhVal == 1" 622 622
CE 39 "AOM_CalculateSlatInternals" "SlatUseFPPU == 0" 623 623
CC 41 3 35 37 39 4 TTTTTFTFXFXX 1
CE 45 "AOM_CalculateSlatInternals" "SlatUseFPPU" 624 624
CE 47 "AOM_CalculateSlatInternals" "SlatUseAPPU" 624 624
CC 49 2 45 47 3 TXFTFF 2
CE 52 "AOM_CalculateSlatInternals" "SlatUseFPPU == 1" 630 630
CE 54 "AOM_CalculateSlatInternals" "SlatFPPU <= 1308L" 631 631
CE 56 "AOM_CalculateSlatInternals" "SlatUseAPPU == 1" 632 632
CE 58 "AOM_CalculateSlatInternals" "APPUMid <= 1308L" 633 633
CC 60 4 52 54 56 58 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 67 "AOM_CalculateSlatInternals" "SlatUseFPPU == 1" 635 635
CE 69 "AOM_CalculateSlatInternals" "SlatFPPU >= 15816L" 636 636
CE 71 "AOM_CalculateSlatInternals" "SlatUseAPPU == 1" 637 637
CE 73 "AOM_CalculateSlatInternals" "APPUMid >= 15816L" 638 638
CC 75 4 67 69 71 73 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 82 "AOM_CalculateSlatInternals" "SlatUseFPPU == 1" 640 640
CE 84 "AOM_CalculateSlatInternals" "SlatFPPU >= 21273L" 641 641
CE 86 "AOM_CalculateSlatInternals" "SlatUseAPPU == 1" 642 642
CE 88 "AOM_CalculateSlatInternals" "APPUMid >= 21273L" 643 643
CC 90 4 82 84 86 88 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 97 "AOM_CalculateSlatInternals" "SlatUseFPPU == 1" 646 646
BL 32 simple "AOM_CalculateSlatInternals" /then 647 650
BL 33 implicit "AOM_CalculateSlatInternals" /else 646 650
CE 99 "AOM_CalculateSlatInternals" "SlatUseAPPU == 1" 651 651
BL 34 simple "AOM_CalculateSlatInternals" /then 652 655
BL 35 implicit "AOM_CalculateSlatInternals" /else 651 655
AP 51 "AOM_CalculateSlatInternals" "DMA_Set" 657 657
AP 52 "AOM_CalculateSlatInternals" "DMA_Set" 658 658
AP 53 "AOM_CalculateSlatInternals" "DMA_Set" 659 659
AP 54 "AOM_CalculateSlatInternals" "DMA_Set" 660 660
AP 55 "AOM_CalculateSlatInternals" "DMA_Set" 661 661
BL 36 simple "AOM_CalculateSlatInternals" / 612 671
AP 56 "AOM_Get_Slat_Inputs" "DPX_Get_FPPUVal" 680 680
AP 57 "AOM_Get_Slat_Inputs" "DPX_Get_AppuLhVal" 681 681
AP 58 "AOM_Get_Slat_Inputs" "DPX_Get_AppuRhVal" 682 682
AP 59 "AOM_Get_Slat_Inputs" "DMA_Get" 683 683
BL 37 simple "AOM_Get_Slat_Inputs" / 675 684
CE 101 "AOM_CalculateFlapIBInternals" "FppuVal == 1" 696 696
CE 103 "AOM_CalculateFlapIBInternals" "FppuDiscFail == 0" 697 697
CE 105 "AOM_CalculateFlapIBInternals" "FlapSystemAsymmetry == 0" 698 698
CE 107 "AOM_CalculateFlapIBInternals" "RL111_XCC_FlapSystemAsymmetr ..." 699 699
CE 109 "AOM_CalculateFlapIBInternals" "XCCL111Val == 1" 700 700
CC 111 5 101 103 105 107 109 6 TTTXXTTFTTTTFTFTTFFXTFXXXFXXXX 2
CE 117 "AOM_CalculateFlapIBInternals" "S2ppuLhVal == 1" 703 703
CE 119 "AOM_CalculateFlapIBInternals" "S2ppuRhVal == 1" 704 704
CE 121 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 0" 705 705
CC 123 3 117 119 121 4 TTTTTFTFXFXX 1
CE 127 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU" 706 706
CE 129 "AOM_CalculateFlapIBInternals" "FlapIBUseSPPU" 706 706
CC 131 2 127 129 3 TXFTFF 2
CE 134 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 712 712
CE 136 "AOM_CalculateFlapIBInternals" "FlapFPPU <= AOM_IB_FPPU_RETRACT" 713 713
CE 138 "AOM_CalculateFlapIBInternals" "FlapIBUseSPPU == 1" 714 714
CE 140 "AOM_CalculateFlapIBInternals" "S2PPUMid <= AOM_IB_SPPU_RETRACT" 715 715
CC 142 4 134 136 138 140 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 149 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 717 717
CE 151 "AOM_CalculateFlapIBInternals" "FlapFPPU >= AOM_IB_FPPU_C1F_DFS" 718 718
CE 153 "AOM_CalculateFlapIBInternals" "FlapIBUseSPPU == 1" 719 719
CE 155 "AOM_CalculateFlapIBInternals" "S2PPUMid >= AOM_IB_SPPU_C1F_DFS" 720 720
CC 157 4 149 151 153 155 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 164 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 722 722
CE 166 "AOM_CalculateFlapIBInternals" "FlapFPPU >= AOM_IB_FPPU_C1F_ALT" 723 723
CE 168 "AOM_CalculateFlapIBInternals" "FlapIBUseSPPU == 1" 724 724
CE 170 "AOM_CalculateFlapIBInternals" "S2PPUMid >= AOM_IB_SPPU_C1F_ALT" 725 725
CC 172 4 164 166 168 170 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 179 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 727 727
CE 181 "AOM_CalculateFlapIBInternals" "FlapFPPU >= AOM_IB_FPPU_C2" 728 728
CE 183 "AOM_CalculateFlapIBInternals" "FlapIBUseSPPU == 1" 729 729
CE 185 "AOM_CalculateFlapIBInternals" "S2PPUMid >= AOM_IB_SPPU_C2" 730 730
CC 187 4 179 181 183 185 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 194 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 732 732
CE 196 "AOM_CalculateFlapIBInternals" "FlapFPPU >= AOM_IB_FPPU_C3" 733 733
CE 198 "AOM_CalculateFlapIBInternals" "FlapIBUseSPPU == 1" 734 734
CE 200 "AOM_CalculateFlapIBInternals" "S2PPUMid >= AOM_IB_SPPU_C3" 735 735
CC 202 4 194 196 198 200 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 209 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 737 737
CE 211 "AOM_CalculateFlapIBInternals" "FlapFPPU >= AOM_IB_FPPU_CFULL" 738 738
CE 213 "AOM_CalculateFlapIBInternals" "FlapIBUseSPPU == 1" 739 739
CE 215 "AOM_CalculateFlapIBInternals" "S2PPUMid >= AOM_IB_SPPU_CFULL" 740 740
CC 217 4 209 211 213 215 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 224 "AOM_CalculateFlapIBInternals" "OpMode == A350_1000" 742 742
CE 226 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 745 745
CE 228 "AOM_CalculateFlapIBInternals" "FlapFPPU < 5917L" 746 746
CC 230 2 226 228 3 TTTFFX 1
BL 38 simple "AOM_CalculateFlapIBInternals" /then/then 747 750
CE 233 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 751 751
CE 235 "AOM_CalculateFlapIBInternals" "FlapFPPU < 12744L" 752 752
CC 237 2 233 235 3 TTTFFX 1
BL 39 simple "AOM_CalculateFlapIBInternals" /then/else/then 753 756
CE 240 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 757 757
CE 242 "AOM_CalculateFlapIBInternals" "FlapFPPU < 20025L" 758 758
CC 244 2 240 242 3 TTTFFX 1
BL 40 simple "AOM_CalculateFlapIBInternals" /then/else/else/then 759 762
CE 247 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 763 763
CE 249 "AOM_CalculateFlapIBInternals" "FlapFPPU < 25487L" 764 764
CC 251 2 247 249 3 TTTFFX 1
BL 41 simple "AOM_CalculateFlapIBInternals" /then/else/else/else/then 765 768
CE 254 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 769 769
BL 42 simple "AOM_CalculateFlapIBInternals" /then/else/else/else/else/then 770 773
CE 256 "AOM_CalculateFlapIBInternals" "FlapIBUseSPPU == 1" 776 776
BL 43 simple "AOM_CalculateFlapIBInternals" /then/else/else/else/else/else/then 777 780
BL 44 implicit "AOM_CalculateFlapIBInternals" /then/else/else/else/else/else/else 776 780
BL 45 simple "AOM_CalculateFlapIBInternals" /then/else/else/else/else/else 775 781
BL 46 simple "AOM_CalculateFlapIBInternals" /then/else/else/else/else 769 781
BL 47 simple "AOM_CalculateFlapIBInternals" /then/else/else/else 763 781
BL 48 simple "AOM_CalculateFlapIBInternals" /then/else/else 757 781
BL 49 simple "AOM_CalculateFlapIBInternals" /then/else 751 781
CE 258 "AOM_CalculateFlapIBInternals" "Ctp < 5917L" 784 784
BL 50 simple "AOM_CalculateFlapIBInternals" /then/then 785 788
CE 260 "AOM_CalculateFlapIBInternals" "Ctp < 12744L" 789 789
BL 51 simple "AOM_CalculateFlapIBInternals" /then/else/then 790 793
CE 262 "AOM_CalculateFlapIBInternals" "Ctp < 20025L" 794 794
BL 52 simple "AOM_CalculateFlapIBInternals" /then/else/else/then 795 798
CE 264 "AOM_CalculateFlapIBInternals" "Ctp < 25487L" 799 799
BL 53 simple "AOM_CalculateFlapIBInternals" /then/else/else/else/then 800 803
BL 54 simple "AOM_CalculateFlapIBInternals" /then/else/else/else/else 805 808
BL 55 simple "AOM_CalculateFlapIBInternals" /then/else/else/else 799 808
BL 56 simple "AOM_CalculateFlapIBInternals" /then/else/else 794 808
BL 57 simple "AOM_CalculateFlapIBInternals" /then/else 789 808
BL 58 simple "AOM_CalculateFlapIBInternals" /then 743 809
CE 266 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 813 813
CE 268 "AOM_CalculateFlapIBInternals" "FlapFPPU < 6372L" 814 814
CC 270 2 266 268 3 TTTFFX 1
BL 59 simple "AOM_CalculateFlapIBInternals" /else/then 815 818
CE 273 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 819 819
CE 275 "AOM_CalculateFlapIBInternals" "FlapFPPU < 21846L" 820 820
CC 277 2 273 275 3 TTTFFX 1
BL 60 simple "AOM_CalculateFlapIBInternals" /else/else/then 821 824
CE 280 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 825 825
CE 282 "AOM_CalculateFlapIBInternals" "FlapFPPU < 27307L" 826 826
CC 284 2 280 282 3 TTTFFX 1
BL 61 simple "AOM_CalculateFlapIBInternals" /else/else/else/then 827 830
CE 287 "AOM_CalculateFlapIBInternals" "FlapIBUseFPPU == 1" 831 831
BL 62 simple "AOM_CalculateFlapIBInternals" /else/else/else/else/then 832 835
CE 289 "AOM_CalculateFlapIBInternals" "FlapIBUseSPPU == 1" 838 838
BL 63 simple "AOM_CalculateFlapIBInternals" /else/else/else/else/else/then 839 842
BL 64 implicit "AOM_CalculateFlapIBInternals" /else/else/else/else/else/else 838 842
BL 65 simple "AOM_CalculateFlapIBInternals" /else/else/else/else/else 837 843
BL 66 simple "AOM_CalculateFlapIBInternals" /else/else/else/else 831 843
BL 67 simple "AOM_CalculateFlapIBInternals" /else/else/else 825 843
BL 68 simple "AOM_CalculateFlapIBInternals" /else/else 819 843
CE 291 "AOM_CalculateFlapIBInternals" "Ctp < 6372L" 846 846
BL 69 simple "AOM_CalculateFlapIBInternals" /else/then 847 850
CE 293 "AOM_CalculateFlapIBInternals" "Ctp < 21846L" 851 851
BL 70 simple "AOM_CalculateFlapIBInternals" /else/else/then 852 855
CE 295 "AOM_CalculateFlapIBInternals" "Ctp < 27307L" 856 856
BL 71 simple "AOM_CalculateFlapIBInternals" /else/else/else/then 857 860
BL 72 simple "AOM_CalculateFlapIBInternals" /else/else/else/else 862 865
BL 73 simple "AOM_CalculateFlapIBInternals" /else/else/else 856 865
BL 74 simple "AOM_CalculateFlapIBInternals" /else/else 851 865
BL 75 simple "AOM_CalculateFlapIBInternals" /else 811 866
AP 60 "AOM_CalculateFlapIBInternals" "LIB_Limit" 869 869
AP 61 "AOM_CalculateFlapIBInternals" "LIB_Limit" 870 870
AP 62 "AOM_CalculateFlapIBInternals" "DMA_Set" 872 872
AP 63 "AOM_CalculateFlapIBInternals" "DMA_Set" 873 873
AP 64 "AOM_CalculateFlapIBInternals" "DMA_Set" 874 874
AP 65 "AOM_CalculateFlapIBInternals" "DMA_Set" 875 875
AP 66 "AOM_CalculateFlapIBInternals" "DMA_Set" 876 876
AP 67 "AOM_CalculateFlapIBInternals" "DMA_Set" 877 877
AP 68 "AOM_CalculateFlapIBInternals" "DMA_Set" 878 878
AP 69 "AOM_CalculateFlapIBInternals" "DMA_Set" 879 879
AP 70 "AOM_CalculateFlapIBInternals" "DMA_Set" 880 880
BL 76 simple "AOM_CalculateFlapIBInternals" / 689 881
CE 297 "AOM_CalculateFlapOBInternals" "FppuVal == 1" 899 899
CE 299 "AOM_CalculateFlapOBInternals" "FppuDiscFail == 0" 900 900
CE 301 "AOM_CalculateFlapOBInternals" "FlapSystemAsymmetry == 0" 901 901
CE 303 "AOM_CalculateFlapOBInternals" "RL111_XCC_FlapSystemAsymmetr ..." 902 902
CE 305 "AOM_CalculateFlapOBInternals" "XCCL111Val == 1" 903 903
CC 307 5 297 299 301 303 305 6 TTTXXTTFTTTTFTFTTFFXTFXXXFXXXX 2
CE 313 "AOM_CalculateFlapOBInternals" "AppuLhDfppuLhVal == 1" 908 908
BL 77 simple "AOM_CalculateFlapOBInternals" /then/then 909 911
BL 78 implicit "AOM_CalculateFlapOBInternals" /then/else 908 911
CE 315 "AOM_CalculateFlapOBInternals" "AppuRhDfppuRhVal == 1" 912 912
BL 79 simple "AOM_CalculateFlapOBInternals" /then/then 913 915
BL 80 implicit "AOM_CalculateFlapOBInternals" /then/else 912 915
BL 81 simple "AOM_CalculateFlapOBInternals" /then 907 916
BL 82 implicit "AOM_CalculateFlapOBInternals" /else 899 916
CE 317 "AOM_CalculateFlapOBInternals" "FlapLHUseFPPU == 1" 918 918
CE 319 "AOM_CalculateFlapOBInternals" "S4ppuLhVal == 1" 919 919
CC 321 2 317 319 3 TXFTFF 2
CE 324 "AOM_CalculateFlapOBInternals" "FlapRHUseFPPU == 1" 920 920
CE 326 "AOM_CalculateFlapOBInternals" "S4ppuRhVal == 1" 921 921
CC 328 2 324 326 3 TXFTFF 2
CE 331 "AOM_CalculateFlapOBInternals" "FlapLHUseFPPU" 922 922
CE 333 "AOM_CalculateFlapOBInternals" "FlapRHUseFPPU" 922 922
CC 335 2 331 333 3 TTTFFX 1
CE 338 "AOM_CalculateFlapOBInternals" "S4ppuLhVal == 1" 923 923
CE 340 "AOM_CalculateFlapOBInternals" "S4ppuRhVal == 1" 924 924
CE 342 "AOM_CalculateFlapOBInternals" "FlapOBUseFPPU == 0" 925 925
CC 344 3 338 340 342 4 TTTTTFTFXFXX 1
CE 348 "AOM_CalculateFlapOBInternals" "FlapOBUseFPPU" 926 926
CE 350 "AOM_CalculateFlapOBInternals" "FlapOBUseSPPU" 926 926
CC 352 2 348 350 3 TXFTFF 2
CE 355 "AOM_CalculateFlapOBInternals" "FlapOBUseFPPU == 1" 935 935
CE 357 "AOM_CalculateFlapOBInternals" "ActPosMid <= AOM_OB_FPPU_RETRACT" 936 936
CE 359 "AOM_CalculateFlapOBInternals" "FlapOBUseSPPU == 1" 937 937
CE 361 "AOM_CalculateFlapOBInternals" "S4PPUMid <= AOM_OB_SPPU_RETRACT" 938 938
CC 363 4 355 357 359 361 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 370 "AOM_CalculateFlapOBInternals" "FlapOBUseFPPU == 1" 940 940
CE 372 "AOM_CalculateFlapOBInternals" "ActPosMid >= AOM_OB_FPPU_C1F_ALT" 941 941
CE 374 "AOM_CalculateFlapOBInternals" "FlapOBUseSPPU == 1" 942 942
CE 376 "AOM_CalculateFlapOBInternals" "S4PPUMid >= AOM_OB_SPPU_C1F_ALT" 943 943
CC 378 4 370 372 374 376 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 385 "AOM_CalculateFlapOBInternals" "FlapOBUseFPPU == 1" 945 945
CE 387 "AOM_CalculateFlapOBInternals" "ActPosMid >= AOM_OB_FPPU_C1F_DFS" 946 946
CE 389 "AOM_CalculateFlapOBInternals" "FlapOBUseSPPU == 1" 947 947
CE 391 "AOM_CalculateFlapOBInternals" "S4PPUMid >= AOM_OB_SPPU_C1F_DFS" 948 948
CC 393 4 385 387 389 391 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 400 "AOM_CalculateFlapOBInternals" "FlapOBUseFPPU == 1" 950 950
CE 402 "AOM_CalculateFlapOBInternals" "ActPosMid >= AOM_OB_FPPU_C2" 951 951
CE 404 "AOM_CalculateFlapOBInternals" "FlapOBUseSPPU == 1" 952 952
CE 406 "AOM_CalculateFlapOBInternals" "S4PPUMid >= AOM_OB_SPPU_C2" 953 953
CC 408 4 400 402 404 406 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 415 "AOM_CalculateFlapOBInternals" "FlapOBUseFPPU == 1" 955 955
CE 417 "AOM_CalculateFlapOBInternals" "ActPosMid >= AOM_OB_FPPU_C3" 956 956
CE 419 "AOM_CalculateFlapOBInternals" "FlapOBUseSPPU == 1" 957 957
CE 421 "AOM_CalculateFlapOBInternals" "S4PPUMid >= AOM_OB_SPPU_C3" 958 958
CC 423 4 415 417 419 421 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 430 "AOM_CalculateFlapOBInternals" "FlapOBUseFPPU == 1" 960 960
CE 432 "AOM_CalculateFlapOBInternals" "ActPosMid >= AOM_OB_FPPU_CFULL" 961 961
CE 434 "AOM_CalculateFlapOBInternals" "FlapOBUseSPPU == 1" 962 962
CE 436 "AOM_CalculateFlapOBInternals" "S4PPUMid >= AOM_OB_SPPU_CFULL" 963 963
CC 438 4 430 432 434 436 7 TTXXTFTTFXTTTFTFTFFXFXTFFXFX 3
CE 445 "AOM_CalculateFlapOBInternals" "OpMode == A350_1000" 965 965
CE 447 "AOM_CalculateFlapOBInternals" "FlapLHUseFPPU == 1" 968 968
CE 449 "AOM_CalculateFlapOBInternals" "ActPosLH < 4552L" 969 969
CC 451 2 447 449 3 TTTFFX 1
BL 83 simple "AOM_CalculateFlapOBInternals" /then/then 970 973
CE 454 "AOM_CalculateFlapOBInternals" "FlapLHUseFPPU == 1" 974 974
CE 456 "AOM_CalculateFlapOBInternals" "ActPosLH < 10923L" 975 975
CC 458 2 454 456 3 TTTFFX 1
BL 84 simple "AOM_CalculateFlapOBInternals" /then/else/then 976 979
CE 461 "AOM_CalculateFlapOBInternals" "FlapLHUseFPPU == 1" 980 980
CE 463 "AOM_CalculateFlapOBInternals" "ActPosLH < 21846L" 981 981
CC 465 2 461 463 3 TTTFFX 1
BL 85 simple "AOM_CalculateFlapOBInternals" /then/else/else/then 982 985
CE 468 "AOM_CalculateFlapOBInternals" "FlapLHUseFPPU == 1" 986 986
CE 470 "AOM_CalculateFlapOBInternals" "ActPosLH < 26397L" 987 987
CC 472 2 468 470 3 TTTFFX 1
BL 86 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/then 988 991
CE 475 "AOM_CalculateFlapOBInternals" "FlapLHUseFPPU == 1" 992 992
BL 87 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else/then 993 996
CE 477 "AOM_CalculateFlapOBInternals" "S4ppuLh <= 1820L" 999 999
BL 88 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else/else/then 1000 1003
BL 89 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else/else/else 1005 1008
BL 90 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else/else 998 1009
BL 91 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else 992 1009
BL 92 simple "AOM_CalculateFlapOBInternals" /then/else/else/else 986 1009
BL 93 simple "AOM_CalculateFlapOBInternals" /then/else/else 980 1009
BL 94 simple "AOM_CalculateFlapOBInternals" /then/else 974 1009
CE 479 "AOM_CalculateFlapOBInternals" "FlapRHUseFPPU == 1" 1012 1012
CE 481 "AOM_CalculateFlapOBInternals" "ActPosRH < 4552L" 1013 1013
CC 483 2 479 481 3 TTTFFX 1
BL 95 simple "AOM_CalculateFlapOBInternals" /then/then 1014 1017
CE 486 "AOM_CalculateFlapOBInternals" "FlapRHUseFPPU == 1" 1018 1018
CE 488 "AOM_CalculateFlapOBInternals" "ActPosRH < 10923L" 1019 1019
CC 490 2 486 488 3 TTTFFX 1
BL 96 simple "AOM_CalculateFlapOBInternals" /then/else/then 1020 1023
CE 493 "AOM_CalculateFlapOBInternals" "FlapRHUseFPPU == 1" 1024 1024
CE 495 "AOM_CalculateFlapOBInternals" "ActPosRH < 21846L" 1025 1025
CC 497 2 493 495 3 TTTFFX 1
BL 97 simple "AOM_CalculateFlapOBInternals" /then/else/else/then 1026 1029
CE 500 "AOM_CalculateFlapOBInternals" "FlapRHUseFPPU == 1" 1030 1030
CE 502 "AOM_CalculateFlapOBInternals" "ActPosRH < 26397L" 1031 1031
CC 504 2 500 502 3 TTTFFX 1
BL 98 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/then 1032 1035
CE 507 "AOM_CalculateFlapOBInternals" "FlapRHUseFPPU == 1" 1036 1036
BL 99 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else/then 1037 1040
CE 509 "AOM_CalculateFlapOBInternals" "S4ppuRh <= 1820L" 1043 1043
BL 100 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else/else/then 1044 1047
BL 101 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else/else/else 1049 1052
BL 102 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else/else 1042 1053
BL 103 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else 1036 1053
BL 104 simple "AOM_CalculateFlapOBInternals" /then/else/else/else 1030 1053
BL 105 simple "AOM_CalculateFlapOBInternals" /then/else/else 1024 1053
BL 106 simple "AOM_CalculateFlapOBInternals" /then/else 1018 1053
CE 511 "AOM_CalculateFlapOBInternals" "CtpLhOb < 4552L" 1056 1056
BL 107 simple "AOM_CalculateFlapOBInternals" /then/then 1057 1060
CE 513 "AOM_CalculateFlapOBInternals" "CtpLhOb < 10923L" 1061 1061
BL 108 simple "AOM_CalculateFlapOBInternals" /then/else/then 1062 1065
CE 515 "AOM_CalculateFlapOBInternals" "CtpLhOb < 21846L" 1066 1066
BL 109 simple "AOM_CalculateFlapOBInternals" /then/else/else/then 1067 1070
CE 517 "AOM_CalculateFlapOBInternals" "CtpLhOb < 26397L" 1071 1071
BL 110 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/then 1072 1075
BL 111 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else 1077 1080
BL 112 simple "AOM_CalculateFlapOBInternals" /then/else/else/else 1071 1080
BL 113 simple "AOM_CalculateFlapOBInternals" /then/else/else 1066 1080
BL 114 simple "AOM_CalculateFlapOBInternals" /then/else 1061 1080
CE 519 "AOM_CalculateFlapOBInternals" "CtpRhOb < 4552L" 1083 1083
BL 115 simple "AOM_CalculateFlapOBInternals" /then/then 1084 1087
CE 521 "AOM_CalculateFlapOBInternals" "CtpRhOb < 10923L" 1088 1088
BL 116 simple "AOM_CalculateFlapOBInternals" /then/else/then 1089 1092
CE 523 "AOM_CalculateFlapOBInternals" "CtpRhOb < 21846L" 1093 1093
BL 117 simple "AOM_CalculateFlapOBInternals" /then/else/else/then 1094 1097
CE 525 "AOM_CalculateFlapOBInternals" "CtpRhOb < 26397L" 1098 1098
BL 118 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/then 1099 1102
BL 119 simple "AOM_CalculateFlapOBInternals" /then/else/else/else/else 1104 1107
BL 120 simple "AOM_CalculateFlapOBInternals" /then/else/else/else 1098 1107
BL 121 simple "AOM_CalculateFlapOBInternals" /then/else/else 1093 1107
BL 122 simple "AOM_CalculateFlapOBInternals" /then/else 1088 1107
BL 123 simple "AOM_CalculateFlapOBInternals" /then 966 1108
CE 527 "AOM_CalculateFlapOBInternals" "FlapLHUseFPPU == 1" 1112 1112
CE 529 "AOM_CalculateFlapOBInternals" "ActPosLH < 6372L" 1113 1113
CC 531 2 527 529 3 TTTFFX 1
BL 124 simple "AOM_CalculateFlapOBInternals" /else/then 1114 1117
CE 534 "AOM_CalculateFlapOBInternals" "FlapLHUseFPPU == 1" 1118 1118
CE 536 "AOM_CalculateFlapOBInternals" "ActPosLH < 21846L" 1119 1119
CC 538 2 534 536 3 TTTFFX 1
BL 125 simple "AOM_CalculateFlapOBInternals" /else/else/then 1120 1123
CE 541 "AOM_CalculateFlapOBInternals" "FlapLHUseFPPU == 1" 1124 1124
CE 543 "AOM_CalculateFlapOBInternals" "ActPosLH < 27307L" 1125 1125
CC 545 2 541 543 3 TTTFFX 1
BL 126 simple "AOM_CalculateFlapOBInternals" /else/else/else/then 1126 1129
CE 548 "AOM_CalculateFlapOBInternals" "FlapLHUseFPPU == 1" 1130 1130
BL 127 simple "AOM_CalculateFlapOBInternals" /else/else/else/else/then 1131 1134
CE 550 "AOM_CalculateFlapOBInternals" "S4ppuLh <= 1820L" 1137 1137
BL 128 simple "AOM_CalculateFlapOBInternals" /else/else/else/else/else/then 1138 1141
BL 129 simple "AOM_CalculateFlapOBInternals" /else/else/else/else/else/else 1143 1146
BL 130 simple "AOM_CalculateFlapOBInternals" /else/else/else/else/else 1136 1147
BL 131 simple "AOM_CalculateFlapOBInternals" /else/else/else/else 1130 1147
BL 132 simple "AOM_CalculateFlapOBInternals" /else/else/else 1124 1147
BL 133 simple "AOM_CalculateFlapOBInternals" /else/else 1118 1147
CE 552 "AOM_CalculateFlapOBInternals" "FlapRHUseFPPU == 1" 1150 1150
CE 554 "AOM_CalculateFlapOBInternals" "ActPosRH < 6372L" 1151 1151
CC 556 2 552 554 3 TTTFFX 1
BL 134 simple "AOM_CalculateFlapOBInternals" /else/then 1152 1155
CE 559 "AOM_CalculateFlapOBInternals" "FlapRHUseFPPU == 1" 1156 1156
CE 561 "AOM_CalculateFlapOBInternals" "ActPosRH < 21846L" 1157 1157
CC 563 2 559 561 3 TTTFFX 1
BL 135 simple "AOM_CalculateFlapOBInternals" /else/else/then 1158 1161
CE 566 "AOM_CalculateFlapOBInternals" "FlapRHUseFPPU == 1" 1162 1162
CE 568 "AOM_CalculateFlapOBInternals" "ActPosRH < 27307L" 1163 1163
CC 570 2 566 568 3 TTTFFX 1
BL 136 simple "AOM_CalculateFlapOBInternals" /else/else/else/then 1164 1167
CE 573 "AOM_CalculateFlapOBInternals" "FlapRHUseFPPU == 1" 1168 1168
BL 137 simple "AOM_CalculateFlapOBInternals" /else/else/else/else/then 1169 1172
CE 575 "AOM_CalculateFlapOBInternals" "S4ppuRh <= 1820L" 1175 1175
BL 138 simple "AOM_CalculateFlapOBInternals" /else/else/else/else/else/then 1176 1179
BL 139 simple "AOM_CalculateFlapOBInternals" /else/else/else/else/else/else 1181 1184
BL 140 simple "AOM_CalculateFlapOBInternals" /else/else/else/else/else 1174 1185
BL 141 simple "AOM_CalculateFlapOBInternals" /else/else/else/else 1168 1185
BL 142 simple "AOM_CalculateFlapOBInternals" /else/else/else 1162 1185
BL 143 simple "AOM_CalculateFlapOBInternals" /else/else 1156 1185
CE 577 "AOM_CalculateFlapOBInternals" "CtpLhOb < 6372L" 1188 1188
BL 144 simple "AOM_CalculateFlapOBInternals" /else/then 1189 1192
CE 579 "AOM_CalculateFlapOBInternals" "CtpLhOb < 21846L" 1193 1193
BL 145 simple "AOM_CalculateFlapOBInternals" /else/else/then 1194 1197
CE 581 "AOM_CalculateFlapOBInternals" "CtpLhOb < 27307L" 1198 1198
BL 146 simple "AOM_CalculateFlapOBInternals" /else/else/else/then 1199 1202
BL 147 simple "AOM_CalculateFlapOBInternals" /else/else/else/else 1204 1207
BL 148 simple "AOM_CalculateFlapOBInternals" /else/else/else 1198 1207
BL 149 simple "AOM_CalculateFlapOBInternals" /else/else 1193 1207
CE 583 "AOM_CalculateFlapOBInternals" "CtpRhOb < 6372L" 1210 1210
BL 150 simple "AOM_CalculateFlapOBInternals" /else/then 1211 1214
CE 585 "AOM_CalculateFlapOBInternals" "CtpRhOb < 21846L" 1215 1215
BL 151 simple "AOM_CalculateFlapOBInternals" /else/else/then 1216 1219
CE 587 "AOM_CalculateFlapOBInternals" "CtpRhOb < 27307L" 1220 1220
BL 152 simple "AOM_CalculateFlapOBInternals" /else/else/else/then 1221 1224
BL 153 simple "AOM_CalculateFlapOBInternals" /else/else/else/else 1226 1229
BL 154 simple "AOM_CalculateFlapOBInternals" /else/else/else 1220 1229
BL 155 simple "AOM_CalculateFlapOBInternals" /else/else 1215 1229
BL 156 simple "AOM_CalculateFlapOBInternals" /else 1110 1230
AP 71 "AOM_CalculateFlapOBInternals" "LIB_Limit" 1233 1233
AP 72 "AOM_CalculateFlapOBInternals" "LIB_Limit" 1234 1234
AP 73 "AOM_CalculateFlapOBInternals" "LIB_Limit" 1235 1235
AP 74 "AOM_CalculateFlapOBInternals" "LIB_Limit" 1236 1236
AP 75 "AOM_CalculateFlapOBInternals" "DMA_Set" 1238 1238
AP 76 "AOM_CalculateFlapOBInternals" "DMA_Set" 1239 1239
AP 77 "AOM_CalculateFlapOBInternals" "DMA_Set" 1240 1240
AP 78 "AOM_CalculateFlapOBInternals" "DMA_Set" 1241 1241
AP 79 "AOM_CalculateFlapOBInternals" "DMA_Set" 1242 1242
AP 80 "AOM_CalculateFlapOBInternals" "DMA_Set" 1243 1243
AP 81 "AOM_CalculateFlapOBInternals" "DMA_Set" 1244 1244
AP 82 "AOM_CalculateFlapOBInternals" "DMA_Set" 1245 1245
AP 83 "AOM_CalculateFlapOBInternals" "DMA_Set" 1246 1246
AP 84 "AOM_CalculateFlapOBInternals" "DMA_Set" 1247 1247
AP 85 "AOM_CalculateFlapOBInternals" "DMA_Set" 1248 1248
AP 86 "AOM_CalculateFlapOBInternals" "DMA_Set" 1249 1249
AP 87 "AOM_CalculateFlapOBInternals" "DMA_Set" 1250 1250
BL 157 simple "AOM_CalculateFlapOBInternals" / 887 1275
AP 88 "AOM_Get_Flap_Inputs" "DPX_Get_FPPUVal" 1290 1290
AP 89 "AOM_Get_Flap_Inputs" "DPX_Get_DfppuLhVal" 1291 1291
AP 90 "AOM_Get_Flap_Inputs" "DPX_Get_DfppuRhVal" 1292 1292
AP 91 "AOM_Get_Flap_Inputs" "DPX_Get_S2ppuLhVal" 1293 1293
AP 92 "AOM_Get_Flap_Inputs" "DPX_Get_S2ppuRhVal" 1294 1294
AP 93 "AOM_Get_Flap_Inputs" "DPX_Get_S4ppuLhVal" 1295 1295
AP 94 "AOM_Get_Flap_Inputs" "DPX_Get_S4ppuRhVal" 1296 1296
AP 95 "AOM_Get_Flap_Inputs" "CTP_Get_CTP" 1297 1297
AP 96 "AOM_Get_Flap_Inputs" "CTP_Get_CTPVal" 1298 1298
AP 97 "AOM_Get_Flap_Inputs" "CTP_Get_CTPLHOB" 1299 1299
AP 98 "AOM_Get_Flap_Inputs" "CTP_Get_CTPRHOB" 1300 1300
AP 99 "AOM_Get_Flap_Inputs" "DMA_Get" 1301 1301
AP 100 "AOM_Get_Flap_Inputs" "DMA_Get" 1302 1302
AP 101 "AOM_Get_Flap_Inputs" "DMA_Get" 1303 1303
AP 102 "AOM_Get_Flap_Inputs" "BIT_Is_Set" 1303 1303
AP 103 "AOM_Get_Flap_Inputs" "DMA_Get" 1304 1304
BL 158 simple "AOM_Get_Flap_Inputs" / 1281 1305
BL 159 simple "AOM_Determine_TxFailure" / 1311 1315
CE 589 "AOM_Determine_DiscFailureDiscretes" "IntSurfAngleVal == 1" 1326 1326
CE 591 "AOM_Determine_DiscFailureDiscretes" "(RxLabel & DiscMask) != IntLabel" 1327 1327
CE 593 "AOM_Determine_DiscFailureDiscretes" "TxFailLabel == 0" 1328 1328
CC 595 3 589 591 593 4 TTTTTFTFXFXX 1
BL 160 simple "AOM_Determine_DiscFailureDiscretes" /then 1329 1331
BL 161 implicit "AOM_Determine_DiscFailureDiscretes" /else 1326 1331
BL 162 simple "AOM_Determine_DiscFailureDiscretes" / 1325 1332
AP 104 "AOM_Determine_DiscFailureSurf" "BIT_Is_Set" 1354 1354
CE 599 "AOM_Determine_DiscFailureSurf" "IsNegativeValue" 1360 1360
BL 163 simple "AOM_Determine_DiscFailureSurf" /then 1361 1363
BL 164 simple "AOM_Determine_DiscFailureSurf" /else 1365 1367
CE 601 "AOM_Determine_DiscFailureSurf" "IntSurfAngleVal == 1" 1372 1372
AP 105 "AOM_Determine_DiscFailureSurf" "LIB_Abs_Int32" 1373 1373
CE 603 "AOM_Determine_DiscFailureSurf" "LIB_Abs_Int32 (RxSurfAngle - ..." 1373 1373
CE 605 "AOM_Determine_DiscFailureSurf" "TxFailLabel == 0" 1374 1374
CC 607 3 601 603 605 4 TTTTTFTFXFXX 1
BL 165 simple "AOM_Determine_DiscFailureSurf" /then 1375 1377
BL 166 implicit "AOM_Determine_DiscFailureSurf" /else 1372 1377
BL 167 simple "AOM_Determine_DiscFailureSurf" / 1343 1378
AP 106 "AOM_OtherACA429_Output_Monitoring" "PUC_Get_Chid" 1392 1392
CE 611 "AOM_OtherACA429_Output_Monitoring" "ChID == SLAT_TYPE" 1396 1396
AP 107 "AOM_OtherACA429_Output_Monitoring" "AOM_CalculateSlatInternals" 1399 1399
AP 108 "AOM_OtherACA429_Output_Monitoring" "AGE_Get_AC_L01x_Surface_Bool" 1404 1404
AP 109 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_TxFailure" 1412 1414
AP 110 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureDiscretes" 1417 1423
CE 613 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1430 1430
CE 615 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1430 1430
CC 617 2 613 615 3 TXFTFF 2
AP 111 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1430 1430
AP 112 "AOM_OtherACA429_Output_Monitoring" "AGE_Get_AC_L01x_Surface_Num" 1436 1436
AP 113 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_TxFailure" 1440 1442
AP 114 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureSurf" 1445 1452
CE 620 "AOM_OtherACA429_Output_Monitoring" "TxFail" 1455 1455
CE 622 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1455 1455
CC 624 2 620 622 3 TXFTFF 2
CE 627 "AOM_OtherACA429_Output_Monitoring" "DiscrFail" 1456 1456
CE 629 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1456 1456
CC 631 2 627 629 3 TXFTFF 2
CE 634 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1459 1459
CE 636 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1459 1459
CC 638 2 634 636 3 TXFTFF 2
AP 115 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1459 1459
BL 168 simple "AOM_OtherACA429_Output_Monitoring" /then 1397 1460
AP 116 "AOM_OtherACA429_Output_Monitoring" "PUC_Get_OpMode" 1463 1463
AP 117 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_Thresholds" 1466 1466
AP 118 "AOM_OtherACA429_Output_Monitoring" "AOM_CalculateFlapIBInternals" 1469 1469
AP 119 "AOM_OtherACA429_Output_Monitoring" "AGE_Get_AC_L01x_Surface_Bool" 1482 1482
AP 120 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_TxFailure" 1486 1488
AP 121 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureDiscretes" 1491 1497
AP 122 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureDiscretes" 1502 1508
AP 123 "AOM_OtherACA429_Output_Monitoring" "AOM_CalculateFlapOBInternals" 1513 1513
AP 124 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureDiscretes" 1524 1530
AP 125 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureDiscretes" 1535 1541
CE 641 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1548 1548
CE 643 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1548 1548
CC 645 2 641 643 3 TXFTFF 2
AP 126 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1548 1548
AP 127 "AOM_OtherACA429_Output_Monitoring" "AGE_Get_AC_L01x_Surface_Num" 1554 1554
AP 128 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_TxFailure" 1558 1560
AP 129 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureSurf" 1563 1570
CE 648 "AOM_OtherACA429_Output_Monitoring" "TxFail" 1573 1573
CE 650 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1573 1573
CC 652 2 648 650 3 TXFTFF 2
CE 655 "AOM_OtherACA429_Output_Monitoring" "DiscrFail" 1574 1574
CE 657 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1574 1574
CC 659 2 655 657 3 TXFTFF 2
CE 662 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1577 1577
CE 664 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1577 1577
CC 666 2 662 664 3 TXFTFF 2
AP 130 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1577 1577
AP 131 "AOM_OtherACA429_Output_Monitoring" "AGE_Get_AC_L015_Flap_LHOB_Surface_Num" 1583 1583
AP 132 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_TxFailure" 1587 1589
AP 133 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureSurf" 1592 1599
CE 669 "AOM_OtherACA429_Output_Monitoring" "TxFail" 1602 1602
CE 671 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1602 1602
CC 673 2 669 671 3 TXFTFF 2
CE 676 "AOM_OtherACA429_Output_Monitoring" "DiscrFail" 1603 1603
CE 678 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1603 1603
CC 680 2 676 678 3 TXFTFF 2
CE 683 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1606 1606
CE 685 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1606 1606
CC 687 2 683 685 3 TXFTFF 2
AP 134 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1606 1606
AP 135 "AOM_OtherACA429_Output_Monitoring" "AGE_Get_AC_L017_Flap_RHOB_Surface_Num" 1612 1612
AP 136 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_TxFailure" 1616 1618
AP 137 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureSurf" 1621 1628
CE 690 "AOM_OtherACA429_Output_Monitoring" "TxFail" 1631 1631
CE 692 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1631 1631
CC 694 2 690 692 3 TXFTFF 2
CE 697 "AOM_OtherACA429_Output_Monitoring" "DiscrFail" 1632 1632
CE 699 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1632 1632
CC 701 2 697 699 3 TXFTFF 2
CE 704 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1635 1635
CE 706 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1635 1635
CC 708 2 704 706 3 TXFTFF 2
AP 138 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1635 1635
AP 139 "AOM_OtherACA429_Output_Monitoring" "AGE_Get_AC_L021_Flap_Comm_Surface_Num" 1641 1641
AP 140 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_TxFailure" 1645 1647
AP 141 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureSurf" 1650 1657
CE 711 "AOM_OtherACA429_Output_Monitoring" "TxFail" 1660 1660
CE 713 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1660 1660
CC 715 2 711 713 3 TXFTFF 2
CE 718 "AOM_OtherACA429_Output_Monitoring" "DiscrFail" 1661 1661
CE 720 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1661 1661
CC 722 2 718 720 3 TXFTFF 2
CE 725 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1664 1664
CE 727 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1664 1664
CC 729 2 725 727 3 TXFTFF 2
AP 142 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1664 1664
AP 143 "AOM_OtherACA429_Output_Monitoring" "AGE_Get_AC_L023_Flap_Comm_LHOB_Surface_Num" 1670 1670
AP 144 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_TxFailure" 1674 1676
AP 145 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureSurf" 1679 1686
CE 732 "AOM_OtherACA429_Output_Monitoring" "TxFail" 1689 1689
CE 734 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1689 1689
CC 736 2 732 734 3 TXFTFF 2
CE 739 "AOM_OtherACA429_Output_Monitoring" "DiscrFail" 1690 1690
CE 741 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1690 1690
CC 743 2 739 741 3 TXFTFF 2
CE 746 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1693 1693
CE 748 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1693 1693
CC 750 2 746 748 3 TXFTFF 2
AP 146 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1693 1693
AP 147 "AOM_OtherACA429_Output_Monitoring" "AGE_Get_AC_L025_Flap_Comm_RHOB_Surface_Num" 1699 1699
AP 148 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_TxFailure" 1703 1705
AP 149 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureSurf" 1708 1715
CE 753 "AOM_OtherACA429_Output_Monitoring" "TxFail" 1718 1718
CE 755 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1718 1718
CC 757 2 753 755 3 TXFTFF 2
CE 760 "AOM_OtherACA429_Output_Monitoring" "DiscrFail" 1719 1719
CE 762 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1719 1719
CC 764 2 760 762 3 TXFTFF 2
CE 767 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1722 1722
CE 769 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1722 1722
CC 771 2 767 769 3 TXFTFF 2
AP 150 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1722 1722
AP 151 "AOM_OtherACA429_Output_Monitoring" "AGE_Get_AC_L215_Flap_Status_Discr_2" 1728 1728
AP 152 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_TxFailure" 1736 1738
AP 153 "AOM_OtherACA429_Output_Monitoring" "AOM_Determine_DiscFailureDiscretes" 1741 1747
CE 774 "AOM_OtherACA429_Output_Monitoring" "TxFail" 1750 1750
CE 776 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1750 1750
CC 778 2 774 776 3 TXFTFF 2
CE 781 "AOM_OtherACA429_Output_Monitoring" "DiscrFail" 1751 1751
CE 783 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1751 1751
CC 785 2 781 783 3 TXFTFF 2
CE 788 "AOM_OtherACA429_Output_Monitoring" "TxFailLabel" 1754 1754
CE 790 "AOM_OtherACA429_Output_Monitoring" "DiscrFailLabel" 1754 1754
CC 792 2 788 790 3 TXFTFF 2
AP 154 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1754 1754
BL 169 simple "AOM_OtherACA429_Output_Monitoring" /else 1462 1755
AP 155 "AOM_OtherACA429_Output_Monitoring" "AOM_CounterUpdate" 1758 1758
CE 795 "AOM_OtherACA429_Output_Monitoring" "AC_TxFailureCtr >= 15" 1761 1761
CE 797 "AOM_OtherACA429_Output_Monitoring" "AC_DiscrFailureCtr >= 3" 1762 1762
CC 799 2 795 797 3 TXFTFF 2
BL 170 simple "AOM_OtherACA429_Output_Monitoring" /then 1763 1765
BL 171 implicit "AOM_OtherACA429_Output_Monitoring" /else 1761 1765
CE 802 "AOM_OtherACA429_Output_Monitoring" "ACA429Fail" 1768 1768
AP 156 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1771 1771
AP 157 "AOM_OtherACA429_Output_Monitoring" "BIT_Assign" 1772 1772
AP 158 "AOM_OtherACA429_Output_Monitoring" "DMA_Set" 1773 1773
AP 159 "AOM_OtherACA429_Output_Monitoring" "AOM_Generate_ACout_DepEngData" 1775 1775
AP 160 "AOM_OtherACA429_Output_Monitoring" "DMA_Set" 1777 1777
AP 161 "AOM_OtherACA429_Output_Monitoring" "DOR_Put_Output" 1778 1778
AP 162 "AOM_OtherACA429_Output_Monitoring" "FSE_Store_Failure_Event_DPRAM" 1780 1780
BL 172 simple "AOM_OtherACA429_Output_Monitoring" /then 1769 1781
BL 173 implicit "AOM_OtherACA429_Output_Monitoring" /else 1768 1781
AP 163 "AOM_OtherACA429_Output_Monitoring" "DMA_Set" 1784 1784
BL 174 simple "AOM_OtherACA429_Output_Monitoring" / 1382 1785
AP 164 "AOM_Generate_ADIRUout_DepEngData" "DMA_Set" 1813 1813
AP 165 "AOM_Generate_ADIRUout_DepEngData" "AGE_Get_AC_ADIRU_L011_Flap_Surface_Bool" 1816 1816
AP 166 "AOM_Generate_ADIRUout_DepEngData" "BIT_Field_Normalised" 1817 1817
AP 167 "AOM_Generate_ADIRUout_DepEngData" "DMA_Set" 1819 1819
BL 175 simple "AOM_Generate_ADIRUout_DepEngData" / 1791 1820
AP 168 "AOM_ADIRUA429_Output_Monitoring" "AGE_Get_AC_ADIRU_L011_Flap_Surface_Bool" 1834 1834
AP 169 "AOM_ADIRUA429_Output_Monitoring" "AOM_Determine_TxFailure" 1837 1839
AP 170 "AOM_ADIRUA429_Output_Monitoring" "AOM_Determine_DiscFailureDiscretes" 1850 1856
AP 171 "AOM_ADIRUA429_Output_Monitoring" "AOM_Determine_DiscFailureDiscretes" 1861 1867
AP 172 "AOM_ADIRUA429_Output_Monitoring" "AOM_Determine_DiscFailureDiscretes" 1880 1886
AP 173 "AOM_ADIRUA429_Output_Monitoring" "AOM_Determine_DiscFailureDiscretes" 1891 1897
AP 174 "AOM_ADIRUA429_Output_Monitoring" "AOM_CounterUpdate" 1900 1900
CE 804 "AOM_ADIRUA429_Output_Monitoring" "ADIRU_TxFailureCtr >= 15" 1903 1903
CE 806 "AOM_ADIRUA429_Output_Monitoring" "ADIRU_DiscrFailureCtr >= 3" 1904 1904
CC 808 2 804 806 3 TXFTFF 2
BL 176 simple "AOM_ADIRUA429_Output_Monitoring" /then 1905 1907
BL 177 implicit "AOM_ADIRUA429_Output_Monitoring" /else 1903 1907
CE 811 "AOM_ADIRUA429_Output_Monitoring" "AdiruA429Fail" 1910 1910
AP 175 "AOM_ADIRUA429_Output_Monitoring" "BIT_Assign" 1913 1913
AP 176 "AOM_ADIRUA429_Output_Monitoring" "BIT_Assign" 1914 1914
AP 177 "AOM_ADIRUA429_Output_Monitoring" "DMA_Set" 1915 1915
AP 178 "AOM_ADIRUA429_Output_Monitoring" "AOM_Generate_ADIRUout_DepEngData" 1916 1916
AP 179 "AOM_ADIRUA429_Output_Monitoring" "DMA_Set" 1919 1919
AP 180 "AOM_ADIRUA429_Output_Monitoring" "DOR_Put_Output" 1920 1920
AP 181 "AOM_ADIRUA429_Output_Monitoring" "FSE_Store_Failure_Event_DPRAM" 1922 1922
BL 178 simple "AOM_ADIRUA429_Output_Monitoring" /then 1911 1923
BL 179 implicit "AOM_ADIRUA429_Output_Monitoring" /else 1910 1923
AP 182 "AOM_ADIRUA429_Output_Monitoring" "DMA_Set" 1926 1926
BL 180 simple "AOM_ADIRUA429_Output_Monitoring" / 1824 1927
CE 813 "AOM_Failure_Reaction_Slat" "ACA429Fail" 1934 1934
AP 183 "AOM_Failure_Reaction_Slat" "DMA_Set" 1937 1937
AP 184 "AOM_Failure_Reaction_Slat" "DMA_Set" 1938 1938
BL 181 simple "AOM_Failure_Reaction_Slat" /then 1935 1939
BL 182 implicit "AOM_Failure_Reaction_Slat" /else 1934 1939
BL 183 simple "AOM_Failure_Reaction_Slat" / 1932 1940
CE 815 "AOM_Failure_Reaction_Flap" "ACA429Fail" 1947 1947
CE 817 "AOM_Failure_Reaction_Flap" "AdiruA429Fail" 1949 1949
CC 819 2 815 817 3 TXFTFF 2
CE 822 "AOM_Failure_Reaction_Flap" "Failure" 1952 1952
AP 185 "AOM_Failure_Reaction_Flap" "DMA_Set" 1955 1955
AP 186 "AOM_Failure_Reaction_Flap" "DMA_Set" 1956 1956
AP 187 "AOM_Failure_Reaction_Flap" "DMA_Set" 1957 1957
AP 188 "AOM_Failure_Reaction_Flap" "DMA_Set" 1958 1958
AP 189 "AOM_Failure_Reaction_Flap" "DMA_Set" 1959 1959
AP 190 "AOM_Failure_Reaction_Flap" "DMA_Set" 1960 1960
BL 184 simple "AOM_Failure_Reaction_Flap" /then 1953 1961
BL 185 implicit "AOM_Failure_Reaction_Flap" /else 1952 1961
BL 186 simple "AOM_Failure_Reaction_Flap" / 1945 1962
DC 1546849677
@RIK
  ENCODING="System"
  TOKEN="CCOV CMCDC"
  SRC="AOM_A429_OUTPUT_MONITORING.C"
  DIR="E:\A350_SFCC_SW\UNIT_TEST\TMP_N3\"
  DATE=1470815073
  CHECKSUM=1546849677
  SUMS
   ("&Functions",
    "-&Exits",
    "Functions and exits"),
   ("&Calls"=10),
   ("Statement &blocks"=20,
    "-&Implicit blocks"=21,
    "Decisions"=20+21,
    "&Loops"=22),
   ("Basic &conditions"=30,
    "&Modified conditions"=31,
    "M&ultiple conditions"=32)
  ERRORS
    32="a source object was not linked with the right runtime object (check instrumentation mode)",
    49="a composition of conditions evaluates in an unexpected result, contact your vendor",
    50="a composition of conditions reached with an unexpected input vector, contact your vendor"
NODE TYPE=FILE NAME="AOM_A429_OUTPUT_MONITORING.C"@@COMMENT@/******************************************************************************/@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/* Copyright by     :   Diehl Aerospace GmbH Ueberlingen                      */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/* File Name        :   AOM_A429_Output_Monitoring.c                          */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/* Author           :   A. Jabs                                               */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/******************************************************************************/@/COMMENT@


@COMMENT@/* IMPORTED MODULES */@/COMMENT@
@COMMENT@#include "AWM_A429_Word_Management.h"@/COMMENT@
@COMMENT@#include "DML_Data_Manager_Config.h"@/COMMENT@
@COMMENT@#include "DMA_Data_Manager.h"@/COMMENT@
@COMMENT@#include "TYP_SFCC_Types.h"@/COMMENT@
@COMMENT@#include "PUC_Power_Up_Coding_Detection.h"@/COMMENT@
@COMMENT@#include "FSE_Failure_Status_Exchange.h"@/COMMENT@
@COMMENT@#include "bit_operations.h"@/COMMENT@
@COMMENT@#include "LIB_Library_Functions.h"@/COMMENT@
@COMMENT@#include "AGE_A429_Group_Management_Extension.h"@/COMMENT@
@COMMENT@#include "DPR_Handler.h"@/COMMENT@
@COMMENT@#include "DPX_DPR_Exchange.h"@/COMMENT@
@COMMENT@#include "ctp_com_target_pos_determine.h"@/COMMENT@
@COMMENT@#include "DOR_Discrete_Out.h"@/COMMENT@

@COMMENT@#include "AOM_A429_Output_Monitoring.h"@/COMMENT@


@COMMENT@/* CONSTANTS */@/COMMENT@
@COMMENT@#define AOM_3CYCLES                            3@/COMMENT@
@COMMENT@#define AOM_15CYCLES                          15@/COMMENT@
@COMMENT@#define AOM_PPU_SURF_ANGLE_NUMERATOR       21973L /* to convert PPU angle resolution to Surface angle resolution */@/COMMENT@
@COMMENT@#define AOM_PPU_SURF_ANGLE_DENOMINATOR     10000L /* to convert PPU angle resolution to Surface angle resolution */@/COMMENT@
@COMMENT@#define AOM_SURF_NUM_FACTOR                   25L /* match resolution of SurfAngle values in A429 labels with internal ones */@/COMMENT@
@COMMENT@#define AOM_SLAT_FPPU_THRESH_RETRACT        1308L@/COMMENT@
@COMMENT@#define AOM_SLAT_FPPU_THRESH_C1TO3         15816L@/COMMENT@
@COMMENT@#define AOM_SLAT_FPPU_THRESH_C3SORFULL     21273L@/COMMENT@
@COMMENT@#define AOM_SLAT_SURFANGLE_NUMERATOR        9568L@/COMMENT@
@COMMENT@#define AOM_SLAT_SURFANGLE_DENOMINATOR    100000L@/COMMENT@
@COMMENT@#define AOM_PPUMID                             2L@/COMMENT@
@COMMENT@#define AOM_20DEG                           1820L@/COMMENT@
@COMMENT@#define AOM_50DEG                           4552L@/COMMENT@
@COMMENT@#define AOM_65DEG                           5917L@/COMMENT@
@COMMENT@#define AOM_70DEG                           6372L@/COMMENT@
@COMMENT@#define AOM_120DEG                         10923L@/COMMENT@
@COMMENT@#define AOM_140DEG                         12744L@/COMMENT@
@COMMENT@#define AOM_220DEG                         20025L@/COMMENT@
@COMMENT@#define AOM_240DEG                         21846L@/COMMENT@
@COMMENT@#define AOM_280DEG                         25487L@/COMMENT@
@COMMENT@#define AOM_290DEG                         26397L@/COMMENT@
@COMMENT@#define AOM_300DEG                         27307L@/COMMENT@
@COMMENT@#define AOM_65DEG_IB_NUMERATOR               110L@/COMMENT@
@COMMENT@#define AOM_70DEG_IB_NUMERATOR               120L@/COMMENT@
@COMMENT@#define AOM_140DEG_IB_NUMERATOR              140L@/COMMENT@
@COMMENT@#define AOM_240DEG_IB_NUMERATOR              128L@/COMMENT@
@COMMENT@#define AOM_220DEG_IB_NUMERATOR              150L@/COMMENT@
@COMMENT@#define AOM_280DEG_IB_NUMERATOR              120L@/COMMENT@
@COMMENT@#define AOM_300DEG_IB_NUMERATOR               87L@/COMMENT@
@COMMENT@#define AOM_360DEG_IB_NUMERATOR_80_90         50L@/COMMENT@
@COMMENT@#define AOM_360DEG_IB_NUMERATOR_100           60L@/COMMENT@
@COMMENT@#define AOM_S2PPU_NUMERATOR_80_90            990L@/COMMENT@
@COMMENT@#define AOM_S2PPU_NUMERATOR_100              990L@/COMMENT@
@COMMENT@#define AOM_50DEG_OB_NUMERATOR               100L@/COMMENT@
@COMMENT@#define AOM_70DEG_OB_NUMERATOR               120L@/COMMENT@
@COMMENT@#define AOM_120DEG_OB_NUMERATOR              130L@/COMMENT@
@COMMENT@#define AOM_240DEG_OB_NUMERATOR_80_90        128L@/COMMENT@
@COMMENT@#define AOM_240DEG_OB_NUMERATOR_100          160L@/COMMENT@
@COMMENT@#define AOM_290DEG_OB_NUMERATOR              120L@/COMMENT@
@COMMENT@#define AOM_300DEG_OB_NUMERATOR               98L@/COMMENT@
@COMMENT@#define AOM_360DEG_OB_NUMERATOR_80_90         60L@/COMMENT@
@COMMENT@#define AOM_360DEG_OB_NUMERATOR_100           60L@/COMMENT@
@COMMENT@#define AOM_20DEG_S4PPU_NUMERATOR_80_90     1020L@/COMMENT@
@COMMENT@#define AOM_20DEG_S4PPU_NUMERATOR_100       1040L@/COMMENT@
@COMMENT@#define AOM_360DEG_S4PPU_NUMERATOR_80_90    1090L@/COMMENT@
@COMMENT@#define AOM_360DEG_S4PPU_NUMERATOR_100      1060L@/COMMENT@
@COMMENT@#define AOM_LINEAR_DENOMINATOR              1000L@/COMMENT@
@COMMENT@#define AOM_65DEG_IB_OFFSET_SURF              20L@/COMMENT@
@COMMENT@#define AOM_70DEG_IB_OFFSET_SURF               0L@/COMMENT@
@COMMENT@#define AOM_140DEG_IB_OFFSET_SURF          (-374L)@/COMMENT@
@COMMENT@#define AOM_220DEG_IB_OFFSET_SURF          (-560L)@/COMMENT@
@COMMENT@#define AOM_240DEG_IB_OFFSET_SURF          (-144L)@/COMMENT@
@COMMENT@#define AOM_280DEG_IB_OFFSET_SURF            860L@/COMMENT@
@COMMENT@#define AOM_300DEG_IB_OFFSET_SURF           1777L@/COMMENT@
@COMMENT@#define AOM_360DEG_IB_OFFSET_SURF_80_90     4040L@/COMMENT@
@COMMENT@#define AOM_360DEG_IB_OFFSET_SURF_100       4160L@/COMMENT@
@COMMENT@#define AOM_S2PPU_OFFSET_SURF_80_90            8L@/COMMENT@
@COMMENT@#define AOM_S2PPU_OFFSET_SURF_100              0L@/COMMENT@
@COMMENT@#define AOM_50DEG_OB_OFFSET_SURF              32L@/COMMENT@
@COMMENT@#define AOM_70DEG_OB_OFFSET_SURF               0L@/COMMENT@
@COMMENT@#define AOM_120DEG_OB_OFFSET_SURF          (-270L)@/COMMENT@
@COMMENT@#define AOM_240DEG_OB_OFFSET_SURF_80_90    (-144L)@/COMMENT@
@COMMENT@#define AOM_240DEG_OB_OFFSET_SURF_100     (-1020L)@/COMMENT@
@COMMENT@#define AOM_300DEG_OB_OFFSET_SURF           1340L@/COMMENT@
@COMMENT@#define AOM_290DEG_OB_OFFSET_SURF            854L@/COMMENT@
@COMMENT@#define AOM_360DEG_OB_OFFSET_SURF_80_90     3620L@/COMMENT@
@COMMENT@#define AOM_360DEG_OB_OFFSET_SURF_100       4300L@/COMMENT@
@COMMENT@#define AOM_20DEG_S4PPU_OFFSET_SURF_80_90   (-20L)@/COMMENT@
@COMMENT@#define AOM_20DEG_S4PPU_OFFSET_SURF_100        0L@/COMMENT@
@COMMENT@#define AOM_360DEG_S4PPU_OFFSET_SURF_80_90 (-300L)@/COMMENT@
@COMMENT@#define AOM_360DEG_S4PPU_OFFSET_SURF_100   (-120L)@/COMMENT@
@COMMENT@#define AOM_GAINNF_NUMERATOR               16342L@/COMMENT@
@COMMENT@#define AOM_GAINNF_DENOMINATOR              8192L@/COMMENT@
@COMMENT@#define AOM_SURFTHRESH_SLAT                   50L@/COMMENT@
@COMMENT@#define AOM_SURFTHRESH_FLAP                  100L@/COMMENT@
@COMMENT@#define BNR_TO_32BIT                 0xFFFFFFFFuL@/COMMENT@

@COMMENT@/* DATA TYPES */@/COMMENT@
@COMMENT@/* None */@/COMMENT@


@COMMENT@/* MODULE DATA */@/COMMENT@
static uint8 AC_TxFailureCtr;
static uint8 AC_DiscrFailureCtr;
static uint8 ADIRU_TxFailureCtr;
static uint8 ADIRU_DiscrFailureCtr;
static int32 Fppu;
static int32 AppuLhDfppuLh;
static int32 AppuRhDfppuRh;
static int32 S2ppuLh;
static int32 S2ppuRh;
static int32 S4ppuLh;
static int32 S4ppuRh;
static int32 Ctp;
static int32 CtpLhOb;
static int32 CtpRhOb;
static boolean FppuDiscFail;
static boolean FlapSystemAsymmetry;
static boolean RL111_XCC_FlapSystemAsymmetry;
static boolean XCCL111Val;
static boolean FppuVal;
static boolean AppuLhDfppuLhVal;
static boolean AppuRhDfppuRhVal;
static boolean S2ppuLhVal;
static boolean S2ppuRhVal;
static boolean S4ppuLhVal;
static boolean S4ppuRhVal;
static boolean CtpVal;
static int32 Fppu_A;
static int32 AppuLhDfppuLh_A;
static int32 AppuRhDfppuRh_A;
static int32 S2ppuLh_A;
static int32 S2ppuRh_A;
static int32 S4ppuLh_A;
static int32 S4ppuRh_A;
static int32 Ctp_A;
static int32 CtpLhOb_A;
static int32 CtpRhOb_A;
static boolean FppuDiscFail_A;
static boolean FlapSystemAsymmetry_A;
static boolean RL111_XCC_FlapSystemAsymmetry_A;
static boolean XCCL111Val_A;
static boolean FppuVal_A;
static boolean AppuLhDfppuLhVal_A;
static boolean AppuRhDfppuRhVal_A;
static boolean S2ppuLhVal_A;
static boolean S2ppuRhVal_A;
static boolean S4ppuLhVal_A;
static boolean S4ppuRhVal_A;
static boolean CtpVal_A;

static int32 AOM_IB_FPPU_RETRACT;
static int32 AOM_IB_SPPU_RETRACT;
static int32 AOM_IB_FPPU_C1F_DFS;
static int32 AOM_IB_SPPU_C1F_DFS;
static int32 AOM_IB_FPPU_C1F_ALT;
static int32 AOM_IB_SPPU_C1F_ALT;
static int32 AOM_IB_FPPU_C2;
static int32 AOM_IB_SPPU_C2;
static int32 AOM_IB_FPPU_C3;
static int32 AOM_IB_SPPU_C3;
static int32 AOM_IB_FPPU_CFULL;
static int32 AOM_IB_SPPU_CFULL;

static int32 AOM_OB_FPPU_RETRACT;
static int32 AOM_OB_SPPU_RETRACT;
static int32 AOM_OB_FPPU_C1F_DFS;
static int32 AOM_OB_SPPU_C1F_DFS;
static int32 AOM_OB_FPPU_C1F_ALT;
static int32 AOM_OB_SPPU_C1F_ALT;
static int32 AOM_OB_FPPU_C2;
static int32 AOM_OB_SPPU_C2;
static int32 AOM_OB_FPPU_C3;
static int32 AOM_OB_SPPU_C3;
static int32 AOM_OB_FPPU_CFULL;
static int32 AOM_OB_SPPU_CFULL;

static int32 AOM_FLAP_IB_SURF_MIN;
static int32 AOM_FLAP_IB_SURF_MAX;
static int32 AOM_FLAP_OB_SURF_MIN;
static int32 AOM_FLAP_OB_SURF_MAX;

static boolean IntSlatRetract;
static boolean IntSlatGTorEQC1to3;
static boolean IntSlatGTorEQ3SorFull;
static int32 IntSlatSurfAngle;
static boolean IntSlatSurfAngleVal;
static boolean IntFlapIBRetract;
static boolean IntFlapIBGTorEQC1F_DFS;
static boolean IntFlapIBGTorEQC1F_ALT;
static boolean IntFlapIBGTorEQC2;
static boolean IntFlapIBGTorEQC3;
static boolean IntFlapIBGTorEQFull;
static int32 IntFlapIBSurfAngle;
static boolean IntFlapIBSurfAngleVal;
static int32 IntFlapCommSurfAngle;
static boolean IntFlapOBRetract;
static boolean IntFlapOBGTorEQC1F_ALT;
static boolean IntFlapOBGTorEQC1F_DFS;
static boolean IntFlapOBGTorEQC2;
static boolean IntFlapOBGTorEQC3;
static boolean IntFlapOBGTorEQFull;
static int32 IntFlapLHOBSurfAngle;
static int32 IntFlapRHOBSurfAngle;
static boolean IntFlapOBSurfAngleVal;
static boolean IntFlapLHOBSurfAngleVal;
static boolean IntFlapRHOBSurfAngleVal;
static int32 IntFlapCommLHOBSurfAngle;
static int32 IntFlapCommRHOBSurfAngle;

static boolean ACA429Fail;
static boolean AdiruA429Fail;

@COMMENT@/* ROUTINES */@/COMMENT@

static void @NODE TYPE=FUNCTION NAME="AOM_CounterUpdate"@@LINK NAME="AOM_CounterUpdate"@AOM_CounterUpdate(
   @COMMENT@/* IN    */@/COMMENT@ boolean         TxFailure,
   @COMMENT@/* IN    */@/COMMENT@ boolean         DiscrFailure,
   @COMMENT@/* INOUT */@/COMMENT@ uint8   * const TxFailureCtr,
   @COMMENT@/* INOUT */@/COMMENT@ uint8   * const DiscrFailureCtr )
@BRANCH MARK=TB ID=8 SUM=20@{
   @COMMENT@/* if transmission failure is active .. */@/COMMENT@
   @DECISION SUM=20+21 ID=2|3@if( @POPUP@TxFailure@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=0 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=1 SUM=30@False@/BRANCH@@/POPUP@ )
   @BRANCH MARK=TB ID=2 SUM=20@{
      @COMMENT@/* only to prevent overflow */@/COMMENT@
      @ALT@if( *TxFailureCtr LT MAX_UINT8 )@-ALT@
@DECISION SUM=20+21 ID=0|1@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=1 SUM=21@implicit else@/BRANCH@@/POPUP@( @POPUP@*TxFailureCtr < (            255 )@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=2 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=3 SUM=30@False@/BRANCH@@/POPUP@ )@/ALT@
      @BRANCH MARK=TB ID=0 SUM=20@{
         @COMMENT@/* increment failure counter */@/COMMENT@
         ( *TxFailureCtr )++;
      }@/BRANCH@@/DECISION@
   }@/BRANCH@
   @COMMENT@/* else (no transmission failure active) .. */@/COMMENT@
   @BRANCH MARK=TB ID=3 SUM=20@else
   {
      @COMMENT@/* reset failure counter */@/COMMENT@
      *TxFailureCtr = 0;
   }@/BRANCH@@/DECISION@

   @COMMENT@/* if discrepancy failure is active .. */@/COMMENT@
   @DECISION SUM=20+21 ID=6|7@if( @POPUP@DiscrFailure@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=4 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=5 SUM=30@False@/BRANCH@@/POPUP@ )
   @BRANCH MARK=TB ID=6 SUM=20@{
      @COMMENT@/* only to prevent overflow */@/COMMENT@
      @ALT@if( *DiscrFailureCtr LT MAX_UINT8 )@-ALT@
@DECISION SUM=20+21 ID=4|5@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=5 SUM=21@implicit else@/BRANCH@@/POPUP@( @POPUP@*DiscrFailureCtr < (            255 )@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=6 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=7 SUM=30@False@/BRANCH@@/POPUP@ )@/ALT@
      @BRANCH MARK=TB ID=4 SUM=20@{
         @COMMENT@/* increment failure counter */@/COMMENT@
         ( *DiscrFailureCtr )++;
      }@/BRANCH@@/DECISION@
   }@/BRANCH@
   @COMMENT@/* else (no discrepancy failure active) .. */@/COMMENT@
   @BRANCH MARK=TB ID=7 SUM=20@else
   {
      @COMMENT@/* reset failure counter */@/COMMENT@
      *DiscrFailureCtr = 0;
   }@/BRANCH@@/DECISION@
}@/BRANCH@@/NODE@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
void @NODE TYPE=FUNCTION NAME="AOM_Init_Monitoring"@@LINK NAME="AOM_Init_Monitoring"@AOM_Init_Monitoring( void )
@BRANCH MARK=TB ID=13 SUM=20@{
   @COMMENT@/* initialise failure counters */@/COMMENT@
   AC_TxFailureCtr       = 0;
   AC_DiscrFailureCtr    = 0;
   ADIRU_TxFailureCtr    = 0;
   ADIRU_DiscrFailureCtr = 0;

   @COMMENT@/* initialise module global variables */@/COMMENT@
   Fppu                  = 0L;
   AppuLhDfppuLh         = 0L;
   AppuRhDfppuRh         = 0L;
   S2ppuLh               = 0L;
   S2ppuRh               = 0L;
   S4ppuLh               = 0L;
   S4ppuRh               = 0L;
   Ctp                   = 0L;
   CtpLhOb               = 0L;
   CtpRhOb               = 0L;
   FppuDiscFail          = FALSE;
   FlapSystemAsymmetry   = FALSE;
   RL111_XCC_FlapSystemAsymmetry = FALSE;
   XCCL111Val            = FALSE;
   FppuVal               = FALSE;
   AppuLhDfppuLhVal      = FALSE;
   AppuRhDfppuRhVal      = FALSE;
   S2ppuLhVal            = FALSE;
   S2ppuRhVal            = FALSE;
   S4ppuLhVal            = FALSE;
   S4ppuRhVal            = FALSE;
   CtpVal                = FALSE;
   Fppu_A                = 0L;
   AppuLhDfppuLh_A       = 0L;
   AppuRhDfppuRh_A       = 0L;
   S2ppuLh_A             = 0L;
   S2ppuRh_A             = 0L;
   S4ppuLh_A             = 0L;
   S4ppuRh_A             = 0L;
   Ctp_A                 = 0L;
   CtpLhOb_A             = 0L;
   CtpRhOb_A             = 0L;
   FppuDiscFail_A        = FALSE;
   FlapSystemAsymmetry_A = FALSE;
   RL111_XCC_FlapSystemAsymmetry_A = FALSE;
   XCCL111Val_A          = FALSE;
   FppuVal_A             = FALSE;
   AppuLhDfppuLhVal_A    = FALSE;
   AppuRhDfppuRhVal_A    = FALSE;
   S2ppuLhVal_A          = FALSE;
   S2ppuRhVal_A          = FALSE;
   S4ppuLhVal_A          = FALSE;
   S4ppuRhVal_A          = FALSE;
   CtpVal_A              = FALSE;

   AOM_IB_FPPU_RETRACT = 0L;
   AOM_IB_SPPU_RETRACT = 0L;
   AOM_IB_FPPU_C1F_DFS = 0L;
   AOM_IB_SPPU_C1F_DFS = 0L;
   AOM_IB_FPPU_C1F_ALT = 0L;
   AOM_IB_SPPU_C1F_ALT = 0L;
   AOM_IB_FPPU_C2      = 0L;
   AOM_IB_SPPU_C2      = 0L;
   AOM_IB_FPPU_C3      = 0L;
   AOM_IB_SPPU_C3      = 0L;
   AOM_IB_FPPU_CFULL   = 0L;
   AOM_IB_SPPU_CFULL   = 0L;

   AOM_OB_FPPU_RETRACT = 0L;
   AOM_OB_SPPU_RETRACT = 0L;
   AOM_OB_FPPU_C1F_DFS = 0L;
   AOM_OB_SPPU_C1F_DFS = 0L;
   AOM_OB_FPPU_C1F_ALT = 0L;
   AOM_OB_SPPU_C1F_ALT = 0L;
   AOM_OB_FPPU_C2      = 0L;
   AOM_OB_SPPU_C2      = 0L;
   AOM_OB_FPPU_C3      = 0L;
   AOM_OB_SPPU_C3      = 0L;
   AOM_OB_FPPU_CFULL   = 0L;
   AOM_OB_SPPU_CFULL   = 0L;

   AOM_FLAP_IB_SURF_MIN = 0L;
   AOM_FLAP_IB_SURF_MAX = 0L;
   AOM_FLAP_OB_SURF_MIN = 0L;
   AOM_FLAP_OB_SURF_MAX = 0L;

   IntSlatRetract = FALSE;
   IntSlatGTorEQC1to3 = FALSE;
   IntSlatGTorEQ3SorFull = FALSE;
   IntSlatSurfAngle = 0L;
   IntSlatSurfAngleVal = FALSE;
   IntFlapIBRetract = FALSE;
   IntFlapIBGTorEQC1F_DFS = FALSE;
   IntFlapIBGTorEQC1F_ALT = FALSE;
   IntFlapIBGTorEQC2 = FALSE;
   IntFlapIBGTorEQC3 = FALSE;
   IntFlapIBGTorEQFull = FALSE;
   IntFlapIBSurfAngle = 0L;
   IntFlapIBSurfAngleVal = FALSE;
   IntFlapCommSurfAngle = 0L;
   IntFlapOBRetract = FALSE;
   IntFlapOBGTorEQC1F_ALT = FALSE;
   IntFlapOBGTorEQC1F_DFS = FALSE;
   IntFlapOBGTorEQC2 = FALSE;
   IntFlapOBGTorEQC3 = FALSE;
   IntFlapOBGTorEQFull = FALSE;
   IntFlapLHOBSurfAngle = 0L;
   IntFlapRHOBSurfAngle = 0L;
   IntFlapOBSurfAngleVal = FALSE;
   IntFlapLHOBSurfAngleVal = FALSE;
   IntFlapRHOBSurfAngleVal = FALSE;
   IntFlapCommLHOBSurfAngle = 0L;
   IntFlapCommRHOBSurfAngle = 0L;

   @COMMENT@/* restore failure indications */@/COMMENT@
   ACA429Fail    = @BRANCH MARK=TA ID=0 SUM=10@@JUMP NAME="DMA_Get"@DMA_Get@/JUMP@( DML_ACA429FAIL    )@/BRANCH@;
   AdiruA429Fail = @BRANCH MARK=TA ID=1 SUM=10@@JUMP NAME="DMA_Get"@DMA_Get@/JUMP@( DML_ADIRUA429FAIL )@/BRANCH@;

   @COMMENT@/* initialisation of IPA variables to specific values */@/COMMENT@
   @ALT@if (ACA429Fail EQ FALSE)@-ALT@
@DECISION SUM=20+21 ID=9|10@if (@POPUP@ACA429Fail == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=8 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=9 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
   @BRANCH MARK=TB ID=9 SUM=20@{
      @BRANCH MARK=TA ID=2 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_OD_INT_OTHERAC_ENABLE, TRUE )@/BRANCH@;
      @BRANCH MARK=TA ID=3 SUM=10@@JUMP NAME="DOR_Put_Output"@DOR_Put_Output@/JUMP@(DOR_A429_TX_OTHERAC_EN, TRUE)@/BRANCH@;
   }@/BRANCH@
   @BRANCH MARK=TB ID=10 SUM=20@else
   {
      @BRANCH MARK=TA ID=4 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_OD_INT_OTHERAC_ENABLE, FALSE )@/BRANCH@;
      @BRANCH MARK=TA ID=5 SUM=10@@JUMP NAME="DOR_Put_Output"@DOR_Put_Output@/JUMP@(DOR_A429_TX_OTHERAC_EN, FALSE)@/BRANCH@;
   }@/BRANCH@@/DECISION@
   @ALT@if (AdiruA429Fail EQ FALSE)@-ALT@
@DECISION SUM=20+21 ID=11|12@if (@POPUP@AdiruA429Fail == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=10 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=11 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
   @BRANCH MARK=TB ID=11 SUM=20@{
      @BRANCH MARK=TA ID=6 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_OD_INT_ADIRU_ENABLE, TRUE )@/BRANCH@;
      @BRANCH MARK=TA ID=7 SUM=10@@JUMP NAME="DOR_Put_Output"@DOR_Put_Output@/JUMP@(DOR_A429_TX_ADIRU_EN, TRUE)@/BRANCH@;
   }@/BRANCH@
   @BRANCH MARK=TB ID=12 SUM=20@else
   {
      @BRANCH MARK=TA ID=8 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_OD_INT_ADIRU_ENABLE, FALSE )@/BRANCH@;
      @BRANCH MARK=TA ID=9 SUM=10@@JUMP NAME="DOR_Put_Output"@DOR_Put_Output@/JUMP@(DOR_A429_TX_ADIRU_EN, FALSE)@/BRANCH@;
   }@/BRANCH@@/DECISION@
}@/BRANCH@@/NODE@


@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
static void @NODE TYPE=FUNCTION NAME="AOM_Determine_Thresholds"@@LINK NAME="AOM_Determine_Thresholds"@AOM_Determine_Thresholds(
   @COMMENT@/* IN */@/COMMENT@ TYP_Aircraft_Type OpMode )
@BRANCH MARK=TB ID=16 SUM=20@{
   @DECISION SUM=20+21 ID=14|15@if (@POPUP@OpMode EQ A350_1000@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=12 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=13 SUM=30@False@/BRANCH@@/POPUP@)
   @BRANCH MARK=TB ID=14 SUM=20@{
      AOM_IB_FPPU_RETRACT =  2529L; @COMMENT@/*  27.78 deg PPU */@/COMMENT@
      AOM_IB_SPPU_RETRACT =   291L; @COMMENT@/*   3.20 deg PPU */@/COMMENT@
      AOM_IB_FPPU_C1F_DFS = 11077L; @COMMENT@/* 121.7  deg PPU */@/COMMENT@
      AOM_IB_SPPU_C1F_DFS =  1447L; @COMMENT@/*  15.9  deg PPU */@/COMMENT@
      AOM_IB_FPPU_C1F_ALT = 11077L; @COMMENT@/* 121.7  deg PPU */@/COMMENT@
      AOM_IB_SPPU_C1F_ALT =  1447L; @COMMENT@/*  15.9  deg PPU */@/COMMENT@
      AOM_IB_FPPU_C2      = 13628L; @COMMENT@/* 149.72 deg PPU */@/COMMENT@
      AOM_IB_SPPU_C2      =  1846L; @COMMENT@/*  20.28 deg PPU */@/COMMENT@
      AOM_IB_FPPU_C3      = 17013L; @COMMENT@/* 186.91 deg PPU */@/COMMENT@
      AOM_IB_SPPU_C3      =  2390L; @COMMENT@/*  26.26 deg PPU */@/COMMENT@
      AOM_IB_FPPU_CFULL   = 27050L; @COMMENT@/* 297.18 deg PPU */@/COMMENT@
      AOM_IB_SPPU_CFULL   =  3600L; @COMMENT@/*  39.55 deg PPU */@/COMMENT@

      AOM_OB_FPPU_RETRACT =  3145L; @COMMENT@/*  34.55 deg PPU */@/COMMENT@
      AOM_OB_SPPU_RETRACT =   321L; @COMMENT@/*   3.53 deg PPU */@/COMMENT@
      AOM_OB_FPPU_C1F_DFS = 11077L; @COMMENT@/* 121.7  deg PPU */@/COMMENT@
      AOM_OB_SPPU_C1F_DFS =  1335L; @COMMENT@/*  14.67 deg PPU */@/COMMENT@
      AOM_OB_FPPU_C1F_ALT = 11077L; @COMMENT@/* 121.7  deg PPU */@/COMMENT@
      AOM_OB_SPPU_C1F_ALT =  1335L; @COMMENT@/*  14.67 deg PPU */@/COMMENT@
      AOM_OB_FPPU_C2      = 13628L; @COMMENT@/* 149.72 deg PPU */@/COMMENT@
      AOM_OB_SPPU_C2      =  1722L; @COMMENT@/*  18.92 deg PPU */@/COMMENT@
      AOM_OB_FPPU_C3      = 17013L; @COMMENT@/* 186.91 deg PPU */@/COMMENT@
      AOM_OB_SPPU_C3      =  2257L; @COMMENT@/*  24.80 deg PPU */@/COMMENT@
      AOM_OB_FPPU_CFULL   = 27050L; @COMMENT@/* 297.18 deg PPU */@/COMMENT@
      AOM_OB_SPPU_CFULL   =  3459L; @COMMENT@/*  38.00 deg PPU */@/COMMENT@

      AOM_FLAP_IB_SURF_MIN = (-751L); @COMMENT@/* -3.755 deg Surf */@/COMMENT@
      AOM_FLAP_IB_SURF_MAX =  8023L;  @COMMENT@/* 40.114 deg Surf */@/COMMENT@
      AOM_FLAP_OB_SURF_MIN = (-684L); @COMMENT@/* -3.418 deg Surf */@/COMMENT@
      AOM_FLAP_OB_SURF_MAX =  8184L;  @COMMENT@/* 40.920 deg Surf */@/COMMENT@
   }@/BRANCH@
   @BRANCH MARK=TB ID=15 SUM=20@else @COMMENT@/* OpMode 80 or 90 */@/COMMENT@
   {
      AOM_IB_FPPU_RETRACT =  1133L; @COMMENT@/*  12.45 deg PPU */@/COMMENT@
      AOM_IB_SPPU_RETRACT =   128L; @COMMENT@/*   1.41 deg PPU */@/COMMENT@
      AOM_IB_FPPU_C1F_DFS = 10865L; @COMMENT@/* 119.37 deg PPU */@/COMMENT@
      AOM_IB_SPPU_C1F_DFS =  1329L; @COMMENT@/*  14.60 deg PPU */@/COMMENT@
      AOM_IB_FPPU_C1F_ALT = 10865L; @COMMENT@/* 119.37 deg PPU */@/COMMENT@
      AOM_IB_SPPU_C1F_ALT =  1329L; @COMMENT@/*  14.60 deg PPU */@/COMMENT@
      AOM_IB_FPPU_C2      = 13432L; @COMMENT@/* 147.57 deg PPU */@/COMMENT@
      AOM_IB_SPPU_C2      =  1670L; @COMMENT@/*  18.35 deg PPU */@/COMMENT@
      AOM_IB_FPPU_C3      = 17474L; @COMMENT@/* 191.98 deg PPU */@/COMMENT@
      AOM_IB_SPPU_C3      =  2205L; @COMMENT@/*  24.23 deg PPU */@/COMMENT@
      AOM_IB_FPPU_CFULL   = 28511L; @COMMENT@/* 313.23 deg PPU */@/COMMENT@
      AOM_IB_SPPU_CFULL   =  3286L; @COMMENT@/*  36.10 deg PPU */@/COMMENT@

      AOM_OB_FPPU_RETRACT =  1133L; @COMMENT@/*  12.45 deg PPU */@/COMMENT@
      AOM_OB_SPPU_RETRACT =   127L; @COMMENT@/*   1.40 deg PPU */@/COMMENT@
      AOM_OB_FPPU_C1F_DFS = 10865L; @COMMENT@/* 119.37 deg PPU */@/COMMENT@
      AOM_OB_SPPU_C1F_DFS =  1295L; @COMMENT@/*  14.23 deg PPU */@/COMMENT@
      AOM_OB_FPPU_C1F_ALT = 10865L; @COMMENT@/* 119.37 deg PPU */@/COMMENT@
      AOM_OB_SPPU_C1F_ALT =  1295L; @COMMENT@/*  14.23 deg PPU */@/COMMENT@
      AOM_OB_FPPU_C2      = 13432L; @COMMENT@/* 147.57 deg PPU */@/COMMENT@
      AOM_OB_SPPU_C2      =  1625L; @COMMENT@/*  17.85 deg PPU */@/COMMENT@
      AOM_OB_FPPU_C3      = 17474L; @COMMENT@/* 191.98 deg PPU */@/COMMENT@
      AOM_OB_SPPU_C3      =  2139L; @COMMENT@/*  23.50 deg PPU */@/COMMENT@
      AOM_OB_FPPU_CFULL   = 28511L; @COMMENT@/* 313.23 deg PPU */@/COMMENT@
      AOM_OB_SPPU_CFULL   =  3244L; @COMMENT@/*  35.64 deg PPU */@/COMMENT@

      AOM_FLAP_IB_SURF_MIN = (-518L); @COMMENT@/* -2.59 deg Surf */@/COMMENT@
      AOM_FLAP_IB_SURF_MAX =  7300L;  @COMMENT@/* 36.50 deg Surf */@/COMMENT@
      AOM_FLAP_OB_SURF_MIN = (-522L); @COMMENT@/* -2.61 deg Surf */@/COMMENT@
      AOM_FLAP_OB_SURF_MAX =  7548L;  @COMMENT@/* 37.74 deg Surf */@/COMMENT@
   }@/BRANCH@@/DECISION@
}@/BRANCH@@/NODE@


@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
static void @NODE TYPE=FUNCTION NAME="AOM_Generate_ACout_DepEngData"@@LINK NAME="AOM_Generate_ACout_DepEngData"@AOM_Generate_ACout_DepEngData(
   @COMMENT@/* IN    */@/COMMENT@ TYP_Slat_Or_Flap_Type ChID,
   @COMMENT@/* IN    */@/COMMENT@ uint32 A429_OutMon_Ded_1)
@BRANCH MARK=TB ID=31 SUM=20@{
   AWM_SW_A429_Word_Type TempLabel = 0uL;
   uint32 A429_OutMon_Ded_2 = 0uL;
   uint32 A429_OutMon_Ded_3 = 0uL;
   uint32 A429_OutMon_Ded_4 = 0uL;
   uint32 A429_OutMon_Ded_5 = 0uL;
   uint32 A429_OutMon_Ded_6 = 0uL;

   @DECISION SUM=20+21 ID=17|30@if( @POPUP@ChID EQ SLAT_TYPE@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=14 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=15 SUM=30@False@/BRANCH@@/POPUP@ )
   @BRANCH MARK=TB ID=17 SUM=20@{
      @COMMENT@/* generate DED word 2 with internal data ... */@/COMMENT@
      A429_OutMon_Ded_2 = ((uint32)IntSlatRetract        << 0) +
                          ((uint32)IntSlatGTorEQC1to3    << 1) +
                          ((uint32)IntSlatGTorEQ3SorFull << 2) +
                          ((uint32)IntSlatSurfAngleVal   << 3);

      @COMMENT@/* ...and data received via loopback label 010 */@/COMMENT@
      TempLabel = @BRANCH MARK=TA ID=10 SUM=10@@JUMP NAME="AGE_Get_AC_L01x_Surface_Bool"@AGE_Get_AC_L01x_Surface_Bool@/JUMP@()@/BRANCH@;
      @BRANCH MARK=TA ID=12 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_2, 4, @BRANCH MARK=TA ID=11 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@(TempLabel, (uint16x)AWM_DATA_SLATRETRACT0)@/BRANCH@ )@/BRANCH@;
      @BRANCH MARK=TA ID=14 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_2, 5, @BRANCH MARK=TA ID=13 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@(TempLabel, (uint16x)AWM_DATA_SLATGTOREQC1TO3)@/BRANCH@ )@/BRANCH@;
      @BRANCH MARK=TA ID=16 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_2, 6, @BRANCH MARK=TA ID=15 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@(TempLabel, (uint16x)AWM_DATA_SLATGTOREQ3SORFULL)@/BRANCH@ )@/BRANCH@;
      @BRANCH MARK=TA ID=18 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_2, 7, @BRANCH MARK=TA ID=17 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@(TempLabel, (uint16x)AWM_DATA_SLATSURFACEANGLEVAL)@/BRANCH@ )@/BRANCH@;

      @BRANCH MARK=TA ID=19 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_A429_OUTMON_DED_2, (int32)A429_OutMon_Ded_2)@/BRANCH@;

      @COMMENT@/* computed IntSlatSurfAngle */@/COMMENT@
      A429_OutMon_Ded_3 = (uint32)IntSlatSurfAngle;

      @BRANCH MARK=TA ID=20 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_A429_OUTMON_DED_3, (int32)A429_OutMon_Ded_3)@/BRANCH@;

      @COMMENT@/* received label 012 via loopback */@/COMMENT@
      TempLabel = @BRANCH MARK=TA ID=21 SUM=10@@JUMP NAME="AGE_Get_AC_L01x_Surface_Num"@AGE_Get_AC_L01x_Surface_Num@/JUMP@()@/BRANCH@;
      A429_OutMon_Ded_4 = (uint32)@BRANCH MARK=TA ID=22 SUM=10@@JUMP NAME="BIT_Field_Normalised_Signed"@BIT_Field_Normalised_Signed@/JUMP@(TempLabel,
                          (uint16x)AWM_DATA_SLATSURFACEANGLE_FIRST, (uint16x)AWM_SW_A429_DATA_LAST )@/BRANCH@;

      @BRANCH MARK=TA ID=23 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_A429_OUTMON_DED_4, (int32)A429_OutMon_Ded_4)@/BRANCH@;
   }@/BRANCH@
   @BRANCH MARK=TB ID=30 SUM=20@else
   {
      @COMMENT@/*                  FLAPs OB discretes */@/COMMENT@
      A429_OutMon_Ded_2 = ((uint32)IntFlapOBRetract        << 0) +
                          ((uint32)IntFlapOBGTorEQC1F_ALT  << 1) +
                          ((uint32)IntFlapOBGTorEQC1F_DFS  << 2) +
                          ((uint32)IntFlapOBGTorEQC2       << 3) +
                          ((uint32)IntFlapOBGTorEQC3       << 4) +
                          ((uint32)IntFlapOBGTorEQFull     << 5) +
                          ((uint32)IntFlapOBSurfAngleVal   << 6) +
                          @COMMENT@/* calculated OB Surface Angle validities */@/COMMENT@
                          ((uint32)IntFlapLHOBSurfAngleVal << 7) +
                          ((uint32)IntFlapRHOBSurfAngleVal << 8) +
                          @COMMENT@/* FLAPs IB discretes */@/COMMENT@
                          ((uint32)IntFlapIBRetract        << 9) +
                          ((uint32)IntFlapIBGTorEQC1F_DFS  << 10) +
                          ((uint32)IntFlapIBGTorEQC1F_ALT  << 11) +
                          ((uint32)IntFlapIBGTorEQC2       << 12) +
                          ((uint32)IntFlapIBGTorEQC3       << 13) +
                          ((uint32)IntFlapIBGTorEQFull     << 14) +
                          @COMMENT@/* calculated IB Surface Angle validity */@/COMMENT@
                          ((uint32)IntFlapIBSurfAngleVal   << 15);


      @BRANCH MARK=TA ID=24 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_A429_OUTMON_DED_2, (int32)A429_OutMon_Ded_2)@/BRANCH@;

      @COMMENT@/* received label 011 via loopback */@/COMMENT@
      TempLabel = @BRANCH MARK=TA ID=25 SUM=10@@JUMP NAME="AGE_Get_AC_L01x_Surface_Bool"@AGE_Get_AC_L01x_Surface_Bool@/JUMP@()@/BRANCH@;
      A429_OutMon_Ded_3 = @BRANCH MARK=TA ID=26 SUM=10@@JUMP NAME="BIT_Field_Normalised"@BIT_Field_Normalised@/JUMP@(TempLabel,
                          (uint16x)AWM_DATA_FLAPOBRETRACT, (uint16x)AWM_DATA_FLAPIBSURFANGLEVAL )@/BRANCH@;

      @BRANCH MARK=TA ID=27 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_A429_OUTMON_DED_3, (int32)A429_OutMon_Ded_3)@/BRANCH@;

      @COMMENT@/* received label 215 via loopback */@/COMMENT@
      TempLabel = @BRANCH MARK=TA ID=28 SUM=10@@JUMP NAME="AGE_Get_AC_L215_Flap_Status_Discr_2"@AGE_Get_AC_L215_Flap_Status_Discr_2@/JUMP@()@/BRANCH@;
      A429_OutMon_Ded_4 = @BRANCH MARK=TA ID=29 SUM=10@@JUMP NAME="BIT_Field_Normalised"@BIT_Field_Normalised@/JUMP@(TempLabel,
                          (uint16x)AWM_DATA_FLAPLHOBSURFANGLEVAL, (uint16x)AWM_DATA_FLAPRHOBSURFANGLEVAL )@/BRANCH@;

      @BRANCH MARK=TA ID=30 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_A429_OUTMON_DED_4, (int32)A429_OutMon_Ded_4)@/BRANCH@;

      @ALT@if(BIT_Is_Set(A429_OutMon_Ded_1, 3) EQ TRUE) @COMMENT@/* i.e. L013 */@/COMMENT@@-ALT@
@DECISION SUM=20+21 ID=18|29@if(@POPUP@@BRANCH MARK=TA ID=31 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@(A429_OutMon_Ded_1, 3)@/BRANCH@ == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=16 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=17 SUM=30@False@/BRANCH@@/POPUP@) /* i.e. L013 */@/ALT@
      @BRANCH MARK=TB ID=18 SUM=20@{
         A429_OutMon_Ded_5 = (uint32)IntFlapIBSurfAngle;
         TempLabel = @BRANCH MARK=TA ID=32 SUM=10@@JUMP NAME="AGE_Get_AC_L01x_Surface_Num"@AGE_Get_AC_L01x_Surface_Num@/JUMP@()@/BRANCH@;
         A429_OutMon_Ded_6 = (uint32)@BRANCH MARK=TA ID=33 SUM=10@@JUMP NAME="BIT_Field_Normalised_Signed"@BIT_Field_Normalised_Signed@/JUMP@(TempLabel,
                             (uint16x)AWM_DATA_FLAPIBSURFANGLE_FIRST, (uint16x)AWM_SW_A429_DATA_LAST )@/BRANCH@;
      }@/BRANCH@
      @ALT@else if(BIT_Is_Set(A429_OutMon_Ded_1, 4) EQ TRUE) @COMMENT@/* i.e. L015 */@/COMMENT@@-ALT@
@BRANCH MARK=TB ID=29 SUM=20@else @DECISION SUM=20+21 ID=19|28@if(@POPUP@@BRANCH MARK=TA ID=34 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@(A429_OutMon_Ded_1, 4)@/BRANCH@ == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=18 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=19 SUM=30@False@/BRANCH@@/POPUP@) /* i.e. L015 */@/ALT@
      @BRANCH MARK=TB ID=19 SUM=20@{
         A429_OutMon_Ded_5 = (uint32)IntFlapLHOBSurfAngle;
         TempLabel = @BRANCH MARK=TA ID=35 SUM=10@@JUMP NAME="AGE_Get_AC_L015_Flap_LHOB_Surface_Num"@AGE_Get_AC_L015_Flap_LHOB_Surface_Num@/JUMP@()@/BRANCH@;
         A429_OutMon_Ded_6 = (uint32)@BRANCH MARK=TA ID=36 SUM=10@@JUMP NAME="BIT_Field_Normalised_Signed"@BIT_Field_Normalised_Signed@/JUMP@(TempLabel,
                             (uint16x)AWM_DATA_FLAPLHOBSURFANGLE_FIRST, (uint16x)AWM_SW_A429_DATA_LAST )@/BRANCH@;
      }@/BRANCH@
      @ALT@else if(BIT_Is_Set(A429_OutMon_Ded_1, 5) EQ TRUE) @COMMENT@/* i.e. L017 */@/COMMENT@@-ALT@
@BRANCH MARK=TB ID=28 SUM=20@else @DECISION SUM=20+21 ID=20|27@if(@POPUP@@BRANCH MARK=TA ID=37 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@(A429_OutMon_Ded_1, 5)@/BRANCH@ == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=20 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=21 SUM=30@False@/BRANCH@@/POPUP@) /* i.e. L017 */@/ALT@
      @BRANCH MARK=TB ID=20 SUM=20@{
         A429_OutMon_Ded_5 = (uint32)IntFlapRHOBSurfAngle;
         TempLabel = @BRANCH MARK=TA ID=38 SUM=10@@JUMP NAME="AGE_Get_AC_L017_Flap_RHOB_Surface_Num"@AGE_Get_AC_L017_Flap_RHOB_Surface_Num@/JUMP@()@/BRANCH@;
         A429_OutMon_Ded_6 = (uint32)@BRANCH MARK=TA ID=39 SUM=10@@JUMP NAME="BIT_Field_Normalised_Signed"@BIT_Field_Normalised_Signed@/JUMP@(TempLabel,
                             (uint16x)AWM_DATA_FLAPRHOBSURFANGLE_FIRST, (uint16x)AWM_SW_A429_DATA_LAST )@/BRANCH@;
      }@/BRANCH@
      @ALT@else if(BIT_Is_Set(A429_OutMon_Ded_1, 6) EQ TRUE) @COMMENT@/* i.e. L021 */@/COMMENT@@-ALT@
@BRANCH MARK=TB ID=27 SUM=20@else @DECISION SUM=20+21 ID=21|26@if(@POPUP@@BRANCH MARK=TA ID=40 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@(A429_OutMon_Ded_1, 6)@/BRANCH@ == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=22 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=23 SUM=30@False@/BRANCH@@/POPUP@) /* i.e. L021 */@/ALT@
      @BRANCH MARK=TB ID=21 SUM=20@{
         A429_OutMon_Ded_5 = (uint32)IntFlapCommSurfAngle;
         TempLabel = @BRANCH MARK=TA ID=41 SUM=10@@JUMP NAME="AGE_Get_AC_L021_Flap_Comm_Surface_Num"@AGE_Get_AC_L021_Flap_Comm_Surface_Num@/JUMP@()@/BRANCH@;
         A429_OutMon_Ded_6 = (uint32)@BRANCH MARK=TA ID=42 SUM=10@@JUMP NAME="BIT_Field_Normalised_Signed"@BIT_Field_Normalised_Signed@/JUMP@(TempLabel,
                             (uint16x)AWM_DATA_FLAPCOMMSURFANGLE_FIRST, (uint16x)AWM_SW_A429_DATA_LAST )@/BRANCH@;
      }@/BRANCH@
      @ALT@else if(BIT_Is_Set(A429_OutMon_Ded_1, 7) EQ TRUE) @COMMENT@/* i.e. L023 */@/COMMENT@@-ALT@
@BRANCH MARK=TB ID=26 SUM=20@else @DECISION SUM=20+21 ID=22|25@if(@POPUP@@BRANCH MARK=TA ID=43 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@(A429_OutMon_Ded_1, 7)@/BRANCH@ == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=24 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=25 SUM=30@False@/BRANCH@@/POPUP@) /* i.e. L023 */@/ALT@
      @BRANCH MARK=TB ID=22 SUM=20@{
         A429_OutMon_Ded_5 = (uint32)IntFlapCommLHOBSurfAngle;
         TempLabel = @BRANCH MARK=TA ID=44 SUM=10@@JUMP NAME="AGE_Get_AC_L023_Flap_Comm_LHOB_Surface_Num"@AGE_Get_AC_L023_Flap_Comm_LHOB_Surface_Num@/JUMP@()@/BRANCH@;
         A429_OutMon_Ded_6 = (uint32)@BRANCH MARK=TA ID=45 SUM=10@@JUMP NAME="BIT_Field_Normalised_Signed"@BIT_Field_Normalised_Signed@/JUMP@(TempLabel,
                             (uint16x)AWM_DATA_FLAPCOMMLHOBSURFANGLE_FIRST, (uint16x)AWM_SW_A429_DATA_LAST )@/BRANCH@;
      }@/BRANCH@
      @ALT@else if(BIT_Is_Set(A429_OutMon_Ded_1, 8) EQ TRUE) @COMMENT@/* i.e. L025 */@/COMMENT@@-ALT@
@BRANCH MARK=TB ID=25 SUM=20@else @DECISION SUM=20+21 ID=23|24@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=24 SUM=21@implicit else@/BRANCH@@/POPUP@(@POPUP@@BRANCH MARK=TA ID=46 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@(A429_OutMon_Ded_1, 8)@/BRANCH@ == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=26 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=27 SUM=30@False@/BRANCH@@/POPUP@) /* i.e. L025 */@/ALT@
      @BRANCH MARK=TB ID=23 SUM=20@{
         A429_OutMon_Ded_5 = (uint32)IntFlapCommRHOBSurfAngle;
         TempLabel = @BRANCH MARK=TA ID=47 SUM=10@@JUMP NAME="AGE_Get_AC_L025_Flap_Comm_RHOB_Surface_Num"@AGE_Get_AC_L025_Flap_Comm_RHOB_Surface_Num@/JUMP@()@/BRANCH@;
         A429_OutMon_Ded_6 = (uint32)@BRANCH MARK=TA ID=48 SUM=10@@JUMP NAME="BIT_Field_Normalised_Signed"@BIT_Field_Normalised_Signed@/JUMP@(TempLabel,
                             (uint16x)AWM_DATA_FLAPCOMMRHOBSURFANGLE_FIRST, (uint16x)AWM_SW_A429_DATA_LAST )@/BRANCH@;
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@
      @BRANCH MARK=TA ID=49 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_A429_OUTMON_DED_5, (int32)A429_OutMon_Ded_5)@/BRANCH@;
      @BRANCH MARK=TA ID=50 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_A429_OUTMON_DED_6, (int32)A429_OutMon_Ded_6)@/BRANCH@;
   }@/BRANCH@@/DECISION@
}@/BRANCH@@/NODE@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
static void @NODE TYPE=FUNCTION NAME="AOM_CalculateSlatInternals"@@LINK NAME="AOM_CalculateSlatInternals"@AOM_CalculateSlatInternals(void)
@BRANCH MARK=TB ID=36 SUM=20@{
   boolean SlatUseFPPU = FALSE;
   boolean SlatUseAPPU = FALSE;
   int32 SlatFPPU = 0L;
   int32 APPUMid = 0L;

   @COMMENT@/* calculate internal signals */@/COMMENT@
   @ALT@SlatUseFPPU =     (FppuVal EQ TRUE)@-ALT@
SlatUseFPPU =     @POPUP@(@POPUP@FppuVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=28 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=29 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                 @ALT@AND (FppuDiscFail EQ FALSE)@-ALT@&& (@POPUP@FppuDiscFail == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=30 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=31 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=32&34 SUM=31@FppuVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=32 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=34 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=32&33 SUM=31@FppuDiscFail == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=32 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=33 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@;
   @ALT@SlatUseAPPU =     (AppuLhDfppuLhVal EQ TRUE)@-ALT@
SlatUseAPPU =     @POPUP@(@POPUP@AppuLhDfppuLhVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=35 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=36 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                 @ALT@AND (AppuRhDfppuRhVal EQ TRUE)@-ALT@
&& (@POPUP@AppuRhDfppuRhVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=37 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=38 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                 @ALT@AND (SlatUseFPPU EQ FALSE)@-ALT@&& (@POPUP@SlatUseFPPU == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=39 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=40 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=41&44 SUM=31@AppuLhDfppuLhVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=41 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=44 SUM=32@FXX@/BRANCH@=F
  @BRANCH MARK=TE ID=41&43 SUM=31@AppuRhDfppuRhVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=41 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=43 SUM=32@TFX@/BRANCH@=F
  @BRANCH MARK=TE ID=41&42 SUM=31@SlatUseFPPU == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=41 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=42 SUM=32@TTF@/BRANCH@=F@/POPUP@@/ALT@;
   IntSlatSurfAngleVal = (@POPUP@@POPUP@SlatUseFPPU@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=45 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=46 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@SlatUseAPPU@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=47 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=48 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=49&51 SUM=31@SlatUseFPPU@/BRANCH@ needs
      @BRANCH MARK=TE ID=49 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=51 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=50&51 SUM=31@SlatUseAPPU@/BRANCH@ needs
      @BRANCH MARK=TE ID=50 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=51 SUM=32@FF@/BRANCH@=F@/POPUP@);
   @COMMENT@/* use input values from last cycle to synchronize with data from wrapped back label */@/COMMENT@
   SlatFPPU = Fppu;
   APPUMid = (AppuLhDfppuLh + AppuRhDfppuRh) / AOM_PPUMID;

   @COMMENT@/* Calculate SAPs */@/COMMENT@
   @ALT@IntSlatRetract =    (    (SlatUseFPPU EQ TRUE)@-ALT@
IntSlatRetract =    @POPUP@(    (@POPUP@SlatUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=52 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=53 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                        @ALT@AND (SlatFPPU LE AOM_SLAT_FPPU_THRESH_RETRACT)@-ALT@&& (@POPUP@SlatFPPU <= 1308L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=54 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=55 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                    @ALT@OR (    (SlatUseAPPU EQ TRUE)@-ALT@
|| (    (@POPUP@SlatUseAPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=56 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=57 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                        @ALT@AND (APPUMid LE AOM_SLAT_FPPU_THRESH_RETRACT)@-ALT@&& (@POPUP@APPUMid <= 1308L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=58 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=59 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=60&65|60&66 SUM=31@SlatUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=60 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=65 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=60 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=66 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=60&63|60&64 SUM=31@SlatFPPU <= 1308L@/BRANCH@ needs
      @BRANCH MARK=TE ID=60 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=63 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=60 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=64 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=61&64|62&66 SUM=31@SlatUseAPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=61 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=64 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=62 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=66 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=61&63|62&65 SUM=31@APPUMid <= 1308L@/BRANCH@ needs
      @BRANCH MARK=TE ID=61 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=63 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=62 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=65 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntSlatGTorEQC1to3 =    (    (SlatUseFPPU EQ TRUE)@-ALT@
IntSlatGTorEQC1to3 =    @POPUP@(    (@POPUP@SlatUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=67 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=68 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                            @ALT@AND (SlatFPPU GE AOM_SLAT_FPPU_THRESH_C1TO3)@-ALT@&& (@POPUP@SlatFPPU >= 15816L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=69 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=70 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                        @ALT@OR (    (SlatUseAPPU EQ TRUE)@-ALT@
|| (    (@POPUP@SlatUseAPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=71 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=72 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                            @ALT@AND (APPUMid GE AOM_SLAT_FPPU_THRESH_C1TO3)@-ALT@&& (@POPUP@APPUMid >= 15816L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=73 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=74 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=75&80|75&81 SUM=31@SlatUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=75 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=80 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=75 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=81 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=75&78|75&79 SUM=31@SlatFPPU >= 15816L@/BRANCH@ needs
      @BRANCH MARK=TE ID=75 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=78 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=75 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=79 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=76&79|77&81 SUM=31@SlatUseAPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=76 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=79 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=77 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=81 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=76&78|77&80 SUM=31@APPUMid >= 15816L@/BRANCH@ needs
      @BRANCH MARK=TE ID=76 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=78 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=77 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=80 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntSlatGTorEQ3SorFull =    (    (SlatUseFPPU EQ TRUE)@-ALT@
IntSlatGTorEQ3SorFull =    @POPUP@(    (@POPUP@SlatUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=82 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=83 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                               @ALT@AND (SlatFPPU GE AOM_SLAT_FPPU_THRESH_C3SORFULL)@-ALT@&& (@POPUP@SlatFPPU >= 21273L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=84 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=85 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                           @ALT@OR (    (SlatUseAPPU EQ TRUE)@-ALT@
|| (    (@POPUP@SlatUseAPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=86 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=87 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                               @ALT@AND (APPUMid GE AOM_SLAT_FPPU_THRESH_C3SORFULL)@-ALT@&& (@POPUP@APPUMid >= 21273L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=88 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=89 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=90&95|90&96 SUM=31@SlatUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=90 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=95 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=90 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=96 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=90&93|90&94 SUM=31@SlatFPPU >= 21273L@/BRANCH@ needs
      @BRANCH MARK=TE ID=90 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=93 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=90 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=94 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=91&94|92&96 SUM=31@SlatUseAPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=91 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=94 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=92 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=96 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=91&93|92&95 SUM=31@APPUMid >= 21273L@/BRANCH@ needs
      @BRANCH MARK=TE ID=91 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=93 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=92 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=95 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @COMMENT@/* Calculate IntSlatSurfAngle */@/COMMENT@
   @ALT@if (SlatUseFPPU EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=32|33@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=33 SUM=21@implicit else@/BRANCH@@/POPUP@ (@POPUP@SlatUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=97 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=98 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
   @BRANCH MARK=TB ID=32 SUM=20@{
      IntSlatSurfAngle = SlatFPPU * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                         AOM_SLAT_SURFANGLE_NUMERATOR / AOM_SLAT_SURFANGLE_DENOMINATOR;
   }@/BRANCH@@/DECISION@
   @ALT@if (SlatUseAPPU EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=34|35@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=35 SUM=21@implicit else@/BRANCH@@/POPUP@ (@POPUP@SlatUseAPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=99 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=100 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
   @BRANCH MARK=TB ID=34 SUM=20@{
      IntSlatSurfAngle = APPUMid * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                         AOM_SLAT_SURFANGLE_NUMERATOR / AOM_SLAT_SURFANGLE_DENOMINATOR;
   }@/BRANCH@@/DECISION@

   @BRANCH MARK=TA ID=51 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTSLATRETRACT, IntSlatRetract)@/BRANCH@;
   @BRANCH MARK=TA ID=52 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTSLATGTOREQC1TO3, IntSlatGTorEQC1to3)@/BRANCH@;
   @BRANCH MARK=TA ID=53 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTSLATGTOREQ3SORFULL, IntSlatGTorEQ3SorFull)@/BRANCH@;
   @BRANCH MARK=TA ID=54 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTSLATSURFANGLE, IntSlatSurfAngle)@/BRANCH@;
   @BRANCH MARK=TA ID=55 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTSLATSURFANGLEVAL, IntSlatSurfAngleVal)@/BRANCH@;

   @COMMENT@/* update inputs for usage in next cycle */@/COMMENT@
   Fppu             = Fppu_A;
   AppuLhDfppuLh    = AppuLhDfppuLh_A;
   AppuRhDfppuRh    = AppuRhDfppuRh_A;
   FppuVal          = FppuVal_A;
   AppuLhDfppuLhVal = AppuLhDfppuLhVal_A;
   AppuRhDfppuRhVal = AppuRhDfppuRhVal_A;
   FppuDiscFail     = FppuDiscFail_A;
}@/BRANCH@@/NODE@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
void @NODE TYPE=FUNCTION NAME="AOM_Get_Slat_Inputs"@@LINK NAME="AOM_Get_Slat_Inputs"@AOM_Get_Slat_Inputs( void )
@BRANCH MARK=TB ID=37 SUM=20@{
   @COMMENT@/* Get synchronous inputs from 6ms slot for usage in next cycle */@/COMMENT@
   Fppu_A             = DPR_Ptr_From_A->x_2ms0ms.Fppu;
   AppuLhDfppuLh_A    = DPR_Ptr_From_A->x_2ms0ms.AppuLh;
   AppuRhDfppuRh_A    = DPR_Ptr_From_A->x_2ms0ms.AppuRh;
   FppuVal_A          = @BRANCH MARK=TA ID=56 SUM=10@@JUMP NAME="DPX_Get_FPPUVal"@DPX_Get_FPPUVal@/JUMP@()@/BRANCH@;
   AppuLhDfppuLhVal_A = @BRANCH MARK=TA ID=57 SUM=10@@JUMP NAME="DPX_Get_AppuLhVal"@DPX_Get_AppuLhVal@/JUMP@()@/BRANCH@;
   AppuRhDfppuRhVal_A = @BRANCH MARK=TA ID=58 SUM=10@@JUMP NAME="DPX_Get_AppuRhVal"@DPX_Get_AppuRhVal@/JUMP@()@/BRANCH@;
   FppuDiscFail_A     = (boolean)@BRANCH MARK=TA ID=59 SUM=10@@JUMP NAME="DMA_Get"@DMA_Get@/JUMP@(DML_SLATFPPUDISCFAIL)@/BRANCH@;
}@/BRANCH@@/NODE@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
static void @NODE TYPE=FUNCTION NAME="AOM_CalculateFlapIBInternals"@@LINK NAME="AOM_CalculateFlapIBInternals"@AOM_CalculateFlapIBInternals(
   @COMMENT@/* IN */@/COMMENT@ TYP_Aircraft_Type OpMode )
@BRANCH MARK=TB ID=76 SUM=20@{
   boolean FlapIBUseFPPU = FALSE;
   boolean FlapIBUseSPPU = FALSE;
   int32 FlapFPPU = 0L;
   int32 S2PPUMid = 0L;

   @COMMENT@/* calculate internal signals */@/COMMENT@
   @ALT@FlapIBUseFPPU =     (FppuVal EQ TRUE)@-ALT@
FlapIBUseFPPU =     @POPUP@(@POPUP@FppuVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=101 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=102 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                   @ALT@AND (FppuDiscFail EQ FALSE)@-ALT@
&& (@POPUP@FppuDiscFail == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=103 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=104 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                   @ALT@AND (   (FlapSystemAsymmetry EQ FALSE)@-ALT@
&& (   (@POPUP@FlapSystemAsymmetry == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=105 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=106 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                        @ALT@OR (    (RL111_XCC_FlapSystemAsymmetry EQ FALSE)@-ALT@
|| (    (@POPUP@RL111_XCC_FlapSystemAsymmetry == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=107 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=108 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                            @ALT@AND (XCCL111Val EQ TRUE)@-ALT@
&& (@POPUP@XCCL111Val == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=109 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=110 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                           )
                       )@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=111&116|112&116 SUM=31@FppuVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=111 SUM=32@TTTXX@/BRANCH@=T,@BRANCH MARK=TE ID=116 SUM=32@FXXXX@/BRANCH@=F
   or @BRANCH MARK=TE ID=112 SUM=32@TTFTT@/BRANCH@=T,@BRANCH MARK=TE ID=116 SUM=32@FXXXX@/BRANCH@=F
  @BRANCH MARK=TE ID=111&115|112&115 SUM=31@FppuDiscFail == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=111 SUM=32@TTTXX@/BRANCH@=T,@BRANCH MARK=TE ID=115 SUM=32@TFXXX@/BRANCH@=F
   or @BRANCH MARK=TE ID=112 SUM=32@TTFTT@/BRANCH@=T,@BRANCH MARK=TE ID=115 SUM=32@TFXXX@/BRANCH@=F
  @BRANCH MARK=TE ID=111&113|111&114 SUM=31@FlapSystemAsymmetry == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=111 SUM=32@TTTXX@/BRANCH@=T,@BRANCH MARK=TE ID=113 SUM=32@TTFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=111 SUM=32@TTTXX@/BRANCH@=T,@BRANCH MARK=TE ID=114 SUM=32@TTFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=112&114 SUM=31@RL111_XCC_FlapSystemAsymmetry == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=112 SUM=32@TTFTT@/BRANCH@=T,@BRANCH MARK=TE ID=114 SUM=32@TTFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=112&113 SUM=31@XCCL111Val == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=112 SUM=32@TTFTT@/BRANCH@=T,@BRANCH MARK=TE ID=113 SUM=32@TTFTF@/BRANCH@=F@/POPUP@;
   @ALT@FlapIBUseSPPU =     (S2ppuLhVal EQ TRUE)@-ALT@
FlapIBUseSPPU =     @POPUP@(@POPUP@S2ppuLhVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=117 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=118 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                   @ALT@AND (S2ppuRhVal EQ TRUE)@-ALT@
&& (@POPUP@S2ppuRhVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=119 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=120 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                   @ALT@AND (FlapIBUseFPPU EQ FALSE)@-ALT@&& (@POPUP@FlapIBUseFPPU == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=121 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=122 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=123&126 SUM=31@S2ppuLhVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=123 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=126 SUM=32@FXX@/BRANCH@=F
  @BRANCH MARK=TE ID=123&125 SUM=31@S2ppuRhVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=123 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=125 SUM=32@TFX@/BRANCH@=F
  @BRANCH MARK=TE ID=123&124 SUM=31@FlapIBUseFPPU == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=123 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=124 SUM=32@TTF@/BRANCH@=F@/POPUP@@/ALT@;
   IntFlapIBSurfAngleVal = (@POPUP@@POPUP@FlapIBUseFPPU@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=127 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=128 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@FlapIBUseSPPU@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=129 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=130 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=131&133 SUM=31@FlapIBUseFPPU@/BRANCH@ needs
      @BRANCH MARK=TE ID=131 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=133 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=132&133 SUM=31@FlapIBUseSPPU@/BRANCH@ needs
      @BRANCH MARK=TE ID=132 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=133 SUM=32@FF@/BRANCH@=F@/POPUP@);
   @COMMENT@/* use input values from last cycle to synchronize with data from wrapped back label */@/COMMENT@
   FlapFPPU = Fppu;
   S2PPUMid = (S2ppuLh + S2ppuRh) / AOM_PPUMID;

   @COMMENT@/* Calculate FAPs */@/COMMENT@
   @ALT@IntFlapIBRetract =    (    (FlapIBUseFPPU EQ TRUE)@-ALT@
IntFlapIBRetract =    @POPUP@(    (@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=134 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=135 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                          @ALT@AND (FlapFPPU LE AOM_IB_FPPU_RETRACT)@-ALT@&& (@POPUP@FlapFPPU <= AOM_IB_FPPU_RETRACT@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=136 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=137 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                      @ALT@OR (    (FlapIBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapIBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=138 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=139 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                          @ALT@AND (S2PPUMid LE AOM_IB_SPPU_RETRACT)@-ALT@&& (@POPUP@S2PPUMid <= AOM_IB_SPPU_RETRACT@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=140 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=141 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=142&147|142&148 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=142 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=147 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=142 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=148 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=142&145|142&146 SUM=31@FlapFPPU <= AOM_IB_FPPU_RETRACT@/BRANCH@ needs
      @BRANCH MARK=TE ID=142 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=145 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=142 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=146 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=143&146|144&148 SUM=31@FlapIBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=143 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=146 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=144 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=148 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=143&145|144&147 SUM=31@S2PPUMid <= AOM_IB_SPPU_RETRACT@/BRANCH@ needs
      @BRANCH MARK=TE ID=143 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=145 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=144 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=147 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntFlapIBGTorEQC1F_DFS =    (    (FlapIBUseFPPU EQ TRUE)@-ALT@
IntFlapIBGTorEQC1F_DFS =    @POPUP@(    (@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=149 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=150 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                                @ALT@AND (FlapFPPU GE AOM_IB_FPPU_C1F_DFS)@-ALT@&& (@POPUP@FlapFPPU >= AOM_IB_FPPU_C1F_DFS@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=151 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=152 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                            @ALT@OR (    (FlapIBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapIBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=153 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=154 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                                @ALT@AND (S2PPUMid GE AOM_IB_SPPU_C1F_DFS)@-ALT@&& (@POPUP@S2PPUMid >= AOM_IB_SPPU_C1F_DFS@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=155 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=156 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=157&162|157&163 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=157 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=162 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=157 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=163 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=157&160|157&161 SUM=31@FlapFPPU >= AOM_IB_FPPU_C1F_DFS@/BRANCH@ needs
      @BRANCH MARK=TE ID=157 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=160 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=157 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=161 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=158&161|159&163 SUM=31@FlapIBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=158 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=161 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=159 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=163 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=158&160|159&162 SUM=31@S2PPUMid >= AOM_IB_SPPU_C1F_DFS@/BRANCH@ needs
      @BRANCH MARK=TE ID=158 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=160 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=159 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=162 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntFlapIBGTorEQC1F_ALT =    (    (FlapIBUseFPPU EQ TRUE)@-ALT@
IntFlapIBGTorEQC1F_ALT =    @POPUP@(    (@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=164 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=165 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                                @ALT@AND (FlapFPPU GE AOM_IB_FPPU_C1F_ALT)@-ALT@&& (@POPUP@FlapFPPU >= AOM_IB_FPPU_C1F_ALT@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=166 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=167 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                            @ALT@OR (    (FlapIBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapIBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=168 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=169 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                                @ALT@AND (S2PPUMid GE AOM_IB_SPPU_C1F_ALT)@-ALT@&& (@POPUP@S2PPUMid >= AOM_IB_SPPU_C1F_ALT@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=170 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=171 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=172&177|172&178 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=172 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=177 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=172 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=178 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=172&175|172&176 SUM=31@FlapFPPU >= AOM_IB_FPPU_C1F_ALT@/BRANCH@ needs
      @BRANCH MARK=TE ID=172 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=175 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=172 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=176 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=173&176|174&178 SUM=31@FlapIBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=173 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=176 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=174 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=178 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=173&175|174&177 SUM=31@S2PPUMid >= AOM_IB_SPPU_C1F_ALT@/BRANCH@ needs
      @BRANCH MARK=TE ID=173 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=175 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=174 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=177 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntFlapIBGTorEQC2 =    (    (FlapIBUseFPPU EQ TRUE)@-ALT@
IntFlapIBGTorEQC2 =    @POPUP@(    (@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=179 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=180 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                           @ALT@AND (FlapFPPU GE AOM_IB_FPPU_C2)@-ALT@&& (@POPUP@FlapFPPU >= AOM_IB_FPPU_C2@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=181 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=182 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                       @ALT@OR (    (FlapIBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapIBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=183 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=184 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                           @ALT@AND (S2PPUMid GE AOM_IB_SPPU_C2)@-ALT@&& (@POPUP@S2PPUMid >= AOM_IB_SPPU_C2@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=185 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=186 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=187&192|187&193 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=187 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=192 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=187 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=193 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=187&190|187&191 SUM=31@FlapFPPU >= AOM_IB_FPPU_C2@/BRANCH@ needs
      @BRANCH MARK=TE ID=187 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=190 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=187 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=191 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=188&191|189&193 SUM=31@FlapIBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=188 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=191 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=189 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=193 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=188&190|189&192 SUM=31@S2PPUMid >= AOM_IB_SPPU_C2@/BRANCH@ needs
      @BRANCH MARK=TE ID=188 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=190 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=189 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=192 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntFlapIBGTorEQC3 =    (    (FlapIBUseFPPU EQ TRUE)@-ALT@
IntFlapIBGTorEQC3 =    @POPUP@(    (@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=194 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=195 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                           @ALT@AND (FlapFPPU GE AOM_IB_FPPU_C3)@-ALT@&& (@POPUP@FlapFPPU >= AOM_IB_FPPU_C3@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=196 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=197 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                       @ALT@OR (    (FlapIBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapIBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=198 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=199 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                           @ALT@AND (S2PPUMid GE AOM_IB_SPPU_C3)@-ALT@&& (@POPUP@S2PPUMid >= AOM_IB_SPPU_C3@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=200 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=201 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=202&207|202&208 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=202 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=207 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=202 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=208 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=202&205|202&206 SUM=31@FlapFPPU >= AOM_IB_FPPU_C3@/BRANCH@ needs
      @BRANCH MARK=TE ID=202 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=205 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=202 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=206 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=203&206|204&208 SUM=31@FlapIBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=203 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=206 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=204 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=208 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=203&205|204&207 SUM=31@S2PPUMid >= AOM_IB_SPPU_C3@/BRANCH@ needs
      @BRANCH MARK=TE ID=203 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=205 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=204 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=207 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntFlapIBGTorEQFull =    (    (FlapIBUseFPPU EQ TRUE)@-ALT@
IntFlapIBGTorEQFull =    @POPUP@(    (@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=209 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=210 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                             @ALT@AND (FlapFPPU GE AOM_IB_FPPU_CFULL)@-ALT@&& (@POPUP@FlapFPPU >= AOM_IB_FPPU_CFULL@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=211 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=212 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                         @ALT@OR (    (FlapIBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapIBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=213 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=214 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                             @ALT@AND (S2PPUMid GE AOM_IB_SPPU_CFULL)@-ALT@&& (@POPUP@S2PPUMid >= AOM_IB_SPPU_CFULL@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=215 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=216 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=217&222|217&223 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=217 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=222 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=217 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=223 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=217&220|217&221 SUM=31@FlapFPPU >= AOM_IB_FPPU_CFULL@/BRANCH@ needs
      @BRANCH MARK=TE ID=217 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=220 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=217 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=221 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=218&221|219&223 SUM=31@FlapIBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=218 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=221 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=219 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=223 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=218&220|219&222 SUM=31@S2PPUMid >= AOM_IB_SPPU_CFULL@/BRANCH@ needs
      @BRANCH MARK=TE ID=218 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=220 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=219 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=222 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @DECISION SUM=20+21 ID=58|75@if (@POPUP@OpMode EQ A350_1000@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=224 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=225 SUM=30@False@/BRANCH@@/POPUP@)
   @BRANCH MARK=TB ID=58 SUM=20@{
      @COMMENT@/* Calculate IntFlapIBSurfAngle */@/COMMENT@
      @ALT@if (    (FlapIBUseFPPU EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=38|49@if (    @POPUP@(@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=226 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=227 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
          @ALT@AND (FlapFPPU LT AOM_65DEG)@-ALT@&& (@POPUP@FlapFPPU < 5917L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=228 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=229 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=230&232 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=230 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=232 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=230&231 SUM=31@FlapFPPU < 5917L@/BRANCH@ needs
      @BRANCH MARK=TE ID=230 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=231 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=38 SUM=20@{
         IntFlapIBSurfAngle = (FlapFPPU * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                               AOM_65DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_65DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (    (FlapIBUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=49 SUM=20@else @DECISION SUM=20+21 ID=39|48@if (    @POPUP@(@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=233 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=234 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (FlapFPPU LT AOM_140DEG)@-ALT@&& (@POPUP@FlapFPPU < 12744L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=235 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=236 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=237&239 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=237 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=239 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=237&238 SUM=31@FlapFPPU < 12744L@/BRANCH@ needs
      @BRANCH MARK=TE ID=237 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=238 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=39 SUM=20@{
         IntFlapIBSurfAngle = (FlapFPPU * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                               AOM_140DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_140DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (    (FlapIBUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=48 SUM=20@else @DECISION SUM=20+21 ID=40|47@if (    @POPUP@(@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=240 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=241 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (FlapFPPU LT AOM_220DEG)@-ALT@&& (@POPUP@FlapFPPU < 20025L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=242 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=243 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=244&246 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=244 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=246 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=244&245 SUM=31@FlapFPPU < 20025L@/BRANCH@ needs
      @BRANCH MARK=TE ID=244 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=245 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=40 SUM=20@{
         IntFlapIBSurfAngle = (FlapFPPU * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                               AOM_220DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_220DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (    (FlapIBUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=47 SUM=20@else @DECISION SUM=20+21 ID=41|46@if (    @POPUP@(@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=247 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=248 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (FlapFPPU LT AOM_280DEG)@-ALT@&& (@POPUP@FlapFPPU < 25487L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=249 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=250 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=251&253 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=251 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=253 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=251&252 SUM=31@FlapFPPU < 25487L@/BRANCH@ needs
      @BRANCH MARK=TE ID=251 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=252 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=41 SUM=20@{
         IntFlapIBSurfAngle = (FlapFPPU * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                               AOM_280DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_280DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (FlapIBUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=46 SUM=20@else @DECISION SUM=20+21 ID=42|45@if (@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=254 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=255 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=42 SUM=20@{
         IntFlapIBSurfAngle = (FlapFPPU * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                               AOM_360DEG_IB_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_IB_OFFSET_SURF_100;
      }@/BRANCH@
      @BRANCH MARK=TB ID=45 SUM=20@else
      {
         @ALT@if (FlapIBUseSPPU EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=43|44@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=44 SUM=21@implicit else@/BRANCH@@/POPUP@ (@POPUP@FlapIBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=256 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=257 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
         @BRANCH MARK=TB ID=43 SUM=20@{
            IntFlapIBSurfAngle = (S2PPUMid * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                  AOM_S2PPU_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_S2PPU_OFFSET_SURF_100;
         }@/BRANCH@@/DECISION@
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@

      @COMMENT@/* Calculate IntFlapCommSurfAngle */@/COMMENT@
      @ALT@if (Ctp LT AOM_65DEG)@-ALT@
@DECISION SUM=20+21 ID=50|57@if (@POPUP@Ctp < 5917L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=258 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=259 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=50 SUM=20@{
         IntFlapCommSurfAngle = (Ctp * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_65DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_65DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (Ctp LT AOM_140DEG)@-ALT@
@BRANCH MARK=TB ID=57 SUM=20@else @DECISION SUM=20+21 ID=51|56@if (@POPUP@Ctp < 12744L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=260 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=261 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=51 SUM=20@{
         IntFlapCommSurfAngle = (Ctp * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_140DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_140DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (Ctp LT AOM_220DEG)@-ALT@
@BRANCH MARK=TB ID=56 SUM=20@else @DECISION SUM=20+21 ID=52|55@if (@POPUP@Ctp < 20025L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=262 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=263 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=52 SUM=20@{
         IntFlapCommSurfAngle = (Ctp * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_220DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_220DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (Ctp LT AOM_280DEG)@-ALT@
@BRANCH MARK=TB ID=55 SUM=20@else @DECISION SUM=20+21 ID=53|54@if (@POPUP@Ctp < 25487L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=264 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=265 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=53 SUM=20@{
         IntFlapCommSurfAngle = (Ctp * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_280DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_280DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @BRANCH MARK=TB ID=54 SUM=20@else
      {
         IntFlapCommSurfAngle = (Ctp * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_360DEG_IB_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_IB_OFFSET_SURF_100;
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@
   }@/BRANCH@
   @BRANCH MARK=TB ID=75 SUM=20@else @COMMENT@/* OpMode 80 or 90 */@/COMMENT@
   {
      @COMMENT@/* Calculate IntFlapIBSurfAngle */@/COMMENT@
      @ALT@if (    (FlapIBUseFPPU EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=59|68@if (    @POPUP@(@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=266 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=267 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
          @ALT@AND (FlapFPPU LT AOM_70DEG)@-ALT@&& (@POPUP@FlapFPPU < 6372L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=268 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=269 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=270&272 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=270 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=272 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=270&271 SUM=31@FlapFPPU < 6372L@/BRANCH@ needs
      @BRANCH MARK=TE ID=270 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=271 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=59 SUM=20@{
         IntFlapIBSurfAngle = (FlapFPPU * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                               AOM_70DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_70DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (    (FlapIBUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=68 SUM=20@else @DECISION SUM=20+21 ID=60|67@if (    @POPUP@(@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=273 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=274 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (FlapFPPU LT AOM_240DEG)@-ALT@&& (@POPUP@FlapFPPU < 21846L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=275 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=276 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=277&279 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=277 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=279 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=277&278 SUM=31@FlapFPPU < 21846L@/BRANCH@ needs
      @BRANCH MARK=TE ID=277 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=278 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=60 SUM=20@{
         IntFlapIBSurfAngle = (FlapFPPU * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                               AOM_240DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_240DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (    (FlapIBUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=67 SUM=20@else @DECISION SUM=20+21 ID=61|66@if (    @POPUP@(@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=280 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=281 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (FlapFPPU LT AOM_300DEG)@-ALT@&& (@POPUP@FlapFPPU < 27307L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=282 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=283 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=284&286 SUM=31@FlapIBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=284 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=286 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=284&285 SUM=31@FlapFPPU < 27307L@/BRANCH@ needs
      @BRANCH MARK=TE ID=284 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=285 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=61 SUM=20@{
         IntFlapIBSurfAngle = (FlapFPPU * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                               AOM_300DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_300DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (FlapIBUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=66 SUM=20@else @DECISION SUM=20+21 ID=62|65@if (@POPUP@FlapIBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=287 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=288 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=62 SUM=20@{
         IntFlapIBSurfAngle = (FlapFPPU * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                               AOM_360DEG_IB_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_IB_OFFSET_SURF_80_90;
      }@/BRANCH@
      @BRANCH MARK=TB ID=65 SUM=20@else
      {
         @ALT@if (FlapIBUseSPPU EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=63|64@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=64 SUM=21@implicit else@/BRANCH@@/POPUP@ (@POPUP@FlapIBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=289 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=290 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
         @BRANCH MARK=TB ID=63 SUM=20@{
            IntFlapIBSurfAngle = (S2PPUMid * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                  AOM_S2PPU_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_S2PPU_OFFSET_SURF_80_90;
         }@/BRANCH@@/DECISION@
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@

      @COMMENT@/* Calculate IntFlapCommSurfAngle */@/COMMENT@
      @ALT@if (Ctp LT AOM_70DEG)@-ALT@
@DECISION SUM=20+21 ID=69|74@if (@POPUP@Ctp < 6372L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=291 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=292 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=69 SUM=20@{
         IntFlapCommSurfAngle = (Ctp * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_70DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_70DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (Ctp LT AOM_240DEG)@-ALT@
@BRANCH MARK=TB ID=74 SUM=20@else @DECISION SUM=20+21 ID=70|73@if (@POPUP@Ctp < 21846L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=293 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=294 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=70 SUM=20@{
         IntFlapCommSurfAngle = (Ctp * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_240DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_240DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (Ctp LT AOM_300DEG)@-ALT@
@BRANCH MARK=TB ID=73 SUM=20@else @DECISION SUM=20+21 ID=71|72@if (@POPUP@Ctp < 27307L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=295 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=296 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=71 SUM=20@{
         IntFlapCommSurfAngle = (Ctp * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_300DEG_IB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_300DEG_IB_OFFSET_SURF;
      }@/BRANCH@
      @BRANCH MARK=TB ID=72 SUM=20@else
      {
         IntFlapCommSurfAngle = (Ctp * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_360DEG_IB_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_IB_OFFSET_SURF_80_90;
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@
   }@/BRANCH@@/DECISION@

   @COMMENT@/* limit the output range */@/COMMENT@
   IntFlapIBSurfAngle   = @BRANCH MARK=TA ID=60 SUM=10@@JUMP NAME="LIB_Limit"@LIB_Limit@/JUMP@(AOM_FLAP_IB_SURF_MIN, AOM_FLAP_IB_SURF_MAX, IntFlapIBSurfAngle)@/BRANCH@;
   IntFlapCommSurfAngle = @BRANCH MARK=TA ID=61 SUM=10@@JUMP NAME="LIB_Limit"@LIB_Limit@/JUMP@(AOM_FLAP_IB_SURF_MIN, AOM_FLAP_IB_SURF_MAX, IntFlapCommSurfAngle)@/BRANCH@;

   @BRANCH MARK=TA ID=62 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPIBRETRACT, IntFlapIBRetract)@/BRANCH@;
   @BRANCH MARK=TA ID=63 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPIBGTOREQC1F_DFS, IntFlapIBGTorEQC1F_DFS)@/BRANCH@;
   @BRANCH MARK=TA ID=64 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPIBGTOREQC1F_ALT, IntFlapIBGTorEQC1F_ALT)@/BRANCH@;
   @BRANCH MARK=TA ID=65 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPIBGTOREQC2, IntFlapIBGTorEQC2)@/BRANCH@;
   @BRANCH MARK=TA ID=66 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPIBGTOREQC3, IntFlapIBGTorEQC3)@/BRANCH@;
   @BRANCH MARK=TA ID=67 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPIBGTOREQFULL, IntFlapIBGTorEQFull)@/BRANCH@;
   @BRANCH MARK=TA ID=68 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPIBSURFANGLE, IntFlapIBSurfAngle)@/BRANCH@;
   @BRANCH MARK=TA ID=69 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPIBSURFANGLEVAL, IntFlapIBSurfAngleVal)@/BRANCH@;
   @BRANCH MARK=TA ID=70 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPCOMMSURFANGLE, IntFlapCommSurfAngle)@/BRANCH@;
}@/BRANCH@@/NODE@
@COMMENT@/* QA C (4700): STCYC - Justified due to all internal surface angle calculations need to be performed */@/COMMENT@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
static void @NODE TYPE=FUNCTION NAME="AOM_CalculateFlapOBInternals"@@LINK NAME="AOM_CalculateFlapOBInternals"@AOM_CalculateFlapOBInternals(
   @COMMENT@/* IN */@/COMMENT@ TYP_Aircraft_Type OpMode )
@BRANCH MARK=TB ID=157 SUM=20@{
   boolean FlapLHUseFPPU = FALSE;
   boolean FlapRHUseFPPU = FALSE;
   boolean FlapOBUseFPPU = FALSE;
   boolean FlapOBUseSPPU = FALSE;
   int32 FlapFPPU = 0L;
   int32 ActPosLH = 0L;
   int32 ActPosRH = 0L;
   int32 S4PPUMid = 0L;
   int32 ActPosMid = 0L;

   @COMMENT@/* calculate internal signals */@/COMMENT@
   @ALT@if (    (FppuVal EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=81|82@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=82 SUM=21@implicit else@/BRANCH@@/POPUP@ (    @POPUP@(@POPUP@FppuVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=297 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=298 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
       @ALT@AND (FppuDiscFail EQ FALSE)@-ALT@
&& (@POPUP@FppuDiscFail == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=299 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=300 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
       @ALT@AND (   (FlapSystemAsymmetry EQ FALSE)@-ALT@
&& (   (@POPUP@FlapSystemAsymmetry == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=301 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=302 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
            @ALT@OR (    (RL111_XCC_FlapSystemAsymmetry EQ FALSE)@-ALT@
|| (    (@POPUP@RL111_XCC_FlapSystemAsymmetry == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=303 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=304 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                @ALT@AND (XCCL111Val EQ TRUE)@-ALT@
&& (@POPUP@XCCL111Val == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=305 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=306 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               )
           )@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=307&312|308&312 SUM=31@FppuVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=307 SUM=32@TTTXX@/BRANCH@=T,@BRANCH MARK=TE ID=312 SUM=32@FXXXX@/BRANCH@=F
   or @BRANCH MARK=TE ID=308 SUM=32@TTFTT@/BRANCH@=T,@BRANCH MARK=TE ID=312 SUM=32@FXXXX@/BRANCH@=F
  @BRANCH MARK=TE ID=307&311|308&311 SUM=31@FppuDiscFail == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=307 SUM=32@TTTXX@/BRANCH@=T,@BRANCH MARK=TE ID=311 SUM=32@TFXXX@/BRANCH@=F
   or @BRANCH MARK=TE ID=308 SUM=32@TTFTT@/BRANCH@=T,@BRANCH MARK=TE ID=311 SUM=32@TFXXX@/BRANCH@=F
  @BRANCH MARK=TE ID=307&309|307&310 SUM=31@FlapSystemAsymmetry == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=307 SUM=32@TTTXX@/BRANCH@=T,@BRANCH MARK=TE ID=309 SUM=32@TTFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=307 SUM=32@TTTXX@/BRANCH@=T,@BRANCH MARK=TE ID=310 SUM=32@TTFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=308&310 SUM=31@RL111_XCC_FlapSystemAsymmetry == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=308 SUM=32@TTFTT@/BRANCH@=T,@BRANCH MARK=TE ID=310 SUM=32@TTFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=308&309 SUM=31@XCCL111Val == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=308 SUM=32@TTFTT@/BRANCH@=T,@BRANCH MARK=TE ID=309 SUM=32@TTFTF@/BRANCH@=F@/POPUP@
      )
   @BRANCH MARK=TB ID=81 SUM=20@{
      @ALT@if (AppuLhDfppuLhVal EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=77|78@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=78 SUM=21@implicit else@/BRANCH@@/POPUP@ (@POPUP@AppuLhDfppuLhVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=313 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=314 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=77 SUM=20@{
         FlapLHUseFPPU = TRUE;
      }@/BRANCH@@/DECISION@
      @ALT@if (AppuRhDfppuRhVal EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=79|80@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=80 SUM=21@implicit else@/BRANCH@@/POPUP@ (@POPUP@AppuRhDfppuRhVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=315 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=316 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=79 SUM=20@{
         FlapRHUseFPPU = TRUE;
      }@/BRANCH@@/DECISION@
   }@/BRANCH@@/DECISION@

   @ALT@IntFlapLHOBSurfAngleVal =    (FlapLHUseFPPU EQ TRUE)@-ALT@
IntFlapLHOBSurfAngleVal =    @POPUP@(@POPUP@FlapLHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=317 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=318 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                             @ALT@OR (S4ppuLhVal EQ TRUE)@-ALT@|| (@POPUP@S4ppuLhVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=319 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=320 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=321&323 SUM=31@FlapLHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=321 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=323 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=322&323 SUM=31@S4ppuLhVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=322 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=323 SUM=32@FF@/BRANCH@=F@/POPUP@@/ALT@;
   @ALT@IntFlapRHOBSurfAngleVal =    (FlapRHUseFPPU EQ TRUE)@-ALT@
IntFlapRHOBSurfAngleVal =    @POPUP@(@POPUP@FlapRHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=324 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=325 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                             @ALT@OR (S4ppuRhVal EQ TRUE)@-ALT@|| (@POPUP@S4ppuRhVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=326 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=327 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=328&330 SUM=31@FlapRHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=328 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=330 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=329&330 SUM=31@S4ppuRhVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=329 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=330 SUM=32@FF@/BRANCH@=F@/POPUP@@/ALT@;
   FlapOBUseFPPU = (@POPUP@@POPUP@FlapLHUseFPPU@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=331 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=332 SUM=30@False@/BRANCH@@/POPUP@ AND @POPUP@FlapRHUseFPPU@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=333 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=334 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=335&337 SUM=31@FlapLHUseFPPU@/BRANCH@ needs
      @BRANCH MARK=TE ID=335 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=337 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=335&336 SUM=31@FlapRHUseFPPU@/BRANCH@ needs
      @BRANCH MARK=TE ID=335 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=336 SUM=32@TF@/BRANCH@=F@/POPUP@);
   @ALT@FlapOBUseSPPU =     (S4ppuLhVal EQ TRUE)@-ALT@
FlapOBUseSPPU =     @POPUP@(@POPUP@S4ppuLhVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=338 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=339 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                   @ALT@AND (S4ppuRhVal EQ TRUE)@-ALT@
&& (@POPUP@S4ppuRhVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=340 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=341 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                   @ALT@AND (FlapOBUseFPPU EQ FALSE)@-ALT@&& (@POPUP@FlapOBUseFPPU == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=342 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=343 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=344&347 SUM=31@S4ppuLhVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=344 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=347 SUM=32@FXX@/BRANCH@=F
  @BRANCH MARK=TE ID=344&346 SUM=31@S4ppuRhVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=344 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=346 SUM=32@TFX@/BRANCH@=F
  @BRANCH MARK=TE ID=344&345 SUM=31@FlapOBUseFPPU == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=344 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=345 SUM=32@TTF@/BRANCH@=F@/POPUP@@/ALT@;
   IntFlapOBSurfAngleVal = (@POPUP@@POPUP@FlapOBUseFPPU@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=348 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=349 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@FlapOBUseSPPU@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=350 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=351 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=352&354 SUM=31@FlapOBUseFPPU@/BRANCH@ needs
      @BRANCH MARK=TE ID=352 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=354 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=353&354 SUM=31@FlapOBUseSPPU@/BRANCH@ needs
      @BRANCH MARK=TE ID=353 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=354 SUM=32@FF@/BRANCH@=F@/POPUP@);
   @COMMENT@/* use input values from last cycle to synchronize with data from wrapped back label */@/COMMENT@
   FlapFPPU = Fppu;
   ActPosLH = FlapFPPU + ((AppuLhDfppuLh * AOM_GAINNF_NUMERATOR) / AOM_GAINNF_DENOMINATOR);
   ActPosRH = FlapFPPU + ((AppuRhDfppuRh * AOM_GAINNF_NUMERATOR) / AOM_GAINNF_DENOMINATOR);
   S4PPUMid = (S4ppuLh + S4ppuRh) / AOM_PPUMID;
   ActPosMid = (ActPosLH + ActPosRH) / AOM_PPUMID;

   @COMMENT@/* Calculate FAPs */@/COMMENT@
   @ALT@IntFlapOBRetract =    (    (FlapOBUseFPPU EQ TRUE)@-ALT@
IntFlapOBRetract =    @POPUP@(    (@POPUP@FlapOBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=355 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=356 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                          @ALT@AND (ActPosMid LE AOM_OB_FPPU_RETRACT)@-ALT@&& (@POPUP@ActPosMid <= AOM_OB_FPPU_RETRACT@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=357 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=358 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                      @ALT@OR (    (FlapOBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapOBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=359 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=360 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                          @ALT@AND (S4PPUMid LE AOM_OB_SPPU_RETRACT)@-ALT@&& (@POPUP@S4PPUMid <= AOM_OB_SPPU_RETRACT@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=361 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=362 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=363&368|363&369 SUM=31@FlapOBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=363 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=368 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=363 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=369 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=363&366|363&367 SUM=31@ActPosMid <= AOM_OB_FPPU_RETRACT@/BRANCH@ needs
      @BRANCH MARK=TE ID=363 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=366 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=363 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=367 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=364&367|365&369 SUM=31@FlapOBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=364 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=367 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=365 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=369 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=364&366|365&368 SUM=31@S4PPUMid <= AOM_OB_SPPU_RETRACT@/BRANCH@ needs
      @BRANCH MARK=TE ID=364 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=366 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=365 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=368 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntFlapOBGTorEQC1F_ALT =    (    (FlapOBUseFPPU EQ TRUE)@-ALT@
IntFlapOBGTorEQC1F_ALT =    @POPUP@(    (@POPUP@FlapOBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=370 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=371 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                                @ALT@AND (ActPosMid GE AOM_OB_FPPU_C1F_ALT)@-ALT@&& (@POPUP@ActPosMid >= AOM_OB_FPPU_C1F_ALT@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=372 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=373 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                            @ALT@OR (    (FlapOBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapOBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=374 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=375 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                                @ALT@AND (S4PPUMid GE AOM_OB_SPPU_C1F_ALT)@-ALT@&& (@POPUP@S4PPUMid >= AOM_OB_SPPU_C1F_ALT@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=376 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=377 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=378&383|378&384 SUM=31@FlapOBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=378 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=383 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=378 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=384 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=378&381|378&382 SUM=31@ActPosMid >= AOM_OB_FPPU_C1F_ALT@/BRANCH@ needs
      @BRANCH MARK=TE ID=378 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=381 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=378 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=382 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=379&382|380&384 SUM=31@FlapOBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=379 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=382 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=380 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=384 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=379&381|380&383 SUM=31@S4PPUMid >= AOM_OB_SPPU_C1F_ALT@/BRANCH@ needs
      @BRANCH MARK=TE ID=379 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=381 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=380 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=383 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntFlapOBGTorEQC1F_DFS =    (    (FlapOBUseFPPU EQ TRUE)@-ALT@
IntFlapOBGTorEQC1F_DFS =    @POPUP@(    (@POPUP@FlapOBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=385 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=386 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                                @ALT@AND (ActPosMid GE AOM_OB_FPPU_C1F_DFS)@-ALT@&& (@POPUP@ActPosMid >= AOM_OB_FPPU_C1F_DFS@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=387 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=388 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                            @ALT@OR (    (FlapOBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapOBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=389 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=390 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                                @ALT@AND (S4PPUMid GE AOM_OB_SPPU_C1F_DFS)@-ALT@&& (@POPUP@S4PPUMid >= AOM_OB_SPPU_C1F_DFS@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=391 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=392 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=393&398|393&399 SUM=31@FlapOBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=393 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=398 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=393 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=399 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=393&396|393&397 SUM=31@ActPosMid >= AOM_OB_FPPU_C1F_DFS@/BRANCH@ needs
      @BRANCH MARK=TE ID=393 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=396 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=393 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=397 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=394&397|395&399 SUM=31@FlapOBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=394 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=397 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=395 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=399 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=394&396|395&398 SUM=31@S4PPUMid >= AOM_OB_SPPU_C1F_DFS@/BRANCH@ needs
      @BRANCH MARK=TE ID=394 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=396 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=395 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=398 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntFlapOBGTorEQC2 =    (    (FlapOBUseFPPU EQ TRUE)@-ALT@
IntFlapOBGTorEQC2 =    @POPUP@(    (@POPUP@FlapOBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=400 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=401 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                           @ALT@AND (ActPosMid GE AOM_OB_FPPU_C2)@-ALT@&& (@POPUP@ActPosMid >= AOM_OB_FPPU_C2@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=402 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=403 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                       @ALT@OR (    (FlapOBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapOBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=404 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=405 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                           @ALT@AND (S4PPUMid GE AOM_OB_SPPU_C2)@-ALT@&& (@POPUP@S4PPUMid >= AOM_OB_SPPU_C2@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=406 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=407 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=408&413|408&414 SUM=31@FlapOBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=408 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=413 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=408 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=414 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=408&411|408&412 SUM=31@ActPosMid >= AOM_OB_FPPU_C2@/BRANCH@ needs
      @BRANCH MARK=TE ID=408 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=411 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=408 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=412 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=409&412|410&414 SUM=31@FlapOBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=409 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=412 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=410 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=414 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=409&411|410&413 SUM=31@S4PPUMid >= AOM_OB_SPPU_C2@/BRANCH@ needs
      @BRANCH MARK=TE ID=409 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=411 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=410 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=413 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntFlapOBGTorEQC3 =    (    (FlapOBUseFPPU EQ TRUE)@-ALT@
IntFlapOBGTorEQC3 =    @POPUP@(    (@POPUP@FlapOBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=415 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=416 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                           @ALT@AND (ActPosMid GE AOM_OB_FPPU_C3)@-ALT@&& (@POPUP@ActPosMid >= AOM_OB_FPPU_C3@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=417 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=418 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                       @ALT@OR (    (FlapOBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapOBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=419 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=420 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                           @ALT@AND (S4PPUMid GE AOM_OB_SPPU_C3)@-ALT@&& (@POPUP@S4PPUMid >= AOM_OB_SPPU_C3@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=421 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=422 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=423&428|423&429 SUM=31@FlapOBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=423 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=428 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=423 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=429 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=423&426|423&427 SUM=31@ActPosMid >= AOM_OB_FPPU_C3@/BRANCH@ needs
      @BRANCH MARK=TE ID=423 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=426 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=423 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=427 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=424&427|425&429 SUM=31@FlapOBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=424 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=427 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=425 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=429 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=424&426|425&428 SUM=31@S4PPUMid >= AOM_OB_SPPU_C3@/BRANCH@ needs
      @BRANCH MARK=TE ID=424 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=426 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=425 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=428 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @ALT@IntFlapOBGTorEQFull =    (    (FlapOBUseFPPU EQ TRUE)@-ALT@
IntFlapOBGTorEQFull =    @POPUP@(    (@POPUP@FlapOBUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=430 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=431 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                             @ALT@AND (ActPosMid GE AOM_OB_FPPU_CFULL)@-ALT@&& (@POPUP@ActPosMid >= AOM_OB_FPPU_CFULL@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=432 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=433 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)
                         @ALT@OR (    (FlapOBUseSPPU EQ TRUE)@-ALT@
|| (    (@POPUP@FlapOBUseSPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=434 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=435 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
                             @ALT@AND (S4PPUMid GE AOM_OB_SPPU_CFULL)@-ALT@&& (@POPUP@S4PPUMid >= AOM_OB_SPPU_CFULL@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=436 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=437 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=438&443|438&444 SUM=31@FlapOBUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=438 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=443 SUM=32@FXTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=438 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=444 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=438&441|438&442 SUM=31@ActPosMid >= AOM_OB_FPPU_CFULL@/BRANCH@ needs
      @BRANCH MARK=TE ID=438 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=441 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=438 SUM=32@TTXX@/BRANCH@=T,@BRANCH MARK=TE ID=442 SUM=32@TFFX@/BRANCH@=F
  @BRANCH MARK=TE ID=439&442|440&444 SUM=31@FlapOBUseSPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=439 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=442 SUM=32@TFFX@/BRANCH@=F
   or @BRANCH MARK=TE ID=440 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=444 SUM=32@FXFX@/BRANCH@=F
  @BRANCH MARK=TE ID=439&441|440&443 SUM=31@S4PPUMid >= AOM_OB_SPPU_CFULL@/BRANCH@ needs
      @BRANCH MARK=TE ID=439 SUM=32@TFTT@/BRANCH@=T,@BRANCH MARK=TE ID=441 SUM=32@TFTF@/BRANCH@=F
   or @BRANCH MARK=TE ID=440 SUM=32@FXTT@/BRANCH@=T,@BRANCH MARK=TE ID=443 SUM=32@FXTF@/BRANCH@=F@/POPUP@;

   @DECISION SUM=20+21 ID=123|156@if (@POPUP@OpMode EQ A350_1000@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=445 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=446 SUM=30@False@/BRANCH@@/POPUP@)
   @BRANCH MARK=TB ID=123 SUM=20@{
      @COMMENT@/* Calculate IntFlapLHOBSurfAngle */@/COMMENT@
      @ALT@if (    (FlapLHUseFPPU EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=83|94@if (    @POPUP@(@POPUP@FlapLHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=447 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=448 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
          @ALT@AND (ActPosLH LT AOM_50DEG)@-ALT@&& (@POPUP@ActPosLH < 4552L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=449 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=450 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=451&453 SUM=31@FlapLHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=451 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=453 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=451&452 SUM=31@ActPosLH < 4552L@/BRANCH@ needs
      @BRANCH MARK=TE ID=451 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=452 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=83 SUM=20@{
         IntFlapLHOBSurfAngle = (ActPosLH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_50DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_50DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (    (FlapLHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=94 SUM=20@else @DECISION SUM=20+21 ID=84|93@if (    @POPUP@(@POPUP@FlapLHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=454 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=455 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (ActPosLH LT AOM_120DEG)@-ALT@&& (@POPUP@ActPosLH < 10923L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=456 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=457 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=458&460 SUM=31@FlapLHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=458 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=460 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=458&459 SUM=31@ActPosLH < 10923L@/BRANCH@ needs
      @BRANCH MARK=TE ID=458 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=459 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=84 SUM=20@{
         IntFlapLHOBSurfAngle = (ActPosLH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_120DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_120DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (    (FlapLHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=93 SUM=20@else @DECISION SUM=20+21 ID=85|92@if (    @POPUP@(@POPUP@FlapLHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=461 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=462 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (ActPosLH LT AOM_240DEG)@-ALT@&& (@POPUP@ActPosLH < 21846L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=463 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=464 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=465&467 SUM=31@FlapLHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=465 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=467 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=465&466 SUM=31@ActPosLH < 21846L@/BRANCH@ needs
      @BRANCH MARK=TE ID=465 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=466 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=85 SUM=20@{
         IntFlapLHOBSurfAngle = (ActPosLH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_240DEG_OB_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_240DEG_OB_OFFSET_SURF_100;
      }@/BRANCH@
      @ALT@else if (    (FlapLHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=92 SUM=20@else @DECISION SUM=20+21 ID=86|91@if (    @POPUP@(@POPUP@FlapLHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=468 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=469 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (ActPosLH LT AOM_290DEG)@-ALT@&& (@POPUP@ActPosLH < 26397L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=470 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=471 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=472&474 SUM=31@FlapLHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=472 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=474 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=472&473 SUM=31@ActPosLH < 26397L@/BRANCH@ needs
      @BRANCH MARK=TE ID=472 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=473 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=86 SUM=20@{
         IntFlapLHOBSurfAngle = (ActPosLH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_290DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_290DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (FlapLHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=91 SUM=20@else @DECISION SUM=20+21 ID=87|90@if (@POPUP@FlapLHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=475 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=476 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=87 SUM=20@{
         IntFlapLHOBSurfAngle = (ActPosLH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_360DEG_OB_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_OB_OFFSET_SURF_100;
      }@/BRANCH@
      @BRANCH MARK=TB ID=90 SUM=20@else
      {
         @ALT@if (S4ppuLh LE AOM_20DEG)@-ALT@
@DECISION SUM=20+21 ID=88|89@if (@POPUP@S4ppuLh <= 1820L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=477 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=478 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
         @BRANCH MARK=TB ID=88 SUM=20@{
            IntFlapLHOBSurfAngle = (S4ppuLh * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_20DEG_S4PPU_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_20DEG_S4PPU_OFFSET_SURF_100;
         }@/BRANCH@
         @BRANCH MARK=TB ID=89 SUM=20@else
         {
            IntFlapLHOBSurfAngle = (S4ppuLh * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                    AOM_360DEG_S4PPU_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_S4PPU_OFFSET_SURF_100;
         }@/BRANCH@@/DECISION@
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@

      @COMMENT@/* Calculate IntFlapRHOBSurfAngle */@/COMMENT@
      @ALT@if (    (FlapRHUseFPPU EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=95|106@if (    @POPUP@(@POPUP@FlapRHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=479 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=480 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
          @ALT@AND (ActPosRH LT AOM_50DEG)@-ALT@&& (@POPUP@ActPosRH < 4552L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=481 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=482 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=483&485 SUM=31@FlapRHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=483 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=485 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=483&484 SUM=31@ActPosRH < 4552L@/BRANCH@ needs
      @BRANCH MARK=TE ID=483 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=484 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=95 SUM=20@{
         IntFlapRHOBSurfAngle = (ActPosRH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_50DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_50DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (    (FlapRHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=106 SUM=20@else @DECISION SUM=20+21 ID=96|105@if (    @POPUP@(@POPUP@FlapRHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=486 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=487 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (ActPosRH LT AOM_120DEG)@-ALT@&& (@POPUP@ActPosRH < 10923L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=488 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=489 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=490&492 SUM=31@FlapRHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=490 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=492 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=490&491 SUM=31@ActPosRH < 10923L@/BRANCH@ needs
      @BRANCH MARK=TE ID=490 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=491 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=96 SUM=20@{
         IntFlapRHOBSurfAngle = (ActPosRH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_120DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_120DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (    (FlapRHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=105 SUM=20@else @DECISION SUM=20+21 ID=97|104@if (    @POPUP@(@POPUP@FlapRHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=493 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=494 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (ActPosRH LT AOM_240DEG)@-ALT@&& (@POPUP@ActPosRH < 21846L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=495 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=496 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=497&499 SUM=31@FlapRHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=497 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=499 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=497&498 SUM=31@ActPosRH < 21846L@/BRANCH@ needs
      @BRANCH MARK=TE ID=497 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=498 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=97 SUM=20@{
         IntFlapRHOBSurfAngle = (ActPosRH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_240DEG_OB_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_240DEG_OB_OFFSET_SURF_100;
      }@/BRANCH@
      @ALT@else if (    (FlapRHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=104 SUM=20@else @DECISION SUM=20+21 ID=98|103@if (    @POPUP@(@POPUP@FlapRHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=500 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=501 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (ActPosRH LT AOM_290DEG)@-ALT@&& (@POPUP@ActPosRH < 26397L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=502 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=503 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=504&506 SUM=31@FlapRHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=504 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=506 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=504&505 SUM=31@ActPosRH < 26397L@/BRANCH@ needs
      @BRANCH MARK=TE ID=504 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=505 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=98 SUM=20@{
         IntFlapRHOBSurfAngle = (ActPosRH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_290DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_290DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (FlapRHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=103 SUM=20@else @DECISION SUM=20+21 ID=99|102@if (@POPUP@FlapRHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=507 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=508 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=99 SUM=20@{
         IntFlapRHOBSurfAngle = (ActPosRH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_360DEG_OB_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_OB_OFFSET_SURF_100;
      }@/BRANCH@
      @BRANCH MARK=TB ID=102 SUM=20@else
      {
         @ALT@if (S4ppuRh LE AOM_20DEG)@-ALT@
@DECISION SUM=20+21 ID=100|101@if (@POPUP@S4ppuRh <= 1820L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=509 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=510 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
         @BRANCH MARK=TB ID=100 SUM=20@{
            IntFlapRHOBSurfAngle = (S4ppuRh * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                    AOM_20DEG_S4PPU_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_20DEG_S4PPU_OFFSET_SURF_100;
         }@/BRANCH@
         @BRANCH MARK=TB ID=101 SUM=20@else
         {
            IntFlapRHOBSurfAngle = (S4ppuRh * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                    AOM_360DEG_S4PPU_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_S4PPU_OFFSET_SURF_100;
         }@/BRANCH@@/DECISION@
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@

      @COMMENT@/* Calculate IntFlapCommLHOBSurfAngle */@/COMMENT@
      @ALT@if (CtpLhOb LT AOM_50DEG)@-ALT@
@DECISION SUM=20+21 ID=107|114@if (@POPUP@CtpLhOb < 4552L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=511 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=512 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=107 SUM=20@{
         IntFlapCommLHOBSurfAngle = (CtpLhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_50DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_50DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (CtpLhOb LT AOM_120DEG)@-ALT@
@BRANCH MARK=TB ID=114 SUM=20@else @DECISION SUM=20+21 ID=108|113@if (@POPUP@CtpLhOb < 10923L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=513 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=514 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=108 SUM=20@{
         IntFlapCommLHOBSurfAngle = (CtpLhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_120DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_120DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (CtpLhOb LT AOM_240DEG)@-ALT@
@BRANCH MARK=TB ID=113 SUM=20@else @DECISION SUM=20+21 ID=109|112@if (@POPUP@CtpLhOb < 21846L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=515 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=516 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=109 SUM=20@{
         IntFlapCommLHOBSurfAngle = (CtpLhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_240DEG_OB_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_240DEG_OB_OFFSET_SURF_100;
      }@/BRANCH@
      @ALT@else if (CtpLhOb LT AOM_290DEG)@-ALT@
@BRANCH MARK=TB ID=112 SUM=20@else @DECISION SUM=20+21 ID=110|111@if (@POPUP@CtpLhOb < 26397L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=517 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=518 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=110 SUM=20@{
         IntFlapCommLHOBSurfAngle = (CtpLhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_290DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_290DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @BRANCH MARK=TB ID=111 SUM=20@else
      {
         IntFlapCommLHOBSurfAngle = (CtpLhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_360DEG_OB_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_OB_OFFSET_SURF_100;
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@

      @COMMENT@/* Calculate IntFlapCommRHOBSurfAngle */@/COMMENT@
      @ALT@if (CtpRhOb LT AOM_50DEG)@-ALT@
@DECISION SUM=20+21 ID=115|122@if (@POPUP@CtpRhOb < 4552L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=519 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=520 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=115 SUM=20@{
         IntFlapCommRHOBSurfAngle = (CtpRhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_50DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_50DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (CtpRhOb LT AOM_120DEG)@-ALT@
@BRANCH MARK=TB ID=122 SUM=20@else @DECISION SUM=20+21 ID=116|121@if (@POPUP@CtpRhOb < 10923L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=521 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=522 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=116 SUM=20@{
         IntFlapCommRHOBSurfAngle = (CtpRhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_120DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_120DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (CtpRhOb LT AOM_240DEG)@-ALT@
@BRANCH MARK=TB ID=121 SUM=20@else @DECISION SUM=20+21 ID=117|120@if (@POPUP@CtpRhOb < 21846L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=523 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=524 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=117 SUM=20@{
         IntFlapCommRHOBSurfAngle = (CtpRhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_240DEG_OB_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_240DEG_OB_OFFSET_SURF_100;
      }@/BRANCH@
      @ALT@else if (CtpRhOb LT AOM_290DEG)@-ALT@
@BRANCH MARK=TB ID=120 SUM=20@else @DECISION SUM=20+21 ID=118|119@if (@POPUP@CtpRhOb < 26397L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=525 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=526 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=118 SUM=20@{
         IntFlapCommRHOBSurfAngle = (CtpRhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                    AOM_290DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_290DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @BRANCH MARK=TB ID=119 SUM=20@else
      {
         IntFlapCommRHOBSurfAngle = (CtpRhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_360DEG_OB_NUMERATOR_100 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_OB_OFFSET_SURF_100;
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@
   }@/BRANCH@
   @BRANCH MARK=TB ID=156 SUM=20@else @COMMENT@/* OpMode 80 or 90 */@/COMMENT@
   {
      @COMMENT@/* Calculate IntFlapLHOBSurfAngle */@/COMMENT@
      @ALT@if (    (FlapLHUseFPPU EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=124|133@if (    @POPUP@(@POPUP@FlapLHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=527 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=528 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
          @ALT@AND (ActPosLH LT AOM_70DEG)@-ALT@&& (@POPUP@ActPosLH < 6372L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=529 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=530 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=531&533 SUM=31@FlapLHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=531 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=533 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=531&532 SUM=31@ActPosLH < 6372L@/BRANCH@ needs
      @BRANCH MARK=TE ID=531 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=532 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=124 SUM=20@{
         IntFlapLHOBSurfAngle = (ActPosLH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_70DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_70DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (    (FlapLHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=133 SUM=20@else @DECISION SUM=20+21 ID=125|132@if (    @POPUP@(@POPUP@FlapLHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=534 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=535 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (ActPosLH LT AOM_240DEG)@-ALT@&& (@POPUP@ActPosLH < 21846L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=536 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=537 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=538&540 SUM=31@FlapLHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=538 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=540 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=538&539 SUM=31@ActPosLH < 21846L@/BRANCH@ needs
      @BRANCH MARK=TE ID=538 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=539 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=125 SUM=20@{
         IntFlapLHOBSurfAngle = (ActPosLH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_240DEG_OB_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_240DEG_OB_OFFSET_SURF_80_90;
      }@/BRANCH@
      @ALT@else if (    (FlapLHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=132 SUM=20@else @DECISION SUM=20+21 ID=126|131@if (    @POPUP@(@POPUP@FlapLHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=541 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=542 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (ActPosLH LT AOM_300DEG)@-ALT@&& (@POPUP@ActPosLH < 27307L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=543 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=544 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=545&547 SUM=31@FlapLHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=545 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=547 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=545&546 SUM=31@ActPosLH < 27307L@/BRANCH@ needs
      @BRANCH MARK=TE ID=545 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=546 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=126 SUM=20@{
         IntFlapLHOBSurfAngle = (ActPosLH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_300DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_300DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (FlapLHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=131 SUM=20@else @DECISION SUM=20+21 ID=127|130@if (@POPUP@FlapLHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=548 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=549 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=127 SUM=20@{
         IntFlapLHOBSurfAngle = (ActPosLH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_360DEG_OB_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_OB_OFFSET_SURF_80_90;
      }@/BRANCH@
      @BRANCH MARK=TB ID=130 SUM=20@else
      {
         @ALT@if (S4ppuLh LE AOM_20DEG)@-ALT@
@DECISION SUM=20+21 ID=128|129@if (@POPUP@S4ppuLh <= 1820L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=550 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=551 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
         @BRANCH MARK=TB ID=128 SUM=20@{
            IntFlapLHOBSurfAngle = (S4ppuLh * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_20DEG_S4PPU_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_20DEG_S4PPU_OFFSET_SURF_80_90;
         }@/BRANCH@
         @BRANCH MARK=TB ID=129 SUM=20@else
         {
            IntFlapLHOBSurfAngle = (S4ppuLh * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                    AOM_360DEG_S4PPU_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_S4PPU_OFFSET_SURF_80_90;
         }@/BRANCH@@/DECISION@
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@

      @COMMENT@/* Calculate IntFlapRHOBSurfAngle */@/COMMENT@
      @ALT@if (    (FlapRHUseFPPU EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=134|143@if (    @POPUP@(@POPUP@FlapRHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=552 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=553 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
          @ALT@AND (ActPosRH LT AOM_70DEG)@-ALT@&& (@POPUP@ActPosRH < 6372L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=554 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=555 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=556&558 SUM=31@FlapRHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=556 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=558 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=556&557 SUM=31@ActPosRH < 6372L@/BRANCH@ needs
      @BRANCH MARK=TE ID=556 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=557 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=134 SUM=20@{
         IntFlapRHOBSurfAngle = (ActPosRH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_70DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_70DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (    (FlapRHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=143 SUM=20@else @DECISION SUM=20+21 ID=135|142@if (    @POPUP@(@POPUP@FlapRHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=559 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=560 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (ActPosRH LT AOM_240DEG)@-ALT@&& (@POPUP@ActPosRH < 21846L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=561 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=562 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=563&565 SUM=31@FlapRHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=563 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=565 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=563&564 SUM=31@ActPosRH < 21846L@/BRANCH@ needs
      @BRANCH MARK=TE ID=563 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=564 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=135 SUM=20@{
         IntFlapRHOBSurfAngle = (ActPosRH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_240DEG_OB_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_240DEG_OB_OFFSET_SURF_80_90;
      }@/BRANCH@
      @ALT@else if (    (FlapRHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=142 SUM=20@else @DECISION SUM=20+21 ID=136|141@if (    @POPUP@(@POPUP@FlapRHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=566 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=567 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
               @ALT@AND (ActPosRH LT AOM_300DEG)@-ALT@&& (@POPUP@ActPosRH < 27307L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=568 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=569 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=570&572 SUM=31@FlapRHUseFPPU == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=570 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=572 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=570&571 SUM=31@ActPosRH < 27307L@/BRANCH@ needs
      @BRANCH MARK=TE ID=570 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=571 SUM=32@TF@/BRANCH@=F@/POPUP@@/ALT@)
      @BRANCH MARK=TB ID=136 SUM=20@{
         IntFlapRHOBSurfAngle = (ActPosRH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_300DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_300DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (FlapRHUseFPPU EQ TRUE)@-ALT@
@BRANCH MARK=TB ID=141 SUM=20@else @DECISION SUM=20+21 ID=137|140@if (@POPUP@FlapRHUseFPPU == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=573 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=574 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=137 SUM=20@{
         IntFlapRHOBSurfAngle = (ActPosRH * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                 AOM_360DEG_OB_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_OB_OFFSET_SURF_80_90;
      }@/BRANCH@
      @BRANCH MARK=TB ID=140 SUM=20@else
      {
         @ALT@if (S4ppuRh LE AOM_20DEG)@-ALT@
@DECISION SUM=20+21 ID=138|139@if (@POPUP@S4ppuRh <= 1820L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=575 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=576 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
         @BRANCH MARK=TB ID=138 SUM=20@{
            IntFlapRHOBSurfAngle = (S4ppuRh * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                    AOM_20DEG_S4PPU_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_20DEG_S4PPU_OFFSET_SURF_80_90;
         }@/BRANCH@
         @BRANCH MARK=TB ID=139 SUM=20@else
         {
            IntFlapRHOBSurfAngle = (S4ppuRh * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                    AOM_360DEG_S4PPU_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_S4PPU_OFFSET_SURF_80_90;
         }@/BRANCH@@/DECISION@
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@

      @COMMENT@/* Calculate IntFlapCommLHOBSurfAngle */@/COMMENT@
      @ALT@if (CtpLhOb LT AOM_70DEG)@-ALT@
@DECISION SUM=20+21 ID=144|149@if (@POPUP@CtpLhOb < 6372L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=577 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=578 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=144 SUM=20@{
         IntFlapCommLHOBSurfAngle = (CtpLhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_70DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_70DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (CtpLhOb LT AOM_240DEG)@-ALT@
@BRANCH MARK=TB ID=149 SUM=20@else @DECISION SUM=20+21 ID=145|148@if (@POPUP@CtpLhOb < 21846L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=579 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=580 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=145 SUM=20@{
         IntFlapCommLHOBSurfAngle = (CtpLhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_240DEG_OB_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_240DEG_OB_OFFSET_SURF_80_90;
      }@/BRANCH@
      @ALT@else if (CtpLhOb LT AOM_300DEG)@-ALT@
@BRANCH MARK=TB ID=148 SUM=20@else @DECISION SUM=20+21 ID=146|147@if (@POPUP@CtpLhOb < 27307L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=581 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=582 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=146 SUM=20@{
         IntFlapCommLHOBSurfAngle = (CtpLhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_300DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_300DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @BRANCH MARK=TB ID=147 SUM=20@else
      {
         IntFlapCommLHOBSurfAngle = (CtpLhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_360DEG_OB_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_OB_OFFSET_SURF_80_90;
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@

      @COMMENT@/* Calculate IntFlapCommRHOBSurfAngle */@/COMMENT@
      @ALT@if (CtpRhOb LT AOM_70DEG)@-ALT@
@DECISION SUM=20+21 ID=150|155@if (@POPUP@CtpRhOb < 6372L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=583 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=584 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=150 SUM=20@{
         IntFlapCommRHOBSurfAngle = (CtpRhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_70DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_70DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @ALT@else if (CtpRhOb LT AOM_240DEG)@-ALT@
@BRANCH MARK=TB ID=155 SUM=20@else @DECISION SUM=20+21 ID=151|154@if (@POPUP@CtpRhOb < 21846L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=585 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=586 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=151 SUM=20@{
         IntFlapCommRHOBSurfAngle = (CtpRhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_240DEG_OB_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_240DEG_OB_OFFSET_SURF_80_90;
      }@/BRANCH@
      @ALT@else if (CtpRhOb LT AOM_300DEG)@-ALT@
@BRANCH MARK=TB ID=154 SUM=20@else @DECISION SUM=20+21 ID=152|153@if (@POPUP@CtpRhOb < 27307L@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=587 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=588 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
      @BRANCH MARK=TB ID=152 SUM=20@{
         IntFlapCommRHOBSurfAngle = (CtpRhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                    AOM_300DEG_OB_NUMERATOR / AOM_LINEAR_DENOMINATOR) + AOM_300DEG_OB_OFFSET_SURF;
      }@/BRANCH@
      @BRANCH MARK=TB ID=153 SUM=20@else
      {
         IntFlapCommRHOBSurfAngle = (CtpRhOb * AOM_PPU_SURF_ANGLE_NUMERATOR / AOM_PPU_SURF_ANGLE_DENOMINATOR *
                                     AOM_360DEG_OB_NUMERATOR_80_90 / AOM_LINEAR_DENOMINATOR) + AOM_360DEG_OB_OFFSET_SURF_80_90;
      }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@
   }@/BRANCH@@/DECISION@

   @COMMENT@/* limit the output range */@/COMMENT@
   IntFlapLHOBSurfAngle     = @BRANCH MARK=TA ID=71 SUM=10@@JUMP NAME="LIB_Limit"@LIB_Limit@/JUMP@(AOM_FLAP_OB_SURF_MIN, AOM_FLAP_OB_SURF_MAX, IntFlapLHOBSurfAngle)@/BRANCH@;
   IntFlapRHOBSurfAngle     = @BRANCH MARK=TA ID=72 SUM=10@@JUMP NAME="LIB_Limit"@LIB_Limit@/JUMP@(AOM_FLAP_OB_SURF_MIN, AOM_FLAP_OB_SURF_MAX, IntFlapRHOBSurfAngle)@/BRANCH@;
   IntFlapCommLHOBSurfAngle = @BRANCH MARK=TA ID=73 SUM=10@@JUMP NAME="LIB_Limit"@LIB_Limit@/JUMP@(AOM_FLAP_OB_SURF_MIN, AOM_FLAP_OB_SURF_MAX, IntFlapCommLHOBSurfAngle)@/BRANCH@;
   IntFlapCommRHOBSurfAngle = @BRANCH MARK=TA ID=74 SUM=10@@JUMP NAME="LIB_Limit"@LIB_Limit@/JUMP@(AOM_FLAP_OB_SURF_MIN, AOM_FLAP_OB_SURF_MAX, IntFlapCommRHOBSurfAngle)@/BRANCH@;

   @BRANCH MARK=TA ID=75 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPOBRETRACT, IntFlapOBRetract)@/BRANCH@;
   @BRANCH MARK=TA ID=76 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPOBGTOREQC1F_ALT, IntFlapOBGTorEQC1F_ALT)@/BRANCH@;
   @BRANCH MARK=TA ID=77 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPOBGTOREQC1F_DFS, IntFlapOBGTorEQC1F_DFS)@/BRANCH@;
   @BRANCH MARK=TA ID=78 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPOBGTOREQC2, IntFlapOBGTorEQC2)@/BRANCH@;
   @BRANCH MARK=TA ID=79 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPOBGTOREQC3, IntFlapOBGTorEQC3)@/BRANCH@;
   @BRANCH MARK=TA ID=80 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPOBGTOREQFULL, IntFlapOBGTorEQFull)@/BRANCH@;
   @BRANCH MARK=TA ID=81 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPLHOBSURFANGLE, IntFlapLHOBSurfAngle)@/BRANCH@;
   @BRANCH MARK=TA ID=82 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPRHOBSURFANGLE, IntFlapRHOBSurfAngle)@/BRANCH@;
   @BRANCH MARK=TA ID=83 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPOBSURFANGLEVAL, IntFlapOBSurfAngleVal)@/BRANCH@;
   @BRANCH MARK=TA ID=84 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPLHOBSURFANGLEVAL, IntFlapLHOBSurfAngleVal)@/BRANCH@;
   @BRANCH MARK=TA ID=85 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPRHOBSURFANGLEVAL, IntFlapRHOBSurfAngleVal)@/BRANCH@;
   @BRANCH MARK=TA ID=86 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPCOMMLHOBSURFANGLE, IntFlapCommLHOBSurfAngle)@/BRANCH@;
   @BRANCH MARK=TA ID=87 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_INTFLAPCOMMRHOBSURFANGLE, IntFlapCommRHOBSurfAngle)@/BRANCH@;

   @COMMENT@/* update inputs for usage in next cycle. */@/COMMENT@
   Fppu                = Fppu_A;
   AppuLhDfppuLh       = AppuLhDfppuLh_A;
   AppuRhDfppuRh       = AppuRhDfppuRh_A;
   S2ppuLh             = S2ppuLh_A;
   S2ppuRh             = S2ppuRh_A;
   S4ppuLh             = S4ppuLh_A;
   S4ppuRh             = S4ppuRh_A;
   FppuVal             = FppuVal_A;
   AppuLhDfppuLhVal    = AppuLhDfppuLhVal_A;
   AppuRhDfppuRhVal    = AppuRhDfppuRhVal_A;
   S2ppuLhVal          = S2ppuLhVal_A;
   S2ppuRhVal          = S2ppuRhVal_A;
   S4ppuLhVal          = S4ppuLhVal_A;
   S4ppuRhVal          = S4ppuRhVal_A;
   Ctp                 = Ctp_A;
   CtpVal              = CtpVal_A;
   CtpLhOb             = CtpLhOb_A;
   CtpRhOb             = CtpRhOb_A;
   FppuDiscFail        = FppuDiscFail_A;
   FlapSystemAsymmetry = FlapSystemAsymmetry_A;
   RL111_XCC_FlapSystemAsymmetry = RL111_XCC_FlapSystemAsymmetry_A; 
   XCCL111Val          = XCCL111Val_A;
}@/BRANCH@@/NODE@
@COMMENT@/* QA C (4700): STCYC - Justified due to all internal surface angle calculations need to be performed */@/COMMENT@
@COMMENT@/* QA C (4700): STXLN - Justified due to all internal surface angle calculations need to be performed */@/COMMENT@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
void @NODE TYPE=FUNCTION NAME="AOM_Get_Flap_Inputs"@@LINK NAME="AOM_Get_Flap_Inputs"@AOM_Get_Flap_Inputs( void )
@BRANCH MARK=TB ID=158 SUM=20@{
   @COMMENT@/* Get synchronous inputs from 8ms slot for usage in next cycle */@/COMMENT@
   Fppu_A                = DPR_Ptr_From_A->x_2ms0ms.Fppu;
   AppuLhDfppuLh_A       = DPR_Ptr_From_A->x_2ms0ms.DfppuLh;
   AppuRhDfppuRh_A       = DPR_Ptr_From_A->x_2ms0ms.DfppuRh;
   S2ppuLh_A             = DPR_Ptr_From_A->x_4ms2ms.S2ppuLh;
   S2ppuRh_A             = DPR_Ptr_From_A->x_4ms2ms.S2ppuRh;
   S4ppuLh_A             = DPR_Ptr_From_A->x_4ms2ms.S4ppuLh;
   S4ppuRh_A             = DPR_Ptr_From_A->x_4ms2ms.S4ppuRh;
   FppuVal_A             = @BRANCH MARK=TA ID=88 SUM=10@@JUMP NAME="DPX_Get_FPPUVal"@DPX_Get_FPPUVal@/JUMP@()@/BRANCH@;
   AppuLhDfppuLhVal_A    = @BRANCH MARK=TA ID=89 SUM=10@@JUMP NAME="DPX_Get_DfppuLhVal"@DPX_Get_DfppuLhVal@/JUMP@()@/BRANCH@;
   AppuRhDfppuRhVal_A    = @BRANCH MARK=TA ID=90 SUM=10@@JUMP NAME="DPX_Get_DfppuRhVal"@DPX_Get_DfppuRhVal@/JUMP@()@/BRANCH@;
   S2ppuLhVal_A          = @BRANCH MARK=TA ID=91 SUM=10@@JUMP NAME="DPX_Get_S2ppuLhVal"@DPX_Get_S2ppuLhVal@/JUMP@()@/BRANCH@;
   S2ppuRhVal_A          = @BRANCH MARK=TA ID=92 SUM=10@@JUMP NAME="DPX_Get_S2ppuRhVal"@DPX_Get_S2ppuRhVal@/JUMP@()@/BRANCH@;
   S4ppuLhVal_A          = @BRANCH MARK=TA ID=93 SUM=10@@JUMP NAME="DPX_Get_S4ppuLhVal"@DPX_Get_S4ppuLhVal@/JUMP@()@/BRANCH@;
   S4ppuRhVal_A          = @BRANCH MARK=TA ID=94 SUM=10@@JUMP NAME="DPX_Get_S4ppuRhVal"@DPX_Get_S4ppuRhVal@/JUMP@()@/BRANCH@;
   Ctp_A                 = @BRANCH MARK=TA ID=95 SUM=10@@JUMP NAME="CTP_Get_CTP"@CTP_Get_CTP@/JUMP@()@/BRANCH@;
   CtpVal_A              = @BRANCH MARK=TA ID=96 SUM=10@@JUMP NAME="CTP_Get_CTPVal"@CTP_Get_CTPVal@/JUMP@()@/BRANCH@;
   CtpLhOb_A             = @BRANCH MARK=TA ID=97 SUM=10@@JUMP NAME="CTP_Get_CTPLHOB"@CTP_Get_CTPLHOB@/JUMP@()@/BRANCH@;
   CtpRhOb_A             = @BRANCH MARK=TA ID=98 SUM=10@@JUMP NAME="CTP_Get_CTPRHOB"@CTP_Get_CTPRHOB@/JUMP@()@/BRANCH@;
   FppuDiscFail_A        = (boolean)@BRANCH MARK=TA ID=99 SUM=10@@JUMP NAME="DMA_Get"@DMA_Get@/JUMP@(DML_FLAPFPPUDISCFAIL)@/BRANCH@;
   FlapSystemAsymmetry_A = (boolean)@BRANCH MARK=TA ID=100 SUM=10@@JUMP NAME="DMA_Get"@DMA_Get@/JUMP@(DML_FLAPSYSTEMASYMMETRY)@/BRANCH@;
   RL111_XCC_FlapSystemAsymmetry_A = @BRANCH MARK=TA ID=102 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@((uint32) @BRANCH MARK=TA ID=101 SUM=10@@JUMP NAME="DMA_Get"@DMA_Get@/JUMP@(DML_RL111_XCC)@/BRANCH@, (uint16x) AWM_DATA_FLAPSYSTEMASYMMETRY)@/BRANCH@;
   XCCL111Val_A          = (boolean)@BRANCH MARK=TA ID=103 SUM=10@@JUMP NAME="DMA_Get"@DMA_Get@/JUMP@(DML_XCCL111VAL)@/BRANCH@;
}@/BRANCH@@/NODE@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
inline static void @NODE TYPE=FUNCTION NAME="AOM_Determine_TxFailure"@@LINK NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure(
   @COMMENT@/* IN    */@/COMMENT@ AWM_SW_A429_Word_Type         RxLabel,
   @COMMENT@/* INOUT */@/COMMENT@ boolean               * const TxFailLabel)
@BRANCH MARK=TB ID=159 SUM=20@{
   const uint32 TxMask = 0x800000C0uL; @COMMENT@/* mask to check bit32, 8 and 7 (parity/Tx/Update Failure) */@/COMMENT@

   *TxFailLabel  = (( RxLabel BIT_AND TxMask ) NE 0x00000000uL );
}@/BRANCH@@/NODE@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
static void @NODE TYPE=FUNCTION NAME="AOM_Determine_DiscFailureDiscretes"@@LINK NAME="AOM_Determine_DiscFailureDiscretes"@AOM_Determine_DiscFailureDiscretes(
   @COMMENT@/* IN    */@/COMMENT@ AWM_SW_A429_Word_Type  RxLabel,
   @COMMENT@/* IN    */@/COMMENT@ uint32                 IntLabel,
   @COMMENT@/* IN    */@/COMMENT@ uint32                 DiscMask,
   @COMMENT@/* IN    */@/COMMENT@ boolean                IntSurfAngleVal,
   @COMMENT@/* IN    */@/COMMENT@ boolean                TxFailLabel,
   @COMMENT@/* INOUT */@/COMMENT@ boolean        * const DiscrFailLabel)
@BRANCH MARK=TB ID=162 SUM=20@{
   @ALT@if (    (IntSurfAngleVal EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=160|161@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=161 SUM=21@implicit else@/BRANCH@@/POPUP@ (    @POPUP@(@POPUP@IntSurfAngleVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=589 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=590 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
       @ALT@AND (( RxLabel BIT_AND DiscMask ) NE IntLabel)@-ALT@
&& (@POPUP@( RxLabel & DiscMask ) != IntLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=591 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=592 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
       @ALT@AND ( TxFailLabel EQ FALSE )@-ALT@&& ( @POPUP@TxFailLabel == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=593 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=594 SUM=30@False@/BRANCH@@/POPUP@ )@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=595&598 SUM=31@IntSurfAngleVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=595 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=598 SUM=32@FXX@/BRANCH@=F
  @BRANCH MARK=TE ID=595&597 SUM=31@(RxLabel & DiscMask) != IntLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=595 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=597 SUM=32@TFX@/BRANCH@=F
  @BRANCH MARK=TE ID=595&596 SUM=31@TxFailLabel == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=595 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=596 SUM=32@TTF@/BRANCH@=F@/POPUP@@/ALT@)
   @BRANCH MARK=TB ID=160 SUM=20@{
      *DiscrFailLabel = TRUE;
   }@/BRANCH@@/DECISION@
}@/BRANCH@@/NODE@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
static void @NODE TYPE=FUNCTION NAME="AOM_Determine_DiscFailureSurf"@@LINK NAME="AOM_Determine_DiscFailureSurf"@AOM_Determine_DiscFailureSurf(
   @COMMENT@/* IN    */@/COMMENT@ AWM_SW_A429_Word_Type  RxLabel,
   @COMMENT@/* IN    */@/COMMENT@ uint8                  LSBPos,
   @COMMENT@/* IN    */@/COMMENT@ int32                  IntSurfAngle,
   @COMMENT@/* IN    */@/COMMENT@ int32                  SurfTolerance,
   @COMMENT@/* IN    */@/COMMENT@ boolean                IntSurfAngleVal,
   @COMMENT@/* IN    */@/COMMENT@ boolean                TxFailLabel,
   @COMMENT@/* INOUT */@/COMMENT@ boolean        * const DiscrFailLabel)
@BRANCH MARK=TB ID=167 SUM=20@{
   uint32 Data;
   int32 RxSurfAngle;
   boolean IsNegativeValue;

   const uint32 PayloadMask = 0x1FFFFC00uL; @COMMENT@/* mask to check bits 11 - 29 (payload of label) */@/COMMENT@

   @COMMENT@/* Apply payload mask */@/COMMENT@
   Data = RxLabel BIT_AND PayloadMask;

   @COMMENT@/* get the sign of the data */@/COMMENT@
   IsNegativeValue = @BRANCH MARK=TA ID=104 SUM=10@@JUMP NAME="BIT_Is_Set"@BIT_Is_Set@/JUMP@ ( Data, (uint16x) AWM_SW_A429_DATA_LAST )@/BRANCH@;

   @COMMENT@/* Shift the Value to the most right it position */@/COMMENT@
   Data = ( Data >> LSBPos );

   @COMMENT@/* On negative values convert to 32 bit negative value */@/COMMENT@
   @DECISION SUM=20+21 ID=163|164@if ( @POPUP@IsNegativeValue@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=599 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=600 SUM=30@False@/BRANCH@@/POPUP@ )
   @BRANCH MARK=TB ID=163 SUM=20@{
      RxSurfAngle = (int32)( Data BIT_OR (BNR_TO_32BIT << ( AWM_SW_A429_DATA_LAST - LSBPos + 1uL)) );
   }@/BRANCH@
   @BRANCH MARK=TB ID=164 SUM=20@else
   {
      RxSurfAngle = (int32)( Data );
   }@/BRANCH@@/DECISION@

   @COMMENT@/* match resolution of Surface Angle values in A429 labels with internal signal resolution */@/COMMENT@
   RxSurfAngle = RxSurfAngle * AOM_SURF_NUM_FACTOR;

   @ALT@if (    (IntSurfAngleVal EQ TRUE)@-ALT@
@DECISION SUM=20+21 ID=165|166@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=166 SUM=21@implicit else@/BRANCH@@/POPUP@ (    @POPUP@(@POPUP@IntSurfAngleVal == 1@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=601 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=602 SUM=30@False@/BRANCH@@/POPUP@)@/ALT@
       @ALT@AND (LIB_Abs_Int32( RxSurfAngle - IntSurfAngle ) GT SurfTolerance )@-ALT@
&& (@POPUP@@BRANCH MARK=TA ID=105 SUM=10@@JUMP NAME="LIB_Abs_Int32"@LIB_Abs_Int32@/JUMP@( RxSurfAngle - IntSurfAngle )@/BRANCH@ > SurfTolerance@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=603 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=604 SUM=30@False@/BRANCH@@/POPUP@ )@/ALT@
       @ALT@AND ( TxFailLabel EQ FALSE )@-ALT@&& ( @POPUP@TxFailLabel == 0@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=605 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=606 SUM=30@False@/BRANCH@@/POPUP@ )@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=607&610 SUM=31@IntSurfAngleVal == 1@/BRANCH@ needs
      @BRANCH MARK=TE ID=607 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=610 SUM=32@FXX@/BRANCH@=F
  @BRANCH MARK=TE ID=607&609 SUM=31@LIB_Abs_Int32 (RxSurfAngle - IntSurfAngle) > SurfTolerance@/BRANCH@ needs
      @BRANCH MARK=TE ID=607 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=609 SUM=32@TFX@/BRANCH@=F
  @BRANCH MARK=TE ID=607&608 SUM=31@TxFailLabel == 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=607 SUM=32@TTT@/BRANCH@=T,@BRANCH MARK=TE ID=608 SUM=32@TTF@/BRANCH@=F@/POPUP@@/ALT@)
   @BRANCH MARK=TB ID=165 SUM=20@{
      *DiscrFailLabel = TRUE;
   }@/BRANCH@@/DECISION@
}@/BRANCH@@/NODE@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
void @NODE TYPE=FUNCTION NAME="AOM_OtherACA429_Output_Monitoring"@@LINK NAME="AOM_OtherACA429_Output_Monitoring"@AOM_OtherACA429_Output_Monitoring( void )
@BRANCH MARK=TB ID=174 SUM=20@{
   boolean TxFailLabel = FALSE;
   boolean DiscrFailLabel = FALSE;
   boolean TxFail    = FALSE;
   boolean DiscrFail = FALSE;
   AWM_SW_A429_Word_Type  TempLabel = 0uL;
   uint32  IntLabel = 0uL;
   uint32  A429_OutMon_Ded_1 = 0uL;

   TYP_Aircraft_Type OpMode;
   TYP_Slat_Or_Flap_Type ChID = @BRANCH MARK=TA ID=106 SUM=10@@JUMP NAME="PUC_Get_Chid"@PUC_Get_Chid@/JUMP@()@/BRANCH@;

   @COMMENT@/* read received label from database depending on channel and compare with internal re-calculation */@/COMMENT@
   @COMMENT@/* determine transmission and discrepancy failure depeding on every label */@/COMMENT@
   @DECISION SUM=20+21 ID=168|169@if( @POPUP@ChID EQ SLAT_TYPE@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=611 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=612 SUM=30@False@/BRANCH@@/POPUP@ )
   @BRANCH MARK=TB ID=168 SUM=20@{
      @COMMENT@/* calculate internal signals for Slat */@/COMMENT@
      @BRANCH MARK=TA ID=107 SUM=10@@JUMP NAME="AOM_CalculateSlatInternals"@AOM_CalculateSlatInternals@/JUMP@()@/BRANCH@;

      @COMMENT@/* Label L010 */@/COMMENT@
      TxFailLabel = FALSE;
      DiscrFailLabel = FALSE;
      TempLabel = @BRANCH MARK=TA ID=108 SUM=10@@JUMP NAME="AGE_Get_AC_L01x_Surface_Bool"@AGE_Get_AC_L01x_Surface_Bool@/JUMP@()@/BRANCH@;
      @COMMENT@/* construct internal label for comparison with looped back label */@/COMMENT@
      IntLabel = ((uint32)IntSlatRetract        << AWM_DATA_SLATRETRACT0) +
                 ((uint32)IntSlatGTorEQC1to3    << AWM_DATA_SLATGTOREQC1TO3) +
                 ((uint32)IntSlatGTorEQ3SorFull << AWM_DATA_SLATGTOREQ3SORFULL) +
                 ((uint32)IntSlatSurfAngleVal   << AWM_DATA_SLATSURFACEANGLEVAL);

      @COMMENT@/* check Tx Failure */@/COMMENT@
      @BRANCH MARK=TA ID=109 SUM=10@@JUMP NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure@/JUMP@(
                  TempLabel,
                  &TxFailLabel)@/BRANCH@;

      @COMMENT@/* check Discrepancy Failure */@/COMMENT@
      @BRANCH MARK=TA ID=110 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureDiscretes"@AOM_Determine_DiscFailureDiscretes@/JUMP@(
                  TempLabel,
                  IntLabel,
                  0x0012C000uL, @COMMENT@/* mask for SAPs discretes */@/COMMENT@
                  IntSlatSurfAngleVal,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      @COMMENT@/* set global TxFail and DiscrFail after first check */@/COMMENT@
      TxFail    = TxFailLabel;
      DiscrFail = DiscrFailLabel;

      @COMMENT@/* determine dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=111 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 2, @POPUP@@POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=613 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=614 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=615 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=616 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=617&619 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=617 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=619 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=618&619 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=618 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=619 SUM=32@FF@/BRANCH@=F@/POPUP@ )@/BRANCH@;


      @COMMENT@/* Label L012 */@/COMMENT@
      TxFailLabel = FALSE;
      DiscrFailLabel = FALSE;
      TempLabel = @BRANCH MARK=TA ID=112 SUM=10@@JUMP NAME="AGE_Get_AC_L01x_Surface_Num"@AGE_Get_AC_L01x_Surface_Num@/JUMP@()@/BRANCH@;
      IntLabel = 0uL;

      @COMMENT@/* check Tx Failure */@/COMMENT@
      @BRANCH MARK=TA ID=113 SUM=10@@JUMP NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure@/JUMP@(
                  TempLabel,
                  &TxFailLabel)@/BRANCH@;

      @COMMENT@/* check Discrepancy Failure */@/COMMENT@
      @BRANCH MARK=TA ID=114 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureSurf"@AOM_Determine_DiscFailureSurf@/JUMP@(
                  TempLabel,
                  (uint8)AWM_DATA_SLATSURFACEANGLE_FIRST,
                  IntSlatSurfAngle,
                  AOM_SURFTHRESH_SLAT,
                  IntSlatSurfAngleVal,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      @COMMENT@/* update global TxFail and DiscrFail */@/COMMENT@
      TxFail    = @POPUP@@POPUP@TxFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=620 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=621 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=622 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=623 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=624&626 SUM=31@TxFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=624 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=626 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=625&626 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=625 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=626 SUM=32@FF@/BRANCH@=F@/POPUP@;
      DiscrFail = @POPUP@@POPUP@DiscrFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=627 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=628 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=629 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=630 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=631&633 SUM=31@DiscrFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=631 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=633 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=632&633 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=632 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=633 SUM=32@FF@/BRANCH@=F@/POPUP@;

      @COMMENT@/* determine dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=115 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 3, @POPUP@@POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=634 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=635 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=636 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=637 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=638&640 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=638 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=640 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=639&640 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=639 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=640 SUM=32@FF@/BRANCH@=F@/POPUP@ )@/BRANCH@;
   }@/BRANCH@
   @BRANCH MARK=TB ID=169 SUM=20@else
   {
      OpMode = @BRANCH MARK=TA ID=116 SUM=10@@JUMP NAME="PUC_Get_OpMode"@PUC_Get_OpMode@/JUMP@()@/BRANCH@;

      @COMMENT@/* calculate monitor thresholds dependent on OpMode */@/COMMENT@
      @BRANCH MARK=TA ID=117 SUM=10@@JUMP NAME="AOM_Determine_Thresholds"@AOM_Determine_Thresholds@/JUMP@( OpMode )@/BRANCH@;

      @COMMENT@/* calculate internal signals for Flap IB */@/COMMENT@
      @BRANCH MARK=TA ID=118 SUM=10@@JUMP NAME="AOM_CalculateFlapIBInternals"@AOM_CalculateFlapIBInternals@/JUMP@( OpMode )@/BRANCH@;

      @COMMENT@/* construct internal label for comparison with looped back label */@/COMMENT@
      IntLabel = ((uint32)IntFlapIBRetract          << AWM_DATA_FLAPIBRETRACT) +
                 ((uint32)IntFlapIBGTorEQC1F_DFS    << AWM_DATA_FLAPIBGTOREQC1F_DFS) +
                 ((uint32)IntFlapIBGTorEQC1F_ALT    << AWM_DATA_FLAPIBGTOREQC1F_ALT) +
                 ((uint32)IntFlapIBGTorEQC2         << AWM_DATA_FLAPIBGTOREQC2) +
                 ((uint32)IntFlapIBGTorEQC3         << AWM_DATA_FLAPIBGTOREQC3) +
                 ((uint32)IntFlapIBGTorEQFull       << AWM_DATA_FLAPIBGTOREQFULL);

      @COMMENT@/* Label L011 */@/COMMENT@
      TxFailLabel = FALSE;
      DiscrFailLabel = FALSE;
      TempLabel = @BRANCH MARK=TA ID=119 SUM=10@@JUMP NAME="AGE_Get_AC_L01x_Surface_Bool"@AGE_Get_AC_L01x_Surface_Bool@/JUMP@()@/BRANCH@;


      @COMMENT@/* check Tx Failure */@/COMMENT@
      @BRANCH MARK=TA ID=120 SUM=10@@JUMP NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure@/JUMP@(
                  TempLabel,
                  &TxFailLabel)@/BRANCH@;

      @COMMENT@/* check Discrepancy Failure */@/COMMENT@
      @BRANCH MARK=TA ID=121 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureDiscretes"@AOM_Determine_DiscFailureDiscretes@/JUMP@(
                  TempLabel,
                  IntLabel,
                  0x0FC00000uL, @COMMENT@/* mask for IB FAPs discretes */@/COMMENT@
                  IntFlapIBSurfAngleVal,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      IntLabel = 0uL;
      IntLabel = ((uint32)IntFlapIBSurfAngleVal << AWM_DATA_FLAPIBSURFANGLEVAL);

      @BRANCH MARK=TA ID=122 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureDiscretes"@AOM_Determine_DiscFailureDiscretes@/JUMP@(
                  TempLabel,
                  IntLabel,
                  0x10000000uL, @COMMENT@/* mask for FlapIBSurfAngleVal */@/COMMENT@
                  TRUE,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      IntLabel = 0uL;

      @COMMENT@/* calculate internal signals for Flap OB */@/COMMENT@
      @BRANCH MARK=TA ID=123 SUM=10@@JUMP NAME="AOM_CalculateFlapOBInternals"@AOM_CalculateFlapOBInternals@/JUMP@( OpMode )@/BRANCH@;

      @COMMENT@/* construct internal label for comparison with looped back label */@/COMMENT@
      IntLabel = ((uint32)IntFlapOBRetract          << AWM_DATA_FLAPOBRETRACT) +
                 ((uint32)IntFlapOBGTorEQC1F_ALT    << AWM_DATA_FLAPOBGTOREQC1F_ALT) +
                 ((uint32)IntFlapOBGTorEQC1F_DFS    << AWM_DATA_FLAPOBGTOREQC1F_DFS) +
                 ((uint32)IntFlapOBGTorEQC2         << AWM_DATA_FLAPOBGTOREQC2) +
                 ((uint32)IntFlapOBGTorEQC3         << AWM_DATA_FLAPOBGTOREQC3) +
                 ((uint32)IntFlapOBGTorEQFull       << AWM_DATA_FLAPOBGTOREQFULL);

      @COMMENT@/* check Discrepancy Failure */@/COMMENT@
      @BRANCH MARK=TA ID=124 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureDiscretes"@AOM_Determine_DiscFailureDiscretes@/JUMP@(
                  TempLabel,
                  IntLabel,
                  0x000FC000uL, @COMMENT@/* mask for OB FAPs discretes */@/COMMENT@
                  IntFlapOBSurfAngleVal,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      IntLabel = 0uL;
      IntLabel = ((uint32)IntFlapOBSurfAngleVal << AWM_DATA_FLAPOBSURFANGLEVAL);

      @BRANCH MARK=TA ID=125 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureDiscretes"@AOM_Determine_DiscFailureDiscretes@/JUMP@(
                  TempLabel,
                  IntLabel,
                  0x00100000uL, @COMMENT@/* mask for FlapOBSurfAngleVal */@/COMMENT@
                  TRUE,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      @COMMENT@/* set global TxFail and DiscrFail after first check */@/COMMENT@
      TxFail    = TxFailLabel;
      DiscrFail = DiscrFailLabel;

      @COMMENT@/* determine dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=126 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 2, @POPUP@@POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=641 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=642 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=643 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=644 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=645&647 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=645 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=647 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=646&647 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=646 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=647 SUM=32@FF@/BRANCH@=F@/POPUP@ )@/BRANCH@;


      @COMMENT@/* Label L013 */@/COMMENT@
      TxFailLabel = FALSE;
      DiscrFailLabel = FALSE;
      TempLabel = @BRANCH MARK=TA ID=127 SUM=10@@JUMP NAME="AGE_Get_AC_L01x_Surface_Num"@AGE_Get_AC_L01x_Surface_Num@/JUMP@()@/BRANCH@;
      IntLabel = 0uL;

      @COMMENT@/* check Tx Failure */@/COMMENT@
      @BRANCH MARK=TA ID=128 SUM=10@@JUMP NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure@/JUMP@(
                  TempLabel,
                  &TxFailLabel)@/BRANCH@;

      @COMMENT@/* check Discrepancy Failure */@/COMMENT@
      @BRANCH MARK=TA ID=129 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureSurf"@AOM_Determine_DiscFailureSurf@/JUMP@(
                  TempLabel,
                  (uint8)AWM_DATA_FLAPIBSURFANGLE_FIRST,
                  IntFlapIBSurfAngle,
                  AOM_SURFTHRESH_FLAP,
                  IntFlapIBSurfAngleVal,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      @COMMENT@/* update global TxFail and DiscrFail */@/COMMENT@
      TxFail    = @POPUP@@POPUP@TxFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=648 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=649 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=650 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=651 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=652&654 SUM=31@TxFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=652 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=654 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=653&654 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=653 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=654 SUM=32@FF@/BRANCH@=F@/POPUP@;
      DiscrFail = @POPUP@@POPUP@DiscrFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=655 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=656 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=657 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=658 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=659&661 SUM=31@DiscrFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=659 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=661 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=660&661 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=660 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=661 SUM=32@FF@/BRANCH@=F@/POPUP@;

      @COMMENT@/* determine dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=130 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 3, @POPUP@@POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=662 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=663 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=664 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=665 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=666&668 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=666 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=668 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=667&668 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=667 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=668 SUM=32@FF@/BRANCH@=F@/POPUP@ )@/BRANCH@;


      @COMMENT@/* Label L015 */@/COMMENT@
      TxFailLabel = FALSE;
      DiscrFailLabel = FALSE;
      TempLabel = @BRANCH MARK=TA ID=131 SUM=10@@JUMP NAME="AGE_Get_AC_L015_Flap_LHOB_Surface_Num"@AGE_Get_AC_L015_Flap_LHOB_Surface_Num@/JUMP@()@/BRANCH@;
      IntLabel = 0uL;

      @COMMENT@/* check Tx Failure */@/COMMENT@
      @BRANCH MARK=TA ID=132 SUM=10@@JUMP NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure@/JUMP@(
                  TempLabel,
                  &TxFailLabel)@/BRANCH@;

      @COMMENT@/* check Discrepancy Failure */@/COMMENT@
      @BRANCH MARK=TA ID=133 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureSurf"@AOM_Determine_DiscFailureSurf@/JUMP@(
                  TempLabel,
                  (uint8)AWM_DATA_FLAPLHOBSURFANGLE_FIRST,
                  IntFlapLHOBSurfAngle,
                  AOM_SURFTHRESH_FLAP,
                  IntFlapLHOBSurfAngleVal,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      @COMMENT@/* update global TxFail and DiscrFail */@/COMMENT@
      TxFail    = @POPUP@@POPUP@TxFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=669 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=670 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=671 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=672 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=673&675 SUM=31@TxFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=673 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=675 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=674&675 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=674 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=675 SUM=32@FF@/BRANCH@=F@/POPUP@;
      DiscrFail = @POPUP@@POPUP@DiscrFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=676 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=677 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=678 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=679 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=680&682 SUM=31@DiscrFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=680 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=682 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=681&682 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=681 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=682 SUM=32@FF@/BRANCH@=F@/POPUP@;

      @COMMENT@/* determine dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=134 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 4, @POPUP@@POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=683 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=684 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=685 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=686 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=687&689 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=687 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=689 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=688&689 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=688 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=689 SUM=32@FF@/BRANCH@=F@/POPUP@ )@/BRANCH@;


      @COMMENT@/* Label L017 */@/COMMENT@
      TxFailLabel = FALSE;
      DiscrFailLabel = FALSE;
      TempLabel = @BRANCH MARK=TA ID=135 SUM=10@@JUMP NAME="AGE_Get_AC_L017_Flap_RHOB_Surface_Num"@AGE_Get_AC_L017_Flap_RHOB_Surface_Num@/JUMP@()@/BRANCH@;
      IntLabel = 0uL;

      @COMMENT@/* check Tx Failure */@/COMMENT@
      @BRANCH MARK=TA ID=136 SUM=10@@JUMP NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure@/JUMP@(
                  TempLabel,
                  &TxFailLabel)@/BRANCH@;

      @COMMENT@/* check Discrepancy Failure */@/COMMENT@
      @BRANCH MARK=TA ID=137 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureSurf"@AOM_Determine_DiscFailureSurf@/JUMP@(
                  TempLabel,
                  (uint8)AWM_DATA_FLAPRHOBSURFANGLE_FIRST,
                  IntFlapRHOBSurfAngle,
                  AOM_SURFTHRESH_FLAP,
                  IntFlapRHOBSurfAngleVal,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      @COMMENT@/* update global TxFail and DiscrFail */@/COMMENT@
      TxFail    = @POPUP@@POPUP@TxFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=690 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=691 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=692 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=693 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=694&696 SUM=31@TxFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=694 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=696 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=695&696 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=695 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=696 SUM=32@FF@/BRANCH@=F@/POPUP@;
      DiscrFail = @POPUP@@POPUP@DiscrFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=697 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=698 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=699 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=700 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=701&703 SUM=31@DiscrFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=701 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=703 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=702&703 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=702 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=703 SUM=32@FF@/BRANCH@=F@/POPUP@;

      @COMMENT@/* determine dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=138 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 5, @POPUP@@POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=704 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=705 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=706 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=707 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=708&710 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=708 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=710 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=709&710 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=709 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=710 SUM=32@FF@/BRANCH@=F@/POPUP@ )@/BRANCH@;


      @COMMENT@/* Label L021 */@/COMMENT@
      TxFailLabel = FALSE;
      DiscrFailLabel = FALSE;
      TempLabel = @BRANCH MARK=TA ID=139 SUM=10@@JUMP NAME="AGE_Get_AC_L021_Flap_Comm_Surface_Num"@AGE_Get_AC_L021_Flap_Comm_Surface_Num@/JUMP@()@/BRANCH@;
      IntLabel = 0uL;

      @COMMENT@/* check Tx Failure */@/COMMENT@
      @BRANCH MARK=TA ID=140 SUM=10@@JUMP NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure@/JUMP@(
                  TempLabel,
                  &TxFailLabel)@/BRANCH@;

      @COMMENT@/* check Discrepancy Failure */@/COMMENT@
      @BRANCH MARK=TA ID=141 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureSurf"@AOM_Determine_DiscFailureSurf@/JUMP@(
                  TempLabel,
                  (uint8)AWM_DATA_FLAPCOMMSURFANGLE_FIRST,
                  IntFlapCommSurfAngle,
                  AOM_SURFTHRESH_FLAP,
                  CtpVal,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      @COMMENT@/* update global TxFail and DiscrFail */@/COMMENT@
      TxFail    = @POPUP@@POPUP@TxFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=711 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=712 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=713 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=714 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=715&717 SUM=31@TxFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=715 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=717 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=716&717 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=716 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=717 SUM=32@FF@/BRANCH@=F@/POPUP@;
      DiscrFail = @POPUP@@POPUP@DiscrFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=718 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=719 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=720 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=721 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=722&724 SUM=31@DiscrFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=722 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=724 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=723&724 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=723 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=724 SUM=32@FF@/BRANCH@=F@/POPUP@;

      @COMMENT@/* determine dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=142 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 6, @POPUP@@POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=725 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=726 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=727 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=728 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=729&731 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=729 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=731 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=730&731 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=730 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=731 SUM=32@FF@/BRANCH@=F@/POPUP@ )@/BRANCH@;


      @COMMENT@/* Label L023 */@/COMMENT@
      TxFailLabel = FALSE;
      DiscrFailLabel = FALSE;
      TempLabel = @BRANCH MARK=TA ID=143 SUM=10@@JUMP NAME="AGE_Get_AC_L023_Flap_Comm_LHOB_Surface_Num"@AGE_Get_AC_L023_Flap_Comm_LHOB_Surface_Num@/JUMP@()@/BRANCH@;
      IntLabel = 0uL;

      @COMMENT@/* check Tx Failure */@/COMMENT@
      @BRANCH MARK=TA ID=144 SUM=10@@JUMP NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure@/JUMP@(
                  TempLabel,
                  &TxFailLabel)@/BRANCH@;

      @COMMENT@/* check Discrepancy Failure */@/COMMENT@
      @BRANCH MARK=TA ID=145 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureSurf"@AOM_Determine_DiscFailureSurf@/JUMP@(
                  TempLabel,
                  (uint8)AWM_DATA_FLAPCOMMLHOBSURFANGLE_FIRST,
                  IntFlapCommLHOBSurfAngle,
                  AOM_SURFTHRESH_FLAP,
                  CtpVal,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      @COMMENT@/* update global TxFail and DiscrFail */@/COMMENT@
      TxFail    = @POPUP@@POPUP@TxFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=732 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=733 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=734 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=735 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=736&738 SUM=31@TxFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=736 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=738 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=737&738 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=737 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=738 SUM=32@FF@/BRANCH@=F@/POPUP@;
      DiscrFail = @POPUP@@POPUP@DiscrFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=739 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=740 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=741 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=742 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=743&745 SUM=31@DiscrFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=743 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=745 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=744&745 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=744 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=745 SUM=32@FF@/BRANCH@=F@/POPUP@;

      @COMMENT@/* determine dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=146 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 7, @POPUP@@POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=746 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=747 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=748 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=749 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=750&752 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=750 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=752 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=751&752 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=751 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=752 SUM=32@FF@/BRANCH@=F@/POPUP@ )@/BRANCH@;


      @COMMENT@/* Label L025 */@/COMMENT@
      TxFailLabel = FALSE;
      DiscrFailLabel = FALSE;
      TempLabel = @BRANCH MARK=TA ID=147 SUM=10@@JUMP NAME="AGE_Get_AC_L025_Flap_Comm_RHOB_Surface_Num"@AGE_Get_AC_L025_Flap_Comm_RHOB_Surface_Num@/JUMP@()@/BRANCH@;
      IntLabel = 0uL;

      @COMMENT@/* check Tx Failure */@/COMMENT@
      @BRANCH MARK=TA ID=148 SUM=10@@JUMP NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure@/JUMP@(
                  TempLabel,
                  &TxFailLabel)@/BRANCH@;

      @COMMENT@/* check Discrepancy Failure */@/COMMENT@
      @BRANCH MARK=TA ID=149 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureSurf"@AOM_Determine_DiscFailureSurf@/JUMP@(
                  TempLabel,
                  (uint8)AWM_DATA_FLAPCOMMRHOBSURFANGLE_FIRST,
                  IntFlapCommRHOBSurfAngle,
                  AOM_SURFTHRESH_FLAP,
                  CtpVal,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      @COMMENT@/* update global TxFail and DiscrFail */@/COMMENT@
      TxFail    = @POPUP@@POPUP@TxFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=753 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=754 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=755 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=756 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=757&759 SUM=31@TxFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=757 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=759 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=758&759 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=758 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=759 SUM=32@FF@/BRANCH@=F@/POPUP@;
      DiscrFail = @POPUP@@POPUP@DiscrFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=760 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=761 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=762 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=763 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=764&766 SUM=31@DiscrFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=764 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=766 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=765&766 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=765 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=766 SUM=32@FF@/BRANCH@=F@/POPUP@;

      @COMMENT@/* determine dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=150 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 8, @POPUP@@POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=767 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=768 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=769 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=770 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=771&773 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=771 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=773 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=772&773 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=772 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=773 SUM=32@FF@/BRANCH@=F@/POPUP@ )@/BRANCH@;


      @COMMENT@/* Label L215 */@/COMMENT@
      TxFailLabel = FALSE;
      DiscrFailLabel = FALSE;
      TempLabel = @BRANCH MARK=TA ID=151 SUM=10@@JUMP NAME="AGE_Get_AC_L215_Flap_Status_Discr_2"@AGE_Get_AC_L215_Flap_Status_Discr_2@/JUMP@()@/BRANCH@;
      IntLabel = 0uL;

      @COMMENT@/* construct internal label for comparison with looped back label */@/COMMENT@
      IntLabel = ((uint32)IntFlapLHOBSurfAngleVal << AWM_DATA_FLAPLHOBSURFANGLEVAL) +
                 ((uint32)IntFlapRHOBSurfAngleVal << AWM_DATA_FLAPRHOBSURFANGLEVAL);

      @COMMENT@/* check Tx Failure */@/COMMENT@
      @BRANCH MARK=TA ID=152 SUM=10@@JUMP NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure@/JUMP@(
                  TempLabel,
                  &TxFailLabel)@/BRANCH@;

      @COMMENT@/* check Discrepancy Failure */@/COMMENT@
      @BRANCH MARK=TA ID=153 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureDiscretes"@AOM_Determine_DiscFailureDiscretes@/JUMP@(
                  TempLabel,
                  IntLabel,
                  0x00180000uL, @COMMENT@/* mask for LHOB and RHOB Surface Angle validity discretes */@/COMMENT@
                  TRUE,
                  TxFailLabel,
                  &DiscrFailLabel)@/BRANCH@;

      @COMMENT@/* update global TxFail and DiscrFail */@/COMMENT@
      TxFail    = @POPUP@@POPUP@TxFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=774 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=775 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=776 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=777 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=778&780 SUM=31@TxFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=778 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=780 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=779&780 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=779 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=780 SUM=32@FF@/BRANCH@=F@/POPUP@;
      DiscrFail = @POPUP@@POPUP@DiscrFail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=781 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=782 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=783 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=784 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=785&787 SUM=31@DiscrFail@/BRANCH@ needs
      @BRANCH MARK=TE ID=785 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=787 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=786&787 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=786 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=787 SUM=32@FF@/BRANCH@=F@/POPUP@;

      @COMMENT@/* determine dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=154 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 9, @POPUP@@POPUP@TxFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=788 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=789 SUM=30@False@/BRANCH@@/POPUP@ OR @POPUP@DiscrFailLabel@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=790 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=791 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=792&794 SUM=31@TxFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=792 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=794 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=793&794 SUM=31@DiscrFailLabel@/BRANCH@ needs
      @BRANCH MARK=TE ID=793 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=794 SUM=32@FF@/BRANCH@=F@/POPUP@ )@/BRANCH@;
   }@/BRANCH@@/DECISION@

   @COMMENT@/* update validation counters for transmission and discrepancy failure */@/COMMENT@
   @BRANCH MARK=TA ID=155 SUM=10@@JUMP NAME="AOM_CounterUpdate"@AOM_CounterUpdate@/JUMP@( TxFail, DiscrFail, &AC_TxFailureCtr, &AC_DiscrFailureCtr )@/BRANCH@;

   @COMMENT@/* set failure indication if a transmission or discrepancy failure is validated */@/COMMENT@
   @ALT@if(( AC_TxFailureCtr    GE AOM_15CYCLES ) OR@-ALT@
@DECISION SUM=20+21 ID=170|171@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=171 SUM=21@implicit else@/BRANCH@@/POPUP@(@POPUP@( @POPUP@AC_TxFailureCtr    >= 15@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=795 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=796 SUM=30@False@/BRANCH@@/POPUP@ ) ||@/ALT@
      @ALT@( AC_DiscrFailureCtr GE AOM_3CYCLES ))@-ALT@
( @POPUP@AC_DiscrFailureCtr >= 3@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=797 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=798 SUM=30@False@/BRANCH@@/POPUP@ )@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=799&801 SUM=31@AC_TxFailureCtr >= 15@/BRANCH@ needs
      @BRANCH MARK=TE ID=799 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=801 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=800&801 SUM=31@AC_DiscrFailureCtr >= 3@/BRANCH@ needs
      @BRANCH MARK=TE ID=800 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=801 SUM=32@FF@/BRANCH@=F@/POPUP@)@/ALT@
   @BRANCH MARK=TB ID=170 SUM=20@{
      ACA429Fail = TRUE;
   }@/BRANCH@@/DECISION@

   @COMMENT@/* if a failure is validated .. */@/COMMENT@
   @DECISION SUM=20+21 ID=172|173@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=173 SUM=21@implicit else@/BRANCH@@/POPUP@( @POPUP@ACA429Fail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=802 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=803 SUM=30@False@/BRANCH@@/POPUP@ )
   @BRANCH MARK=TB ID=172 SUM=20@{
      @COMMENT@/* generate dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=156 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 0, TxFail )@/BRANCH@;
      @BRANCH MARK=TA ID=157 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 1, DiscrFail )@/BRANCH@;
      @BRANCH MARK=TA ID=158 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_A429_OUTMON_DED_1, (int32)A429_OutMon_Ded_1 )@/BRANCH@;

      @BRANCH MARK=TA ID=159 SUM=10@@JUMP NAME="AOM_Generate_ACout_DepEngData"@AOM_Generate_ACout_DepEngData@/JUMP@( ChID, A429_OutMon_Ded_1 )@/BRANCH@;
      @COMMENT@/* .. disable A429 for OtherAC bus */@/COMMENT@
      @BRANCH MARK=TA ID=160 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_OD_INT_OTHERAC_ENABLE, FALSE )@/BRANCH@;
      @BRANCH MARK=TA ID=161 SUM=10@@JUMP NAME="DOR_Put_Output"@DOR_Put_Output@/JUMP@(DOR_A429_TX_OTHERAC_EN, FALSE)@/BRANCH@;
      @COMMENT@/* .. set failure status to detected failure and send failure to MSP */@/COMMENT@
      @BRANCH MARK=TA ID=162 SUM=10@@JUMP NAME="FSE_Store_Failure_Event_DPRAM"@FSE_Store_Failure_Event_DPRAM@/JUMP@( DFE_ACA429_FAILURE_STATUS, FS_DETECTED_FAILURE )@/BRANCH@;
   }@/BRANCH@@/DECISION@

   @COMMENT@/* write failure indication to database */@/COMMENT@
   @BRANCH MARK=TA ID=163 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_ACA429FAIL, ACA429Fail )@/BRANCH@;
}@/BRANCH@@/NODE@
@COMMENT@/* QA C (4700): STLIN - Justified due to large number of monitored labels */@/COMMENT@
@COMMENT@/* QA C (4700): STXLN - Justified due to large number of monitored labels */@/COMMENT@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
inline static void @NODE TYPE=FUNCTION NAME="AOM_Generate_ADIRUout_DepEngData"@@LINK NAME="AOM_Generate_ADIRUout_DepEngData"@AOM_Generate_ADIRUout_DepEngData(void)
@BRANCH MARK=TB ID=175 SUM=20@{
   AWM_SW_A429_Word_Type TempLabel = 0uL;
   uint32 A429_OutMon_Ded_2 = 0uL;
   uint32 A429_OutMon_Ded_3 = 0uL;

   @COMMENT@/* generate DED word 2 with internal data */@/COMMENT@
   @COMMENT@/* FLAPs discretes */@/COMMENT@
   A429_OutMon_Ded_2 = ((uint32)IntFlapOBRetract        << 0) +
                       ((uint32)IntFlapOBGTorEQC1F_ALT  << 1) +
                       ((uint32)IntFlapOBGTorEQC1F_DFS  << 2) +
                       ((uint32)IntFlapOBGTorEQC2       << 3) +
                       ((uint32)IntFlapOBGTorEQC3       << 4) +
                       ((uint32)IntFlapOBGTorEQFull     << 5) +
                       ((uint32)IntFlapOBSurfAngleVal   << 6) +
                       ((uint32)IntFlapIBRetract        << 7) +
                       ((uint32)IntFlapIBGTorEQC1F_DFS  << 8) +
                       ((uint32)IntFlapIBGTorEQC1F_ALT  << 9) +
                       ((uint32)IntFlapIBGTorEQC2       << 10) +
                       ((uint32)IntFlapIBGTorEQC3       << 11) +
                       ((uint32)IntFlapIBGTorEQFull     << 12) +
                       ((uint32)IntFlapIBSurfAngleVal   << 13);

   @BRANCH MARK=TA ID=164 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_A429_ADIRU_DED_2, (int32)A429_OutMon_Ded_2)@/BRANCH@;

   @COMMENT@/* received label 011 via loopback */@/COMMENT@
   TempLabel = @BRANCH MARK=TA ID=165 SUM=10@@JUMP NAME="AGE_Get_AC_ADIRU_L011_Flap_Surface_Bool"@AGE_Get_AC_ADIRU_L011_Flap_Surface_Bool@/JUMP@()@/BRANCH@;
   A429_OutMon_Ded_3 = @BRANCH MARK=TA ID=166 SUM=10@@JUMP NAME="BIT_Field_Normalised"@BIT_Field_Normalised@/JUMP@(TempLabel, (uint16x)AWM_DATA_FLAPOBRETRACT, (uint16x)AWM_DATA_FLAPIBSURFANGLEVAL )@/BRANCH@;

   @BRANCH MARK=TA ID=167 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@(DML_A429_ADIRU_DED_3, (int32)A429_OutMon_Ded_3)@/BRANCH@;
}@/BRANCH@@/NODE@

@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
void @NODE TYPE=FUNCTION NAME="AOM_ADIRUA429_Output_Monitoring"@@LINK NAME="AOM_ADIRUA429_Output_Monitoring"@AOM_ADIRUA429_Output_Monitoring( void )
@BRANCH MARK=TB ID=180 SUM=20@{
   AWM_SW_A429_Word_Type  ReceivedLabel = 0uL;
   uint32  IntLabel = 0uL;
   boolean TxFail    = FALSE;
   boolean DiscrFail = FALSE;
   uint32 A429_OutMon_Ded_1 = 0uL;

   @COMMENT@/* Label L011 */@/COMMENT@

   @COMMENT@/* read received label from database */@/COMMENT@
   ReceivedLabel = @BRANCH MARK=TA ID=168 SUM=10@@JUMP NAME="AGE_Get_AC_ADIRU_L011_Flap_Surface_Bool"@AGE_Get_AC_ADIRU_L011_Flap_Surface_Bool@/JUMP@()@/BRANCH@;

   @COMMENT@/* check Tx Failure */@/COMMENT@
   @BRANCH MARK=TA ID=169 SUM=10@@JUMP NAME="AOM_Determine_TxFailure"@AOM_Determine_TxFailure@/JUMP@(
               ReceivedLabel,
               &TxFail)@/BRANCH@;

   @COMMENT@/* construct internal label for comparison with looped back label */@/COMMENT@
   IntLabel = ((uint32)IntFlapIBRetract          << AWM_DATA_FLAPIBRETRACT) +
              ((uint32)IntFlapIBGTorEQC1F_DFS    << AWM_DATA_FLAPIBGTOREQC1F_DFS) +
              ((uint32)IntFlapIBGTorEQC1F_ALT    << AWM_DATA_FLAPIBGTOREQC1F_ALT) +
              ((uint32)IntFlapIBGTorEQC2         << AWM_DATA_FLAPIBGTOREQC2) +
              ((uint32)IntFlapIBGTorEQC3         << AWM_DATA_FLAPIBGTOREQC3) +
              ((uint32)IntFlapIBGTorEQFull       << AWM_DATA_FLAPIBGTOREQFULL);

   @COMMENT@/* check Discrepancy Failure */@/COMMENT@
   @BRANCH MARK=TA ID=170 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureDiscretes"@AOM_Determine_DiscFailureDiscretes@/JUMP@(
               ReceivedLabel,
               IntLabel,
               0x0FC00000uL, @COMMENT@/* mask for IB FAPs discretes */@/COMMENT@
               IntFlapIBSurfAngleVal,
               TxFail,
               &DiscrFail)@/BRANCH@;

   IntLabel = 0uL;
   IntLabel = ((uint32)IntFlapIBSurfAngleVal << AWM_DATA_FLAPIBSURFANGLEVAL);

   @BRANCH MARK=TA ID=171 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureDiscretes"@AOM_Determine_DiscFailureDiscretes@/JUMP@(
               ReceivedLabel,
               IntLabel,
               0x10000000uL, @COMMENT@/* mask for FlapIBSurfAngleVal */@/COMMENT@
               TRUE,
               TxFail,
               &DiscrFail)@/BRANCH@;

   IntLabel = 0uL;

   @COMMENT@/* construct internal label for comparison with looped back label */@/COMMENT@
   IntLabel = ((uint32)IntFlapOBRetract          << AWM_DATA_FLAPOBRETRACT) +
              ((uint32)IntFlapOBGTorEQC1F_ALT    << AWM_DATA_FLAPOBGTOREQC1F_ALT) +
              ((uint32)IntFlapOBGTorEQC1F_DFS    << AWM_DATA_FLAPOBGTOREQC1F_DFS) +
              ((uint32)IntFlapOBGTorEQC2         << AWM_DATA_FLAPOBGTOREQC2) +
              ((uint32)IntFlapOBGTorEQC3         << AWM_DATA_FLAPOBGTOREQC3) +
              ((uint32)IntFlapOBGTorEQFull       << AWM_DATA_FLAPOBGTOREQFULL);

   @COMMENT@/* check Discrepancy Failure */@/COMMENT@
   @BRANCH MARK=TA ID=172 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureDiscretes"@AOM_Determine_DiscFailureDiscretes@/JUMP@(
               ReceivedLabel,
               IntLabel,
               0x000FC000uL, @COMMENT@/* mask for OB FAPs discretes */@/COMMENT@
               IntFlapOBSurfAngleVal,
               TxFail,
               &DiscrFail)@/BRANCH@;

   IntLabel = 0uL;
   IntLabel = ((uint32)IntFlapOBSurfAngleVal << AWM_DATA_FLAPOBSURFANGLEVAL);

   @BRANCH MARK=TA ID=173 SUM=10@@JUMP NAME="AOM_Determine_DiscFailureDiscretes"@AOM_Determine_DiscFailureDiscretes@/JUMP@(
               ReceivedLabel,
               IntLabel,
               0x00100000uL, @COMMENT@/* mask for FlapOBSurfAngleVal */@/COMMENT@
               TRUE,
               TxFail,
               &DiscrFail)@/BRANCH@;

   @COMMENT@/* update validation counters for transmission and discrepancy failure */@/COMMENT@
   @BRANCH MARK=TA ID=174 SUM=10@@JUMP NAME="AOM_CounterUpdate"@AOM_CounterUpdate@/JUMP@( TxFail, DiscrFail, &ADIRU_TxFailureCtr, &ADIRU_DiscrFailureCtr )@/BRANCH@;

   @COMMENT@/* set failure indication if a transmission or discrepancy failure is validated */@/COMMENT@
   @ALT@if(( ADIRU_TxFailureCtr    GE AOM_15CYCLES ) OR@-ALT@
@DECISION SUM=20+21 ID=176|177@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=177 SUM=21@implicit else@/BRANCH@@/POPUP@(@POPUP@( @POPUP@ADIRU_TxFailureCtr    >= 15@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=804 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=805 SUM=30@False@/BRANCH@@/POPUP@ ) ||@/ALT@
      @ALT@( ADIRU_DiscrFailureCtr GE AOM_3CYCLES ))@-ALT@
( @POPUP@ADIRU_DiscrFailureCtr >= 3@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=806 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=807 SUM=30@False@/BRANCH@@/POPUP@ )@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=808&810 SUM=31@ADIRU_TxFailureCtr >= 15@/BRANCH@ needs
      @BRANCH MARK=TE ID=808 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=810 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=809&810 SUM=31@ADIRU_DiscrFailureCtr >= 3@/BRANCH@ needs
      @BRANCH MARK=TE ID=809 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=810 SUM=32@FF@/BRANCH@=F@/POPUP@)@/ALT@
   @BRANCH MARK=TB ID=176 SUM=20@{
      AdiruA429Fail = TRUE;
   }@/BRANCH@@/DECISION@

   @COMMENT@/* if a failure is validated .. */@/COMMENT@
   @DECISION SUM=20+21 ID=178|179@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=179 SUM=21@implicit else@/BRANCH@@/POPUP@( @POPUP@AdiruA429Fail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=811 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=812 SUM=30@False@/BRANCH@@/POPUP@ )
   @BRANCH MARK=TB ID=178 SUM=20@{
      @COMMENT@/* generate dependent engineering data */@/COMMENT@
      @BRANCH MARK=TA ID=175 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 0, TxFail )@/BRANCH@;
      @BRANCH MARK=TA ID=176 SUM=10@@JUMP NAME="BIT_Assign"@BIT_Assign@/JUMP@( &A429_OutMon_Ded_1, 1, DiscrFail )@/BRANCH@;
      @BRANCH MARK=TA ID=177 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_A429_ADIRU_DED_1, (int32)A429_OutMon_Ded_1 )@/BRANCH@;
      @BRANCH MARK=TA ID=178 SUM=10@@JUMP NAME="AOM_Generate_ADIRUout_DepEngData"@AOM_Generate_ADIRUout_DepEngData@/JUMP@()@/BRANCH@;

      @COMMENT@/* .. disable A429 for Adiru bus */@/COMMENT@
      @BRANCH MARK=TA ID=179 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_OD_INT_ADIRU_ENABLE, FALSE )@/BRANCH@;
      @BRANCH MARK=TA ID=180 SUM=10@@JUMP NAME="DOR_Put_Output"@DOR_Put_Output@/JUMP@(DOR_A429_TX_ADIRU_EN, FALSE)@/BRANCH@;
      @COMMENT@/* .. set failure status to detected failure and send failure to MSP */@/COMMENT@
      @BRANCH MARK=TA ID=181 SUM=10@@JUMP NAME="FSE_Store_Failure_Event_DPRAM"@FSE_Store_Failure_Event_DPRAM@/JUMP@( DFE_ADIRUA429_FAILURE_STATUS, FS_DETECTED_FAILURE )@/BRANCH@;
   }@/BRANCH@@/DECISION@

   @COMMENT@/* write failure indication to database */@/COMMENT@
   @BRANCH MARK=TA ID=182 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_ADIRUA429FAIL, AdiruA429Fail )@/BRANCH@;
}@/BRANCH@@/NODE@


@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
void @NODE TYPE=FUNCTION NAME="AOM_Failure_Reaction_Slat"@@LINK NAME="AOM_Failure_Reaction_Slat"@AOM_Failure_Reaction_Slat( void )
@BRANCH MARK=TB ID=183 SUM=20@{
   @COMMENT@/* if failure is active .. */@/COMMENT@
   @DECISION SUM=20+21 ID=181|182@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=182 SUM=21@implicit else@/BRANCH@@/POPUP@( @POPUP@ACA429Fail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=813 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=814 SUM=30@False@/BRANCH@@/POPUP@ )
   @BRANCH MARK=TB ID=181 SUM=20@{
      @COMMENT@/* write failure reactions to database */@/COMMENT@
      @BRANCH MARK=TA ID=183 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_PCUABNORMALSHUTDOWN,    TRUE )@/BRANCH@;
      @BRANCH MARK=TA ID=184 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_PCUINHIBITSTARTUP,      TRUE )@/BRANCH@;
   }@/BRANCH@@/DECISION@
}@/BRANCH@@/NODE@


@COMMENT@/* ---------------------------------------------------------------------------*/@/COMMENT@
void @NODE TYPE=FUNCTION NAME="AOM_Failure_Reaction_Flap"@@LINK NAME="AOM_Failure_Reaction_Flap"@AOM_Failure_Reaction_Flap( void )
@BRANCH MARK=TB ID=186 SUM=20@{
   @COMMENT@/* get failure signals */@/COMMENT@
   boolean Failure = @POPUP@@POPUP@ACA429Fail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=815 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=816 SUM=30@False@/BRANCH@@/POPUP@
                     OR
                     @POPUP@AdiruA429Fail@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=817 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=818 SUM=30@False@/BRANCH@@/POPUP@@-POPUP@modified and multiple conditions:
  @BRANCH MARK=TE ID=819&821 SUM=31@ACA429Fail@/BRANCH@ needs
      @BRANCH MARK=TE ID=819 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=821 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=820&821 SUM=31@AdiruA429Fail@/BRANCH@ needs
      @BRANCH MARK=TE ID=820 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=821 SUM=32@FF@/BRANCH@=F@/POPUP@;

   @COMMENT@/* if failure is active .. */@/COMMENT@
   @DECISION SUM=20+21 ID=184|185@@POPUP@if@-POPUP@@BRANCH MARK=TB ID=185 SUM=21@implicit else@/BRANCH@@/POPUP@( @POPUP@Failure@-POPUP@basic boolean conditions:
  @BRANCH MARK=TE ID=822 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=823 SUM=30@False@/BRANCH@@/POPUP@ )
   @BRANCH MARK=TB ID=184 SUM=20@{
      @COMMENT@/* write failure reactions to database */@/COMMENT@
      @BRANCH MARK=TA ID=185 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_PCUABNORMALSHUTDOWN,    TRUE )@/BRANCH@;
      @BRANCH MARK=TA ID=186 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_PCUINHIBITSTARTUP,      TRUE )@/BRANCH@;
      @BRANCH MARK=TA ID=187 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_ADGBLHABNORMALSHUTDOWN, TRUE )@/BRANCH@;
      @BRANCH MARK=TA ID=188 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_ADGBLHINHIBITSTARTUP,   TRUE )@/BRANCH@;
      @BRANCH MARK=TA ID=189 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_ADGBRHABNORMALSHUTDOWN, TRUE )@/BRANCH@;
      @BRANCH MARK=TA ID=190 SUM=10@@JUMP NAME="DMA_Set"@DMA_Set@/JUMP@( DML_ADGBRHINHIBITSTARTUP,   TRUE )@/BRANCH@;
   }@/BRANCH@@/DECISION@
}@/BRANCH@@/NODE@
@/NODE /RIK@
VE 3.0e CCOV CMCDC #i5 7.0.0.0
FC "DMA_DATA_MANAGER.H" "E:\\A350_SFCC_SW\\SOURCECODE\\OPSW\\SOURCE\\OS_SERVICE\\"
FD 1471524304
TC AP BS BT BI BL CO CC
BL 0 simple "DMA_Get" / 69 72
DC 608847228
@RIK
  ENCODING="System"
  TOKEN="CCOV CMCDC"
  SRC="DMA_DATA_MANAGER.H"
  DIR="E:\A350_SFCC_SW\SOURCECODE\OPSW\SOURCE\OS_SERVICE\"
  DATE=1471524304
  CHECKSUM=608847228
  SUMS
   ("&Functions",
    "-&Exits",
    "Functions and exits"),
   ("&Calls"=10),
   ("Statement &blocks"=20,
    "-&Implicit blocks"=21,
    "Decisions"=20+21,
    "&Loops"=22),
   ("Basic &conditions"=30,
    "&Modified conditions"=31,
    "M&ultiple conditions"=32)
  ERRORS
    32="a source object was not linked with the right runtime object (check instrumentation mode)",
    49="a composition of conditions evaluates in an unexpected result, contact your vendor",
    50="a composition of conditions reached with an unexpected input vector, contact your vendor"
NODE TYPE=FILE NAME="DMA_DATA_MANAGER.H"@@COMMENT@/******************************************************************************/@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/* Copyright by     :   Diehl Aerospace GmbH Ueberlingen                      */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/* File name        :   DMA_Data_Manager.h                                    */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/* Author           :   R. Khan                                               */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/******************************************************************************/@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/*                      Module Specification                                  */@/COMMENT@
@COMMENT@/*                      ====================                                  */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/*  Module overview                                                           */@/COMMENT@
@COMMENT@/*  ---------------                                                           */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/*  The module contains the database and functions for accessing the          */@/COMMENT@
@COMMENT@/*  database.                                                                 */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/*  Requirements references                                                   */@/COMMENT@
@COMMENT@/*  -----------------------                                                   */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@
@COMMENT@/*  SDD_OPSW-CI-008                                                           */@/COMMENT@
@COMMENT@/*  SDD_OPSW-CI-430                                                           */@/COMMENT@
@COMMENT@/*  SDD_OPSW-CI-431                                                           */@/COMMENT@
@COMMENT@/*  SDD_OPSW-CI-432                                                           */@/COMMENT@
@COMMENT@/*  SDD_OPSW-CI-011                                                           */@/COMMENT@
@COMMENT@/*  SDD_OPSW-CI-012                                                           */@/COMMENT@
@COMMENT@/*                                                                            */@/COMMENT@

@COMMENT@#ifndef DMA_DATA_MANAGER@/COMMENT@
@COMMENT@#define DMA_DATA_MANAGER@/COMMENT@

@COMMENT@/* IMPORTED MODULES */@/COMMENT@
@COMMENT@#include "STD_Standard_Types.h"@/COMMENT@
@COMMENT@#include "DML_Data_Manager_Config.h"@/COMMENT@


@COMMENT@/* CONSTANTS */@/COMMENT@
@COMMENT@/* None */@/COMMENT@


@COMMENT@/* DATA TYPES */@/COMMENT@
typedef struct
{
   int32 Data;             @COMMENT@/* Data in the database.                                     */@/COMMENT@
   uint16 Is_Manipulated;  @COMMENT@/* Indication, that Data is being manipulated by IPA.        */@/COMMENT@
   uint16 Mapping;         @COMMENT@/* It contains the number of entry of the manipulation list, */@/COMMENT@
}
DMA_Entry_Type;

@COMMENT@/* Because of the inlining of function DMA_Get(), the DB has to be defined in the H-file,     */@/COMMENT@
@COMMENT@/* which makes the DB visible outside the module. However It is forbidden to access directly  */@/COMMENT@
@COMMENT@/* the DB, only get and set functions can be used to access the DB.                           */@/COMMENT@
@COMMENT@/* SCS_11 (D.Global_Data) : justified, extern required for inline of DMA_Get() */@/COMMENT@
extern DMA_Entry_Type DMA_Database[DML_NUM_ENTRIES];
@COMMENT@/* QA C (0612) : Since the variables in database must be handled, it is neccessary to have such a great buffer */@/COMMENT@

@COMMENT@/* EXPORTED ROUTINES */@/COMMENT@

void DMA_Init(void);

@COMMENT@/* The function DMA_Get() is inlined to increase the performance.                        */@/COMMENT@
@COMMENT@/* As the code is linear, it doesn't impact the source code to object code traceability. */@/COMMENT@
inline int32 @NODE TYPE=FUNCTION NAME="DMA_Get"@@LINK NAME="DMA_Get"@DMA_Get(
          @COMMENT@/* IN    */@/COMMENT@ DML_Index_Type Index)
@BRANCH MARK=TB ID=0 SUM=20@{
   @COMMENT@/* Return value from database. */@/COMMENT@
   return DMA_Database[Index].Data;@SHORTCUT MARK=TB ID=0@
}@/BRANCH@@/NODE@
@COMMENT@/* SCS_1 (C.Justification): Deviation to the SCS as inlining is not ANSI-C, used to improve the run-time. */@/COMMENT@

boolean DMA_Get_Single_Bit(
            @COMMENT@/* IN    */@/COMMENT@ DML_Index_Type Index,
            @COMMENT@/* IN    */@/COMMENT@ uint8          Bit_Position);

@COMMENT@@COMMENT@#ifdef OPSW_FCP_A@/COMMENT@
@COMMENT@/* SCS_7 (G.Conditional_Compilation) : LCRAM alignment on FCP_A (Module common for FCP_A, FCP B and ARE). */@/COMMENT@
@COMMENT@   #pragma alignfunc (8)@/COMMENT@
   @COMMENT@/* SCS_8 (G.Pragma) : Supersede linker action, pragma used to ensure that function is aligned on an eight byte boundary, which */@/COMMENT@
   @COMMENT@/* ensures the best alignment for run-time performance, as core processor reads two 32-bit fetches per clock (8 bytes).        */@/COMMENT@
@/COMMENT@@COMMENT@#endif@/COMMENT@
void DMA_Set(
         @COMMENT@/* IN    */@/COMMENT@ DML_Index_Type Index,
         @COMMENT@/* IN    */@/COMMENT@ int32 Value);

void DMA_IPA_Manipulate(
         @COMMENT@/* IN    */@/COMMENT@ DML_Index_Type Index,
         @COMMENT@/* IN    */@/COMMENT@ int32 Value);

void DMA_Restore_Manipulation(void);

@COMMENT@#endif@/COMMENT@
@/NODE /RIK@
